#ifndef TUNED_H_
#define TUNED_H_
#include "util.hpp"

constexpr Score t_taperedPawnPcSq[SQUARE_CT] = {
    S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(-2, -4), S(-2, -3),
    S(-2, -3), S(-2, -2), S(-2, -2), S(-1, -1), S(-1, -2), S(-1, -2), S(-2, -4), S(-3, -4), S(-4, -4), S(-4, -4),
    S(-3, -3), S(-3, -3), S(-3, -4), S(-1, -3), S(-1, -2), S(-1, -3), S(-2, -2), S(-3, -2), S(-3, -2), S(-2, -2),
    S(0, -1),  S(0, -1),  S(1, 0),   S(0, -2),  S(0, -1),  S(-3, -3), S(-1, -2), S(1, 0),   S(1, 0),   S(2, 1),
    S(0, 0),   S(1, -1),  S(0, -1),  S(1, -2),  S(0, -3),  S(2, 0),   S(0, -3),  S(0, 0),   S(-3, -6), S(-4, -7),
    S(0, -3),  S(1, 0),   S(0, -2),  S(-4, -7), S(-4, -6), S(-2, -6), S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),
    S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),
};
constexpr Score t_taperedKnightPcSq[SQUARE_CT] = {
    S(-2, -1), S(0, 0),   S(-1, -1), S(-2, -1), S(-1, -1), S(-1, -1), S(0, 0),   S(-1, 0),  S(0, 0),   S(-1, -1),
    S(-2, -1), S(-2, -1), S(-2, -1), S(-2, -1), S(-1, 0),  S(0, 0),   S(0, -1),  S(-1, -1), S(-3, -2), S(-4, -2),
    S(-3, -2), S(-3, -2), S(-1, -1), S(0, 0),   S(0, 0),   S(0, -1),  S(-2, -3), S(-4, -3), S(-4, -3), S(-3, -3),
    S(0, -1),  S(0, 0),   S(0, 0),   S(0, 0),   S(-1, -2), S(-2, -2), S(-3, -2), S(-1, -1), S(-1, -1), S(0, 0),
    S(1, 0),   S(1, 0),   S(-3, -3), S(0, 0),   S(0, 0),   S(-3, -2), S(0, 0),   S(1, 0),   S(1, 0),   S(1, 0),
    S(1, 1),   S(1, 0),   S(1, 0),   S(0, 0),   S(1, 1),   S(0, 0),   S(1, 0),   S(3, 2),   S(2, 1),   S(2, 1),
    S(2, 2),   S(2, 2),   S(2, 1),   S(0, 0),
};
constexpr Score t_taperedBishopPcSq[SQUARE_CT] = {
    S(-3, -2), S(-1, -1), S(-1, -1), S(-2, -1), S(-1, -1), S(-1, -1), S(-1, -1), S(-2, -1), S(0, 0),   S(-2, -2),
    S(-2, -1), S(-2, -2), S(-3, -2), S(-2, -2), S(-2, -1), S(-1, 0),  S(-1, -1), S(-2, -2), S(-3, -2), S(-3, -2),
    S(-2, -2), S(-3, -2), S(-2, -2), S(-1, -1), S(-1, -1), S(0, -1),  S(-3, -3), S(-3, -4), S(-3, -3), S(-2, -2),
    S(-1, -2), S(-1, -1), S(0, 0),   S(-1, -1), S(-2, -3), S(-2, -3), S(-3, -3), S(-2, -2), S(-1, -1), S(0, 0),
    S(0, 0),   S(-1, -1), S(-1, -2), S(-4, -3), S(-4, -3), S(-1, -2), S(-1, -1), S(0, 0),   S(0, 0),   S(0, 0),
    S(-1, -1), S(0, 0),   S(-1, -1), S(0, 0),   S(-1, -1), S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(1, 1),
    S(1, 1),   S(1, 0),   S(0, 0),   S(1, 0),
};
constexpr Score t_taperedRookPcSq[SQUARE_CT] = {
    S(-2, -2), S(-1, -2), S(-2, -2), S(-2, -2), S(-2, -2), S(-1, -1), S(0, -1),  S(-1, -1), S(-3, -4), S(-3, -4),
    S(-3, -4), S(-4, -4), S(-3, -3), S(-3, -3), S(-2, -2), S(-2, -3), S(-2, -3), S(-2, -3), S(-3, -3), S(-3, -4),
    S(-3, -3), S(-3, -3), S(-2, -3), S(-1, -2), S(-2, -2), S(-1, -2), S(-2, -3), S(-2, -3), S(-2, -3), S(-2, -2),
    S(-1, -2), S(-1, -2), S(0, -1),  S(0, -1),  S(-1, -2), S(-1, -2), S(-1, -2), S(0, -1),  S(0, 0),   S(0, 0),
    S(0, -1),  S(0, 0),   S(0, -1),  S(0, -1),  S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(1, 0),   S(0, 0),
    S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(-3, -4), S(1, 0),   S(-1, -1), S(-2, -3),
    S(-2, -2), S(-4, -3), S(1, 1),   S(1, -1),
};
constexpr Score t_taperedQueenPcSq[SQUARE_CT] = {
    S(-4, -6), S(-4, -5), S(-3, -4), S(-3, -4), S(-3, -4), S(-3, -4), S(-3, -4), S(-4, -5), S(-2, -3), S(-2, -3),
    S(-3, -4), S(-3, -4), S(-3, -4), S(-3, -3), S(-2, -2), S(-2, -2), S(-1, -2), S(-2, -3), S(-3, -4), S(-3, -4),
    S(-3, -4), S(-4, -4), S(-2, -3), S(-2, -3), S(-1, -2), S(-1, -3), S(-2, -4), S(-3, -5), S(-3, -4), S(-3, -4),
    S(-1, -3), S(-2, -3), S(0, -2),  S(-1, -3), S(-2, -4), S(-3, -5), S(-3, -4), S(-2, -3), S(-2, -3), S(-1, -2),
    S(0, -1),  S(-1, -3), S(-1, -3), S(-2, -4), S(-1, -3), S(-2, -4), S(-1, -2), S(0, -2),  S(0, -1),  S(0, -1),
    S(-2, -4), S(-2, -4), S(-1, -4), S(0, -1),  S(0, 0),   S(0, 0),   S(0, 0),   S(1, 0),   S(1, 0),   S(-3, -6),
    S(1, 0),   S(2, 0),   S(1, 0),   S(0, 0),
};
constexpr Score t_taperedKingPcSq[SQUARE_CT] = {
    S(0, 0),  S(0, 0), S(0, 0), S(0, 0),  S(0, 0),  S(0, 0),  S(0, 0),  S(0, 0),   S(0, 0),  S(0, 0), S(0, 0),
    S(0, 0),  S(0, 0), S(0, 0), S(0, 0),  S(0, 0),  S(0, 0),  S(0, 0),  S(0, 0),   S(0, 0),  S(0, 0), S(0, -1),
    S(0, -1), S(0, 0), S(0, 0), S(0, 0),  S(0, 0),  S(0, -1), S(0, -1), S(0, -1),  S(0, -1), S(0, 0), S(1, 1),
    S(0, 0),  S(0, 0), S(0, 0), S(0, -1), S(0, -1), S(0, 0),  S(0, 0),  S(1, 1),   S(1, 1),  S(1, 0), S(1, 0),
    S(0, 0),  S(0, 0), S(1, 0), S(1, 1),  S(0, 1),  S(0, 1),  S(1, 1),  S(2, 1),   S(2, 1),  S(0, 0), S(0, 0),
    S(0, 1),  S(0, 1), S(0, 0), S(0, 0),  S(4, 3),  S(1, 1),  S(4, 3),  S(-8, -8), S(3, 3),
};
constexpr Score t_passedPawnRankBonus[8] = {
    S(0, 0), S(-7, -13), S(-6, -11), S(-6, -12), S(-8, -12), S(-9, -12), S(-6, -8), S(0, 0),
};
constexpr Score t_doubledPawnRankBonus[8] = {
    S(0, 0), S(-3, -3), S(-3, -3), S(-4, -3), S(-2, -2), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score t_isolatedPawnRankBonus[8] = {
    S(0, 0), S(1, -1), S(2, 1), S(1, 1), S(-2, -1), S(-4, -5), S(-4, -6), S(0, 0),
};
constexpr Score t_backwardPawnRankBonus[8] = {
    S(0, 0), S(2, 0), S(1, -1), S(0, 2), S(-1, 2), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score t_KnightMobilityScore[9] = {
    S(3, 2), S(3, 2), S(1, 0), S(-2, -2), S(-4, -4), S(-6, -5), S(-5, -6), S(-3, -4), S(0, 0),
};
constexpr Score t_BishopMobilityScore[14] = {
    S(3, 2),   S(2, 1),   S(0, 0),   S(-3, -2), S(-5, -5), S(-6, -6), S(-6, -6),
    S(-5, -6), S(-5, -6), S(-3, -4), S(-3, -4), S(-1, -1), S(-1, -1), S(0, 0),
};
constexpr Score t_RookMobilityScore[15] = {
    S(0, 0),   S(0, -1),  S(0, 0),   S(1, 0),   S(-1, -2), S(-1, -1), S(-2, -3), S(-4, -5),
    S(-5, -7), S(-5, -7), S(-6, -8), S(-5, -7), S(-3, -5), S(-4, -7), S(0, 0),
};
constexpr Score t_QueenMobilityScore[28] = {
    S(0, 0),   S(0, 0),   S(1, 0),   S(1, 0),   S(2, 0),   S(2, 0),   S(0, -1),  S(0, -2),  S(-2, -4), S(-3, -5),
    S(-4, -6), S(-5, -7), S(-6, -8), S(-6, -8), S(-6, -9), S(-6, -8), S(-6, -9), S(-5, -8), S(-5, -8), S(-5, -7),
    S(-5, -7), S(-3, -4), S(-3, -4), S(-2, -2), S(-2, -2), S(0, -1),  S(-1, -1), S(0, 0),
};
static const Score *t_pcSq[] = {t_taperedPawnPcSq, t_taperedKnightPcSq, t_taperedBishopPcSq,
                                t_taperedRookPcSq, t_taperedQueenPcSq,  t_taperedKingPcSq};
#endif // TUNED_H_
