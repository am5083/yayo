#ifndef TUNED_H_
#define TUNED_H_
#include "util.hpp"
constexpr Score pawnScore   = S(PAWN_VAL - 29, PAWN_VAL - 46);
constexpr Score knightScore = S(KNIGHT_VAL - 14, KNIGHT_VAL - 15);
constexpr Score bishopScore = S(BISHOP_VAL - 28, BISHOP_VAL - 29);
constexpr Score rookScore   = S(ROOK_VAL - 42, ROOK_VAL - 52);
constexpr Score queenScore  = S(QUEEN_VAL - 70, QUEEN_VAL - 71);

constexpr Score t_taperedPawnPcSq[SQUARE_CT] = {
    S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),   S(-4, -6),  S(-4, -6),
    S(-4, -5), S(-4, -4), S(-4, -4), S(-2, -3),  S(-2, -3),  S(-1, -4),  S(-3, -7), S(-5, -7), S(-6, -6),  S(-7, -6),
    S(-6, -6), S(-6, -5), S(-5, -6), S(-2, -5),  S(-2, -4),  S(-2, -5),  S(-4, -4), S(-6, -4), S(-6, -4),  S(-3, -4),
    S(-1, -3), S(-1, -3), S(2, 0),   S(0, -4),   S(-1, -2),  S(-5, -6),  S(-2, -3), S(2, 0),   S(2, 0),    S(4, 3),
    S(1, -1),  S(2, -2),  S(1, -2),  S(2, -3),   S(0, -6),   S(4, 0),    S(-1, -5), S(0, 0),   S(-5, -10), S(-7, -13),
    S(-1, -6), S(3, 0),   S(0, -3),  S(-8, -12), S(-8, -11), S(-3, -10), S(0, 0),   S(0, 0),   S(0, 0),    S(0, 0),
    S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),
};
constexpr Score t_taperedKnightPcSq[SQUARE_CT] = {
    S(-3, -2), S(-1, -1), S(-3, -2), S(-3, -2), S(-2, -2), S(-2, -1), S(-1, -1), S(-2, -1), S(-1, -1), S(-3, -1),
    S(-4, -2), S(-4, -3), S(-3, -2), S(-3, -2), S(-2, -1), S(-1, 0),  S(-1, -1), S(-3, -2), S(-5, -4), S(-6, -4),
    S(-6, -4), S(-5, -4), S(-3, -2), S(0, -1),  S(0, 0),   S(-1, -2), S(-4, -5), S(-7, -6), S(-7, -6), S(-6, -5),
    S(-1, -1), S(-1, -1), S(1, 0),   S(0, -1),  S(-2, -3), S(-3, -4), S(-5, -4), S(-2, -3), S(-2, -1), S(0, 0),
    S(2, 1),   S(1, 0),   S(-6, -5), S(-1, -1), S(0, -1),  S(-6, -4), S(0, 0),   S(1, 1),   S(2, 1),   S(1, 0),
    S(2, 1),   S(2, 1),   S(1, 1),   S(0, 0),   S(2, 1),   S(1, 0),   S(2, 1),   S(5, 3),   S(3, 2),   S(4, 3),
    S(4, 3),   S(3, 3),   S(4, 2),   S(1, 0),
};
constexpr Score t_taperedBishopPcSq[SQUARE_CT] = {
    S(-5, -4), S(-2, -2), S(-3, -2), S(-4, -2), S(-2, -2), S(-3, -2), S(-1, -1), S(-3, -2), S(-1, -1), S(-4, -3),
    S(-3, -2), S(-4, -3), S(-5, -3), S(-4, -3), S(-4, -3), S(-2, -1), S(-2, -2), S(-4, -3), S(-5, -4), S(-5, -4),
    S(-4, -4), S(-6, -4), S(-3, -3), S(-3, -2), S(-2, -2), S(-1, -3), S(-5, -5), S(-6, -7), S(-5, -5), S(-5, -4),
    S(-2, -3), S(-2, -2), S(0, -1),  S(-2, -3), S(-4, -5), S(-4, -5), S(-5, -5), S(-4, -4), S(-2, -3), S(0, 0),
    S(0, -1),  S(-2, -2), S(-2, -4), S(-6, -5), S(-7, -6), S(-2, -3), S(-2, -2), S(0, -1),  S(0, 0),   S(0, -1),
    S(-2, -2), S(0, -1),  S(-2, -2), S(-1, 0),  S(-2, -2), S(0, 0),   S(1, 0),   S(0, 0),   S(1, 1),   S(3, 2),
    S(2, 2),   S(2, 0),   S(0, 0),   S(2, 1),
};
constexpr Score t_taperedRookPcSq[SQUARE_CT] = {
    S(-3, -4), S(-2, -3), S(-3, -4), S(-3, -4), S(-3, -3), S(-3, -3), S(-1, -1), S(-2, -1), S(-5, -6), S(-5, -6),
    S(-6, -7), S(-6, -7), S(-5, -6), S(-6, -6), S(-4, -4), S(-4, -5), S(-4, -6), S(-4, -5), S(-5, -6), S(-6, -6),
    S(-5, -6), S(-5, -6), S(-3, -5), S(-3, -4), S(-3, -4), S(-2, -4), S(-4, -6), S(-4, -5), S(-4, -5), S(-3, -4),
    S(-1, -3), S(-2, -3), S(-1, -2), S(-1, -2), S(-1, -4), S(-2, -4), S(-2, -3), S(0, -2),  S(0, -1),  S(0, -1),
    S(0, -1),  S(0, -1),  S(0, -2),  S(0, -1),  S(0, -1),  S(1, 0),   S(0, 0),   S(0, 0),   S(2, 0),   S(0, -1),
    S(0, -1),  S(1, 0),   S(1, 0),   S(0, 0),   S(0, 0),   S(1, 0),   S(-5, -8), S(2, 0),   S(-2, -3), S(-4, -6),
    S(-4, -4), S(-6, -6), S(3, 1),   S(2, -2),
};
constexpr Score t_taperedQueenPcSq[SQUARE_CT] = {
    S(-8, -10), S(-6, -8), S(-6, -8), S(-6, -7), S(-5, -7), S(-5, -7), S(-5, -7), S(-6, -8), S(-3, -5), S(-4, -6),
    S(-5, -7),  S(-6, -7), S(-6, -7), S(-5, -6), S(-4, -4), S(-3, -4), S(-3, -4), S(-3, -5), S(-6, -7), S(-5, -7),
    S(-5, -7),  S(-7, -8), S(-4, -6), S(-3, -5), S(-2, -4), S(-2, -5), S(-4, -6), S(-6, -8), S(-6, -7), S(-6, -8),
    S(-3, -5),  S(-4, -6), S(-1, -5), S(-3, -5), S(-3, -6), S(-5, -8), S(-5, -8), S(-3, -6), S(-4, -6), S(-2, -4),
    S(0, -3),   S(-2, -6), S(-2, -6), S(-3, -7), S(-2, -6), S(-3, -6), S(-1, -4), S(-1, -3), S(0, -2),  S(0, -3),
    S(-4, -8),  S(-3, -6), S(-2, -7), S(0, -3),  S(0, -1),  S(0, -1),  S(1, -1),  S(2, 0),   S(3, 0),   S(-5, -11),
    S(2, 0),    S(3, 0),   S(1, 0),   S(0, -1),
};
constexpr Score t_taperedKingPcSq[SQUARE_CT] = {
    S(0, 0),   S(0, 0), S(0, 0),  S(0, 0),  S(0, 0),  S(0, 0),  S(0, 0),  S(0, 0),     S(0, 0),  S(0, 0),  S(0, 0),
    S(0, 0),   S(0, 0), S(0, 0),  S(0, 0),  S(0, 0),  S(0, 0),  S(0, 0),  S(0, -1),    S(0, 0),  S(0, -1), S(-1, -2),
    S(-1, -2), S(0, 0), S(0, 0),  S(0, 0),  S(0, -1), S(0, -1), S(0, -2), S(-1, -2),   S(0, -2), S(0, 0),  S(1, 1),
    S(1, 1),   S(1, 0), S(0, -1), S(0, -2), S(0, -1), S(0, 0),  S(1, 0),  S(2, 3),     S(2, 2),  S(1, 1),  S(2, 1),
    S(1, 0),   S(1, 0), S(1, 1),  S(3, 2),  S(0, 1),  S(1, 2),  S(2, 2),  S(3, 2),     S(3, 2),  S(0, 0),  S(0, -1),
    S(1, 1),   S(1, 2), S(0, 0),  S(-1, 0), S(6, 5),  S(2, 2),  S(8, 5),  S(-14, -13), S(6, 6),
};
constexpr Score t_passedPawnRankBonus[8] = {
    S(0, 0), S(-13, -22), S(-11, -19), S(-10, -20), S(-14, -21), S(-16, -20), S(-11, -14), S(0, 0),
};
constexpr Score t_doubledPawnRankBonus[8] = {
    S(0, 0), S(-5, -6), S(-6, -6), S(-7, -5), S(-3, -3), S(0, -1), S(0, 0), S(0, 0),
};
constexpr Score t_isolatedPawnRankBonus[8] = {
    S(0, 0), S(3, -2), S(4, 3), S(2, 3), S(-4, -2), S(-7, -9), S(-7, -10), S(0, 0),
};
constexpr Score t_backwardPawnRankBonus[8] = {
    S(0, 0), S(4, 0), S(2, -2), S(0, 3), S(-2, 3), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score t_KnightMobilityScore[9] = {
    S(6, 4), S(6, 4), S(2, 1), S(-3, -3), S(-7, -6), S(-10, -9), S(-9, -10), S(-5, -7), S(0, 0),
};
constexpr Score t_BishopMobilityScore[14] = {
    S(5, 3),    S(3, 3),    S(0, 0),   S(-6, -4), S(-9, -8), S(-10, -10), S(-11, -11),
    S(-9, -11), S(-9, -11), S(-6, -7), S(-5, -6), S(-1, -2), S(-2, -3),   S(0, 0),
};
constexpr Score t_RookMobilityScore[15] = {
    S(1, 0),    S(1, -1),   S(1, 0),     S(1, 0),    S(-3, -3), S(-2, -2),  S(-4, -5), S(-7, -8),
    S(-9, -12), S(-9, -13), S(-10, -14), S(-8, -12), S(-6, -8), S(-7, -13), S(0, 0),
};
constexpr Score t_QueenMobilityScore[28] = {
    S(0, 0),     S(1, 0),     S(1, 0),     S(2, 1),    S(3, 0),    S(3, 0),     S(1, -2),
    S(0, -4),    S(-3, -7),   S(-6, -9),   S(-7, -11), S(-9, -12), S(-10, -14), S(-10, -14),
    S(-10, -15), S(-10, -14), S(-10, -15), S(-9, -14), S(-9, -14), S(-8, -12),  S(-9, -13),
    S(-5, -8),   S(-5, -7),   S(-3, -5),   S(-3, -4),  S(-1, -1),  S(-1, -2),   S(0, 0),
};
static const Score *t_pcSq[] = {t_taperedPawnPcSq, t_taperedKnightPcSq, t_taperedBishopPcSq,
                                t_taperedRookPcSq, t_taperedQueenPcSq,  t_taperedKingPcSq};
#endif // TUNED_H_
