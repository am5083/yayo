#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"

constexpr Score pawnScore = S(84, 89);
constexpr Score knightScore = S(273, 305);
constexpr Score bishopScore = S(344, 345);
constexpr Score rookScore = S(446, 561);
constexpr Score queenScore = S(960, 972);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),
      S(0, 0),     S(0, 0),     S(-9, 17),  S(-4, -3),   S(7, 9),    S(0, -41),
      S(-25, -38), S(-10, -38), S(-69, -2), S(-71, 19),  S(-17, 47), S(-20, 43),
      S(5, 9),     S(2, -27),   S(11, -26), S(58, -13),  S(51, 13),  S(-8, 34),
      S(-26, 28),  S(-29, 21),  S(-14, 1),  S(-11, -17), S(8, -18),  S(1, -8),
      S(-11, 8),   S(-1, 5),    S(-38, 16), S(-35, 14),  S(-21, 3),  S(-9, -5),
      S(-11, -3),  S(-11, 1),   S(-20, 5),  S(-18, -1),  S(-31, 14), S(-30, 11),
      S(-19, 6),   S(-11, 1),   S(-2, 5),   S(-8, 6),    S(1, 1),    S(-9, 0),
      S(-27, 15),  S(-26, 12),  S(-19, 10), S(-12, 10),  S(-8, 14),  S(12, 4),
      S(14, -2),   S(-12, -1),  S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),
      S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-75, -70), S(-74, -61), S(-11, -21), S(-4, -26),  S(-56, -12),
      S(-41, -54), S(-62, -44), S(-72, -69), S(-25, -26), S(-39, -14),
      S(-2, -9),   S(36, -22),  S(3, -26),   S(49, -51),  S(-21, -11),
      S(31, -41),  S(-26, -4),  S(4, -13),   S(-2, 0),    S(21, -5),
      S(49, -8),   S(56, -23),  S(18, -23),  S(4, 0),     S(-33, 1),
      S(-16, -11), S(4, 10),    S(17, 11),   S(2, 9),     S(18, 3),
      S(-10, -7),  S(18, -18),  S(-23, -12), S(-27, -4),  S(-19, 13),
      S(-9, 6),    S(2, 10),    S(-7, 3),    S(9, -9),    S(-18, 9),
      S(-51, -10), S(-39, -18), S(-27, -13), S(-28, 4),   S(-6, -2),
      S(-21, -18), S(-17, -16), S(-18, -19), S(-46, -38), S(-47, 0),
      S(-38, -11), S(-25, -14), S(-23, -12), S(-21, -19), S(-19, -25),
      S(-32, 5),   S(-72, -3),  S(-38, -21), S(-47, -8),  S(-25, -9),
      S(-27, -19), S(-29, -18), S(-40, -15), S(-54, 3),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-30, 4),   S(-32, -4),  S(-23, -32), S(-6, -25),  S(-70, -6),
      S(-8, -34),  S(12, -24),  S(-57, -29), S(-31, -17), S(-14, -15),
      S(-19, -21), S(-9, -29),  S(-4, -27),  S(-3, -26),  S(-23, -18),
      S(-3, -29),  S(-34, -2),  S(-8, -2),   S(-1, -9),   S(6, -15),
      S(0, -15),   S(29, -19),  S(11, -17),  S(14, -18),  S(-29, -12),
      S(-10, -2),  S(6, -14),   S(20, 1),    S(12, -8),   S(18, -9),
      S(-6, -4),   S(-14, -8),  S(-14, -23), S(-18, -7),  S(-11, -1),
      S(15, -7),   S(7, -7),    S(-7, -8),   S(-21, -6),  S(11, -19),
      S(-8, -17),  S(2, 0),     S(-6, -6),   S(-2, -6),   S(6, -5),
      S(1, -9),    S(10, -21),  S(2, -17),   S(2, -18),   S(-1, -24),
      S(5, -19),   S(-14, -15), S(-6, -13),  S(11, -20),  S(14, -16),
      S(9, -12),   S(-20, -18), S(13, -10),  S(1, -23),   S(-21, -8),
      S(1, -20),   S(-11, -8),  S(16, -44),  S(4, -29),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(13, 31),  S(9, 32),   S(-10, 46), S(-2, 39),  S(40, 24),  S(8, 31),
      S(10, 45),  S(51, 17),  S(-25, 29), S(-25, 43), S(-7, 47),  S(9, 39),
      S(10, 34),  S(38, 28),  S(20, 20),  S(57, 11),  S(-41, 40), S(-13, 30),
      S(-9, 30),  S(-3, 28),  S(24, 16),  S(28, 15),  S(67, 14),  S(30, 10),
      S(-39, 37), S(-31, 34), S(-34, 47), S(-24, 46), S(-11, 19), S(-11, 20),
      S(-2, 24),  S(7, 16),   S(-44, 32), S(-53, 39), S(-42, 36), S(-28, 30),
      S(-39, 35), S(-28, 25), S(-23, 25), S(-34, 18), S(-61, 36), S(-52, 27),
      S(-50, 30), S(-38, 25), S(-37, 28), S(-36, 22), S(-2, 12),  S(-36, 14),
      S(-53, 23), S(-52, 31), S(-31, 22), S(-30, 22), S(-28, 15), S(-28, 14),
      S(-8, 11),  S(-41, 9),  S(-43, 25), S(-40, 23), S(-30, 28), S(-26, 20),
      S(-20, 15), S(-27, 18), S(-18, 13), S(-43, 14),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-44, 27), S(-64, 40),  S(-15, 33), S(-36, 66), S(1, 51),   S(50, 25),
      S(56, 21),  S(-1, 44),   S(-47, 26), S(-66, 47), S(-64, 73), S(-39, 70),
      S(-36, 72), S(-5, 57),   S(-17, 24), S(19, 46),  S(-40, 35), S(-28, 21),
      S(-42, 72), S(-25, 57),  S(-20, 71), S(37, 39),  S(37, 19),  S(19, 58),
      S(-37, 22), S(-33, 37),  S(-46, 65), S(-39, 70), S(-35, 71), S(-20, 71),
      S(-13, 57), S(-13, 62),  S(-33, 5),  S(-47, 62), S(-52, 68), S(-31, 59),
      S(-39, 65), S(-36, 62),  S(-27, 65), S(-16, 48), S(-42, 21), S(-35, 45),
      S(-36, 46), S(-37, 43),  S(-34, 48), S(-28, 58), S(-12, 19), S(-7, 23),
      S(-29, 4),  S(-23, 2),   S(-25, 20), S(-14, 6),  S(-18, 13), S(-8, -1),
      S(-4, -22), S(16, -53),  S(-19, -7), S(-15, -8), S(-16, -7), S(-11, 2),
      S(-8, -13), S(-13, -20), S(-13, 8),  S(9, -40),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(47, -66), S(-2, -30), S(34, -32),  S(1, -8),   S(-64, 22),  S(-45, 11),
      S(-38, 14), S(15, -66), S(-34, -12), S(-37, 18), S(13, 19),   S(-8, 33),
      S(65, 37),  S(-6, 62),  S(70, 41),   S(2, 6),    S(-75, 4),   S(15, 27),
      S(-13, 45), S(-30, 54), S(-4, 54),   S(-5, 47),  S(24, 45),   S(-9, 36),
      S(-43, -3), S(-46, 37), S(-80, 50),  S(-82, 65), S(-24, 57),  S(-49, 56),
      S(-79, 57), S(-77, 29), S(-63, -17), S(-70, 27), S(-77, 47),  S(-82, 60),
      S(-81, 57), S(-75, 42), S(-77, 34),  S(-76, 12), S(-54, -17), S(-7, 5),
      S(-69, 28), S(-75, 41), S(-74, 41),  S(-74, 30), S(-29, 13),  S(-66, 13),
      S(50, -29), S(14, -10), S(-3, 6),    S(-40, 14), S(-53, 26),  S(-30, 13),
      S(12, -1),  S(16, -16), S(28, -56),  S(67, -46), S(46, -24),  S(-48, -5),
      S(10, -21), S(-22, -8), S(40, -34),  S(36, -63),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),  S(0, 7),    S(-4, 16),  S(-6, 38),
      S(8, 82), S(14, 124), S(31, 185), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(0, 0),    S(1, -16),   S(-11, -6), S(-6, -17),
      S(15, -58), S(-68, -25), S(0, 0),    S(0, 0),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(0, 0),    S(-17, -8), S(-20, -14), S(-12, -11),
      S(-4, -22), S(5, -18),  S(16, -3),   S(0, 0),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(0, 0),  S(-10, -9), S(-2, -6), S(-6, -3),
      S(-9, 5), S(0, 0),    S(0, 0),   S(0, 0),
};
constexpr Score KnightMobilityScore[9] = {
      S(-20, -53), S(6, 5),   S(21, 16), S(30, 28), S(39, 35),
      S(45, 49),   S(52, 49), S(61, 48), S(64, 36),
};
constexpr Score BishopMobilityScore[14] = {
      S(-65, -39), S(-46, -32), S(-33, -17), S(-24, 1), S(-14, 6),
      S(-8, 15),   S(-4, 22),   S(0, 25),    S(2, 29),  S(6, 29),
      S(13, 25),   S(26, 18),   S(63, 25),   S(67, 17),
};
constexpr Score RookMobilityScore[15] = {
      S(-55, -69), S(-40, -30), S(-35, -16), S(-31, -5), S(-27, 0),
      S(-25, 2),   S(-19, 9),   S(-12, 10),  S(-8, 17),  S(4, 20),
      S(7, 22),    S(16, 24),   S(18, 30),   S(23, 28),  S(15, 35),
};
constexpr Score QueenMobilityScore[28] = {
      S(-64, -61), S(-73, -76), S(-66, 1),  S(-52, -59), S(-48, 26),
      S(-37, -19), S(-35, 25),  S(-32, 34), S(-28, 49),  S(-22, 44),
      S(-18, 51),  S(-14, 60),  S(-12, 64), S(-10, 66),  S(-6, 67),
      S(-6, 70),   S(-3, 71),   S(4, 72),   S(2, 73),    S(14, 70),
      S(18, 73),   S(55, 60),   S(56, 65),  S(57, 66),   S(46, 41),
      S(91, 50),   S(107, 61),  S(52, 96),
};

struct EvalWeights {
    const Score pawnScore = S(84, 89);
    const Score knightScore = S(273, 305);
    const Score bishopScore = S(344, 345);
    const Score rookScore = S(446, 561);
    const Score queenScore = S(960, 972);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),    S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0),
          S(0, 0),    S(0, 0),    S(0, 0),     S(-9, 17),   S(-4, -3),
          S(7, 9),    S(0, -41),  S(-25, -38), S(-10, -38), S(-69, -2),
          S(-71, 19), S(-17, 47), S(-20, 43),  S(5, 9),     S(2, -27),
          S(11, -26), S(58, -13), S(51, 13),   S(-8, 34),   S(-26, 28),
          S(-29, 21), S(-14, 1),  S(-11, -17), S(8, -18),   S(1, -8),
          S(-11, 8),  S(-1, 5),   S(-38, 16),  S(-35, 14),  S(-21, 3),
          S(-9, -5),  S(-11, -3), S(-11, 1),   S(-20, 5),   S(-18, -1),
          S(-31, 14), S(-30, 11), S(-19, 6),   S(-11, 1),   S(-2, 5),
          S(-8, 6),   S(1, 1),    S(-9, 0),    S(-27, 15),  S(-26, 12),
          S(-19, 10), S(-12, 10), S(-8, 14),   S(12, 4),    S(14, -2),
          S(-12, -1), S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0),
          S(0, 0),    S(0, 0),    S(0, 0),     S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-75, -70), S(-74, -61), S(-11, -21), S(-4, -26),  S(-56, -12),
          S(-41, -54), S(-62, -44), S(-72, -69), S(-25, -26), S(-39, -14),
          S(-2, -9),   S(36, -22),  S(3, -26),   S(49, -51),  S(-21, -11),
          S(31, -41),  S(-26, -4),  S(4, -13),   S(-2, 0),    S(21, -5),
          S(49, -8),   S(56, -23),  S(18, -23),  S(4, 0),     S(-33, 1),
          S(-16, -11), S(4, 10),    S(17, 11),   S(2, 9),     S(18, 3),
          S(-10, -7),  S(18, -18),  S(-23, -12), S(-27, -4),  S(-19, 13),
          S(-9, 6),    S(2, 10),    S(-7, 3),    S(9, -9),    S(-18, 9),
          S(-51, -10), S(-39, -18), S(-27, -13), S(-28, 4),   S(-6, -2),
          S(-21, -18), S(-17, -16), S(-18, -19), S(-46, -38), S(-47, 0),
          S(-38, -11), S(-25, -14), S(-23, -12), S(-21, -19), S(-19, -25),
          S(-32, 5),   S(-72, -3),  S(-38, -21), S(-47, -8),  S(-25, -9),
          S(-27, -19), S(-29, -18), S(-40, -15), S(-54, 3),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-30, 4),   S(-32, -4),  S(-23, -32), S(-6, -25),  S(-70, -6),
          S(-8, -34),  S(12, -24),  S(-57, -29), S(-31, -17), S(-14, -15),
          S(-19, -21), S(-9, -29),  S(-4, -27),  S(-3, -26),  S(-23, -18),
          S(-3, -29),  S(-34, -2),  S(-8, -2),   S(-1, -9),   S(6, -15),
          S(0, -15),   S(29, -19),  S(11, -17),  S(14, -18),  S(-29, -12),
          S(-10, -2),  S(6, -14),   S(20, 1),    S(12, -8),   S(18, -9),
          S(-6, -4),   S(-14, -8),  S(-14, -23), S(-18, -7),  S(-11, -1),
          S(15, -7),   S(7, -7),    S(-7, -8),   S(-21, -6),  S(11, -19),
          S(-8, -17),  S(2, 0),     S(-6, -6),   S(-2, -6),   S(6, -5),
          S(1, -9),    S(10, -21),  S(2, -17),   S(2, -18),   S(-1, -24),
          S(5, -19),   S(-14, -15), S(-6, -13),  S(11, -20),  S(14, -16),
          S(9, -12),   S(-20, -18), S(13, -10),  S(1, -23),   S(-21, -8),
          S(1, -20),   S(-11, -8),  S(16, -44),  S(4, -29),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(13, 31),  S(9, 32),   S(-10, 46), S(-2, 39),  S(40, 24),
          S(8, 31),   S(10, 45),  S(51, 17),  S(-25, 29), S(-25, 43),
          S(-7, 47),  S(9, 39),   S(10, 34),  S(38, 28),  S(20, 20),
          S(57, 11),  S(-41, 40), S(-13, 30), S(-9, 30),  S(-3, 28),
          S(24, 16),  S(28, 15),  S(67, 14),  S(30, 10),  S(-39, 37),
          S(-31, 34), S(-34, 47), S(-24, 46), S(-11, 19), S(-11, 20),
          S(-2, 24),  S(7, 16),   S(-44, 32), S(-53, 39), S(-42, 36),
          S(-28, 30), S(-39, 35), S(-28, 25), S(-23, 25), S(-34, 18),
          S(-61, 36), S(-52, 27), S(-50, 30), S(-38, 25), S(-37, 28),
          S(-36, 22), S(-2, 12),  S(-36, 14), S(-53, 23), S(-52, 31),
          S(-31, 22), S(-30, 22), S(-28, 15), S(-28, 14), S(-8, 11),
          S(-41, 9),  S(-43, 25), S(-40, 23), S(-30, 28), S(-26, 20),
          S(-20, 15), S(-27, 18), S(-18, 13), S(-43, 14),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-44, 27), S(-64, 40),  S(-15, 33), S(-36, 66), S(1, 51),
          S(50, 25),  S(56, 21),   S(-1, 44),  S(-47, 26), S(-66, 47),
          S(-64, 73), S(-39, 70),  S(-36, 72), S(-5, 57),  S(-17, 24),
          S(19, 46),  S(-40, 35),  S(-28, 21), S(-42, 72), S(-25, 57),
          S(-20, 71), S(37, 39),   S(37, 19),  S(19, 58),  S(-37, 22),
          S(-33, 37), S(-46, 65),  S(-39, 70), S(-35, 71), S(-20, 71),
          S(-13, 57), S(-13, 62),  S(-33, 5),  S(-47, 62), S(-52, 68),
          S(-31, 59), S(-39, 65),  S(-36, 62), S(-27, 65), S(-16, 48),
          S(-42, 21), S(-35, 45),  S(-36, 46), S(-37, 43), S(-34, 48),
          S(-28, 58), S(-12, 19),  S(-7, 23),  S(-29, 4),  S(-23, 2),
          S(-25, 20), S(-14, 6),   S(-18, 13), S(-8, -1),  S(-4, -22),
          S(16, -53), S(-19, -7),  S(-15, -8), S(-16, -7), S(-11, 2),
          S(-8, -13), S(-13, -20), S(-13, 8),  S(9, -40),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(47, -66),  S(-2, -30), S(34, -32),  S(1, -8),    S(-64, 22),
          S(-45, 11),  S(-38, 14), S(15, -66),  S(-34, -12), S(-37, 18),
          S(13, 19),   S(-8, 33),  S(65, 37),   S(-6, 62),   S(70, 41),
          S(2, 6),     S(-75, 4),  S(15, 27),   S(-13, 45),  S(-30, 54),
          S(-4, 54),   S(-5, 47),  S(24, 45),   S(-9, 36),   S(-43, -3),
          S(-46, 37),  S(-80, 50), S(-82, 65),  S(-24, 57),  S(-49, 56),
          S(-79, 57),  S(-77, 29), S(-63, -17), S(-70, 27),  S(-77, 47),
          S(-82, 60),  S(-81, 57), S(-75, 42),  S(-77, 34),  S(-76, 12),
          S(-54, -17), S(-7, 5),   S(-69, 28),  S(-75, 41),  S(-74, 41),
          S(-74, 30),  S(-29, 13), S(-66, 13),  S(50, -29),  S(14, -10),
          S(-3, 6),    S(-40, 14), S(-53, 26),  S(-30, 13),  S(12, -1),
          S(16, -16),  S(28, -56), S(67, -46),  S(46, -24),  S(-48, -5),
          S(10, -21),  S(-22, -8), S(40, -34),  S(36, -63),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),  S(0, 7),    S(-4, 16),  S(-6, 38),
          S(8, 82), S(14, 124), S(31, 185), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(0, 0),    S(1, -16),   S(-11, -6), S(-6, -17),
          S(15, -58), S(-68, -25), S(0, 0),    S(0, 0),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(0, 0),    S(-17, -8), S(-20, -14), S(-12, -11),
          S(-4, -22), S(5, -18),  S(16, -3),   S(0, 0),
    };
    const Score backwardPawnRankBonus[8] = {
          S(0, 0),  S(-10, -9), S(-2, -6), S(-6, -3),
          S(-9, 5), S(0, 0),    S(0, 0),   S(0, 0),
    };
    const Score KnightMobilityScore[9] = {
          S(-20, -53), S(6, 5),   S(21, 16), S(30, 28), S(39, 35),
          S(45, 49),   S(52, 49), S(61, 48), S(64, 36),
    };
    const Score BishopMobilityScore[14] = {
          S(-65, -39), S(-46, -32), S(-33, -17), S(-24, 1), S(-14, 6),
          S(-8, 15),   S(-4, 22),   S(0, 25),    S(2, 29),  S(6, 29),
          S(13, 25),   S(26, 18),   S(63, 25),   S(67, 17),
    };
    const Score RookMobilityScore[15] = {
          S(-55, -69), S(-40, -30), S(-35, -16), S(-31, -5), S(-27, 0),
          S(-25, 2),   S(-19, 9),   S(-12, 10),  S(-8, 17),  S(4, 20),
          S(7, 22),    S(16, 24),   S(18, 30),   S(23, 28),  S(15, 35),
    };
    const Score QueenMobilityScore[28] = {
          S(-64, -61), S(-73, -76), S(-66, 1),  S(-52, -59), S(-48, 26),
          S(-37, -19), S(-35, 25),  S(-32, 34), S(-28, 49),  S(-22, 44),
          S(-18, 51),  S(-14, 60),  S(-12, 64), S(-10, 66),  S(-6, 67),
          S(-6, 70),   S(-3, 71),   S(4, 72),   S(2, 73),    S(14, 70),
          S(18, 73),   S(55, 60),   S(56, 65),  S(57, 66),   S(46, 41),
          S(91, 50),   S(107, 61),  S(52, 96),
    };
};
#endif // WEIGHTS_H_
