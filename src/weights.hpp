#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"
constexpr Score pawnScore = S(82, 128);
constexpr Score knightScore = S(368, 428);
constexpr Score bishopScore = S(388, 422);
constexpr Score rookScore = S(521, 685);
constexpr Score queenScore = S(1133, 1346);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),      S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),   S(0, 0),    S(27, 123), S(-10, 105),
      S(-36, 120),  S(22, 51), S(-14, 42), S(-19, 40), S(-133, 120),
      S(-105, 121), S(6, 114), S(-9, 121), S(25, 66),  S(20, 3),
      S(49, -1),    S(98, 35), S(74, 65),  S(14, 91),  S(-15, 49),
      S(-13, 34),   S(3, 22),  S(6, -7),   S(37, 5),   S(34, 0),
      S(23, 23),    S(13, 25), S(-20, 25), S(-16, 25), S(2, 10),
      S(14, -6),    S(13, 1),  S(17, 4),   S(0, 12),   S(-4, 5),
      S(-12, 20),   S(-7, 19), S(6, 12),   S(11, 1),   S(30, 10),
      S(25, 9),     S(33, 5),  S(15, 1),   S(-6, 24),  S(-7, 24),
      S(7, 12),     S(0, 26),  S(13, 31),  S(48, 12),  S(40, 3),
      S(10, 4),     S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),   S(0, 0),    S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-154, -33), S(-125, -42), S(-48, -13),   S(-3, 2),    S(63, -27),
      S(-91, -29),  S(-24, -22),  S(-106, -110), S(-41, 9),   S(12, -14),
      S(33, -18),   S(62, -21),   S(72, -16),    S(110, -34), S(34, -4),
      S(63, -21),   S(-21, -2),   S(54, -25),    S(48, 26),   S(90, 24),
      S(104, 16),   S(134, 4),    S(88, -34),    S(34, -40),  S(0, 19),
      S(14, 27),    S(34, 49),    S(73, 43),     S(55, 41),   S(75, 41),
      S(42, 24),    S(77, -5),    S(-5, 9),      S(-1, 21),   S(22, 42),
      S(39, 37),    S(43, 45),    S(45, 33),     S(64, 7),    S(13, 16),
      S(-14, -19),  S(-6, 2),     S(11, 17),     S(9, 32),    S(40, 22),
      S(25, 0),     S(27, -4),    S(15, -17),    S(-51, 11),  S(-36, 21),
      S(-8, -17),   S(12, 5),     S(19, 8),      S(22, -2),   S(0, -35),
      S(2, -21),    S(-88, -33),  S(-18, -17),   S(-47, 8),   S(3, 2),
      S(10, 4),     S(2, -10),    S(4, -18),     S(-44, 5),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(2, -1),    S(-58, 0),   S(-80, -3),  S(-55, -4), S(-36, 9),
      S(-39, -14), S(-30, -10), S(-40, -29), S(-17, -2), S(8, -26),
      S(-15, 7),   S(-31, 18),  S(-4, 2),    S(32, -8),  S(27, -19),
      S(-14, -13), S(-6, 28),   S(14, -2),   S(12, 8),   S(27, 10),
      S(47, -7),   S(74, 1),    S(55, -9),   S(43, 8),   S(-23, 8),
      S(15, 11),   S(28, 0),    S(59, 3),    S(43, 9),   S(29, 7),
      S(9, 4),     S(-18, 17),  S(-12, 6),   S(-8, 25),  S(10, 16),
      S(33, 16),   S(22, 13),   S(0, 22),    S(-9, 24),  S(15, -2),
      S(-2, 4),    S(21, 16),   S(14, 5),    S(17, 9),   S(22, 18),
      S(26, 1),    S(24, -8),   S(12, -14),  S(14, 0),   S(12, -5),
      S(27, -13),  S(-7, 6),    S(8, 6),     S(40, -10), S(29, -3),
      S(29, 4),    S(-15, -16), S(46, 2),    S(8, 21),   S(11, 15),
      S(-12, -8),  S(1, 14),    S(31, -11),  S(-1, -17),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(41, 11),  S(30, 23),  S(26, 39),  S(32, 39),  S(71, 31),  S(50, 20),
      S(58, 17),  S(86, 13),  S(2, 22),   S(-9, 39),  S(24, 50),  S(62, 30),
      S(39, 16),  S(87, 12),  S(58, -4),  S(83, 3),   S(9, 10),   S(31, 33),
      S(32, 24),  S(51, 16),  S(51, 20),  S(92, -8),  S(124, 6),  S(84, -11),
      S(-31, 25), S(12, 12),  S(0, 31),   S(3, 30),   S(17, 0),   S(27, 1),
      S(53, -7),  S(42, -13), S(-29, 6),  S(-42, 20), S(-37, 38), S(-32, 15),
      S(-14, 14), S(-29, 17), S(14, -8),  S(5, -4),   S(-48, 5),  S(-43, 20),
      S(-27, 2),  S(-32, 7),  S(-22, 13), S(-18, 3),  S(41, -27), S(9, -4),
      S(-34, -2), S(-39, -6), S(-10, 14), S(-5, -5),  S(0, -15),  S(18, -20),
      S(34, -33), S(-47, 10), S(-22, 0),  S(-16, 6),  S(-3, 3),   S(8, -6),
      S(9, -17),  S(1, -12),  S(0, 1),    S(-29, -7),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-34, 20), S(-21, 2),   S(12, 52),  S(13, 76),  S(22, 63),   S(33, 52),
      S(89, 18),  S(63, 13),   S(-1, 6),   S(-45, 23), S(-8, 79),   S(-23, 72),
      S(-8, 113), S(23, 55),   S(34, 52),  S(90, 19),  S(3, 26),    S(-42, 46),
      S(-9, 38),  S(-6, 71),   S(36, 79),  S(84, 69),  S(67, 32),   S(62, 51),
      S(-29, 29), S(-32, 51),  S(-21, 30), S(-18, 61), S(-11, 94),  S(8, 81),
      S(26, 85),  S(13, 61),   S(-12, 9),  S(-39, 55), S(-41, 52),  S(-17, 59),
      S(-17, 65), S(-26, 77),  S(2, 36),   S(8, 53),   S(-13, -13), S(-12, 32),
      S(-16, 33), S(-21, 30),  S(-17, 59), S(5, 16),   S(8, 34),    S(20, 45),
      S(-1, -11), S(-20, -21), S(3, -25),  S(8, -13),  S(3, -5),    S(19, -34),
      S(20, -37), S(42, -57),  S(-1, -28), S(-13, -3), S(24, -50),  S(23, -28),
      S(10, -2),  S(-5, -20),  S(13, -38), S(-24, 9),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-87, -122), S(-9, -50),  S(23, -19),   S(-43, -26), S(-80, -38),
      S(-27, 16),   S(2, -8),    S(-11, -103), S(-36, -20), S(3, 25),
      S(-50, 4),    S(11, 37),   S(15, 42),    S(16, 33),   S(10, 22),
      S(25, 1),     S(-87, -14), S(22, 21),    S(-27, 54),  S(-8, 64),
      S(-10, 52),   S(24, 60),   S(64, 37),    S(-22, -2),  S(-24, -20),
      S(-48, 14),   S(-79, 52),  S(-137, 75),  S(-113, 77), S(-65, 68),
      S(-64, 46),   S(-94, 21),  S(-104, -38), S(-62, 3),   S(-132, 54),
      S(-120, 66),  S(-177, 79), S(-127, 54),  S(-109, 27), S(-149, 5),
      S(-60, -26),  S(-26, -1),  S(-107, 30),  S(-152, 50), S(-142, 50),
      S(-137, 34),  S(-71, 14),  S(-78, -13),  S(52, -42),  S(-8, -18),
      S(-44, -2),   S(-86, 15),  S(-70, 13),   S(-52, 12),  S(11, -15),
      S(26, -39),   S(52, -108), S(79, -86),   S(60, -62),  S(-75, -28),
      S(8, -50),    S(-42, -35), S(60, -74),   S(53, -118),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),   S(-8, 10),  S(-1, 14),   S(-4, 40),
      S(10, 81), S(27, 137), S(101, 199), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(-10, -10), S(-7, -28),  S(-16, -19), S(-10, -33),
      S(18, -65),  S(-44, -67), S(-10, -10), S(-10, -10),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(-6, -6),  S(-24, -7), S(-26, -14), S(-16, -7),
      S(-1, -26), S(20, -43), S(-22, -9),  S(-6, -6),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(-15, -15), S(-21, -6),  S(-4, -6),   S(-6, -5),
      S(-17, -5),  S(-15, -15), S(-15, -15), S(-15, -15),
};
constexpr Score KnightMobilityScore[9] = {
      S(-51, -37), S(-31, 3), S(-14, 15), S(-6, 36), S(4, 46),
      S(14, 47),   S(29, 48), S(39, 42),  S(41, 26),
};
constexpr Score BishopMobilityScore[14] = {
      S(-22, -29), S(6, -3),  S(13, 21), S(28, 52),  S(38, 66),
      S(47, 74),   S(56, 80), S(63, 87), S(66, 86),  S(71, 87),
      S(90, 84),   S(71, 97), S(98, 73), S(115, 88),
};
constexpr Score RookMobilityScore[15] = {
      S(-17, 42), S(-9, 63),  S(-1, 81),  S(7, 97),   S(5, 115),
      S(13, 123), S(22, 128), S(33, 132), S(40, 140), S(49, 154),
      S(64, 149), S(65, 162), S(71, 159), S(61, 165), S(82, 170),
};
constexpr Score QueenMobilityScore[28] = {
      S(-71, -91), S(-36, -50), S(5, -23),   S(-3, 24),   S(17, 87),
      S(37, 54),   S(32, 124),  S(46, 113),  S(49, 120),  S(57, 151),
      S(67, 137),  S(67, 161),  S(71, 170),  S(65, 176),  S(74, 183),
      S(66, 202),  S(61, 213),  S(63, 213),  S(83, 200),  S(90, 199),
      S(107, 197), S(150, 186), S(134, 180), S(165, 192), S(117, 175),
      S(103, 178), S(138, 218), S(102, 204),
};

struct EvalWeights {
    const Score pawnScore = S(82, 128);
    const Score knightScore = S(368, 428);
    const Score bishopScore = S(388, 422);
    const Score rookScore = S(521, 685);
    const Score queenScore = S(1133, 1346);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),      S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),   S(0, 0),    S(27, 123), S(-10, 105),
          S(-36, 120),  S(22, 51), S(-14, 42), S(-19, 40), S(-133, 120),
          S(-105, 121), S(6, 114), S(-9, 121), S(25, 66),  S(20, 3),
          S(49, -1),    S(98, 35), S(74, 65),  S(14, 91),  S(-15, 49),
          S(-13, 34),   S(3, 22),  S(6, -7),   S(37, 5),   S(34, 0),
          S(23, 23),    S(13, 25), S(-20, 25), S(-16, 25), S(2, 10),
          S(14, -6),    S(13, 1),  S(17, 4),   S(0, 12),   S(-4, 5),
          S(-12, 20),   S(-7, 19), S(6, 12),   S(11, 1),   S(30, 10),
          S(25, 9),     S(33, 5),  S(15, 1),   S(-6, 24),  S(-7, 24),
          S(7, 12),     S(0, 26),  S(13, 31),  S(48, 12),  S(40, 3),
          S(10, 4),     S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),   S(0, 0),    S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-154, -33), S(-125, -42), S(-48, -13),   S(-3, 2),    S(63, -27),
          S(-91, -29),  S(-24, -22),  S(-106, -110), S(-41, 9),   S(12, -14),
          S(33, -18),   S(62, -21),   S(72, -16),    S(110, -34), S(34, -4),
          S(63, -21),   S(-21, -2),   S(54, -25),    S(48, 26),   S(90, 24),
          S(104, 16),   S(134, 4),    S(88, -34),    S(34, -40),  S(0, 19),
          S(14, 27),    S(34, 49),    S(73, 43),     S(55, 41),   S(75, 41),
          S(42, 24),    S(77, -5),    S(-5, 9),      S(-1, 21),   S(22, 42),
          S(39, 37),    S(43, 45),    S(45, 33),     S(64, 7),    S(13, 16),
          S(-14, -19),  S(-6, 2),     S(11, 17),     S(9, 32),    S(40, 22),
          S(25, 0),     S(27, -4),    S(15, -17),    S(-51, 11),  S(-36, 21),
          S(-8, -17),   S(12, 5),     S(19, 8),      S(22, -2),   S(0, -35),
          S(2, -21),    S(-88, -33),  S(-18, -17),   S(-47, 8),   S(3, 2),
          S(10, 4),     S(2, -10),    S(4, -18),     S(-44, 5),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(2, -1),    S(-58, 0),   S(-80, -3),  S(-55, -4), S(-36, 9),
          S(-39, -14), S(-30, -10), S(-40, -29), S(-17, -2), S(8, -26),
          S(-15, 7),   S(-31, 18),  S(-4, 2),    S(32, -8),  S(27, -19),
          S(-14, -13), S(-6, 28),   S(14, -2),   S(12, 8),   S(27, 10),
          S(47, -7),   S(74, 1),    S(55, -9),   S(43, 8),   S(-23, 8),
          S(15, 11),   S(28, 0),    S(59, 3),    S(43, 9),   S(29, 7),
          S(9, 4),     S(-18, 17),  S(-12, 6),   S(-8, 25),  S(10, 16),
          S(33, 16),   S(22, 13),   S(0, 22),    S(-9, 24),  S(15, -2),
          S(-2, 4),    S(21, 16),   S(14, 5),    S(17, 9),   S(22, 18),
          S(26, 1),    S(24, -8),   S(12, -14),  S(14, 0),   S(12, -5),
          S(27, -13),  S(-7, 6),    S(8, 6),     S(40, -10), S(29, -3),
          S(29, 4),    S(-15, -16), S(46, 2),    S(8, 21),   S(11, 15),
          S(-12, -8),  S(1, 14),    S(31, -11),  S(-1, -17),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(41, 11),  S(30, 23),  S(26, 39),  S(32, 39),  S(71, 31),
          S(50, 20),  S(58, 17),  S(86, 13),  S(2, 22),   S(-9, 39),
          S(24, 50),  S(62, 30),  S(39, 16),  S(87, 12),  S(58, -4),
          S(83, 3),   S(9, 10),   S(31, 33),  S(32, 24),  S(51, 16),
          S(51, 20),  S(92, -8),  S(124, 6),  S(84, -11), S(-31, 25),
          S(12, 12),  S(0, 31),   S(3, 30),   S(17, 0),   S(27, 1),
          S(53, -7),  S(42, -13), S(-29, 6),  S(-42, 20), S(-37, 38),
          S(-32, 15), S(-14, 14), S(-29, 17), S(14, -8),  S(5, -4),
          S(-48, 5),  S(-43, 20), S(-27, 2),  S(-32, 7),  S(-22, 13),
          S(-18, 3),  S(41, -27), S(9, -4),   S(-34, -2), S(-39, -6),
          S(-10, 14), S(-5, -5),  S(0, -15),  S(18, -20), S(34, -33),
          S(-47, 10), S(-22, 0),  S(-16, 6),  S(-3, 3),   S(8, -6),
          S(9, -17),  S(1, -12),  S(0, 1),    S(-29, -7),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-34, 20),  S(-21, 2),  S(12, 52),  S(13, 76),  S(22, 63),
          S(33, 52),   S(89, 18),  S(63, 13),  S(-1, 6),   S(-45, 23),
          S(-8, 79),   S(-23, 72), S(-8, 113), S(23, 55),  S(34, 52),
          S(90, 19),   S(3, 26),   S(-42, 46), S(-9, 38),  S(-6, 71),
          S(36, 79),   S(84, 69),  S(67, 32),  S(62, 51),  S(-29, 29),
          S(-32, 51),  S(-21, 30), S(-18, 61), S(-11, 94), S(8, 81),
          S(26, 85),   S(13, 61),  S(-12, 9),  S(-39, 55), S(-41, 52),
          S(-17, 59),  S(-17, 65), S(-26, 77), S(2, 36),   S(8, 53),
          S(-13, -13), S(-12, 32), S(-16, 33), S(-21, 30), S(-17, 59),
          S(5, 16),    S(8, 34),   S(20, 45),  S(-1, -11), S(-20, -21),
          S(3, -25),   S(8, -13),  S(3, -5),   S(19, -34), S(20, -37),
          S(42, -57),  S(-1, -28), S(-13, -3), S(24, -50), S(23, -28),
          S(10, -2),   S(-5, -20), S(13, -38), S(-24, 9),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-87, -122), S(-9, -50),  S(23, -19),   S(-43, -26), S(-80, -38),
          S(-27, 16),   S(2, -8),    S(-11, -103), S(-36, -20), S(3, 25),
          S(-50, 4),    S(11, 37),   S(15, 42),    S(16, 33),   S(10, 22),
          S(25, 1),     S(-87, -14), S(22, 21),    S(-27, 54),  S(-8, 64),
          S(-10, 52),   S(24, 60),   S(64, 37),    S(-22, -2),  S(-24, -20),
          S(-48, 14),   S(-79, 52),  S(-137, 75),  S(-113, 77), S(-65, 68),
          S(-64, 46),   S(-94, 21),  S(-104, -38), S(-62, 3),   S(-132, 54),
          S(-120, 66),  S(-177, 79), S(-127, 54),  S(-109, 27), S(-149, 5),
          S(-60, -26),  S(-26, -1),  S(-107, 30),  S(-152, 50), S(-142, 50),
          S(-137, 34),  S(-71, 14),  S(-78, -13),  S(52, -42),  S(-8, -18),
          S(-44, -2),   S(-86, 15),  S(-70, 13),   S(-52, 12),  S(11, -15),
          S(26, -39),   S(52, -108), S(79, -86),   S(60, -62),  S(-75, -28),
          S(8, -50),    S(-42, -35), S(60, -74),   S(53, -118),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),   S(-8, 10),  S(-1, 14),   S(-4, 40),
          S(10, 81), S(27, 137), S(101, 199), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(-10, -10), S(-7, -28),  S(-16, -19), S(-10, -33),
          S(18, -65),  S(-44, -67), S(-10, -10), S(-10, -10),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(-6, -6),  S(-24, -7), S(-26, -14), S(-16, -7),
          S(-1, -26), S(20, -43), S(-22, -9),  S(-6, -6),
    };
    const Score backwardPawnRankBonus[8] = {
          S(-15, -15), S(-21, -6),  S(-4, -6),   S(-6, -5),
          S(-17, -5),  S(-15, -15), S(-15, -15), S(-15, -15),
    };
    const Score KnightMobilityScore[9] = {
          S(-51, -37), S(-31, 3), S(-14, 15), S(-6, 36), S(4, 46),
          S(14, 47),   S(29, 48), S(39, 42),  S(41, 26),
    };
    const Score BishopMobilityScore[14] = {
          S(-22, -29), S(6, -3),  S(13, 21), S(28, 52),  S(38, 66),
          S(47, 74),   S(56, 80), S(63, 87), S(66, 86),  S(71, 87),
          S(90, 84),   S(71, 97), S(98, 73), S(115, 88),
    };
    const Score RookMobilityScore[15] = {
          S(-17, 42), S(-9, 63),  S(-1, 81),  S(7, 97),   S(5, 115),
          S(13, 123), S(22, 128), S(33, 132), S(40, 140), S(49, 154),
          S(64, 149), S(65, 162), S(71, 159), S(61, 165), S(82, 170),
    };
    const Score QueenMobilityScore[28] = {
          S(-71, -91), S(-36, -50), S(5, -23),   S(-3, 24),   S(17, 87),
          S(37, 54),   S(32, 124),  S(46, 113),  S(49, 120),  S(57, 151),
          S(67, 137),  S(67, 161),  S(71, 170),  S(65, 176),  S(74, 183),
          S(66, 202),  S(61, 213),  S(63, 213),  S(83, 200),  S(90, 199),
          S(107, 197), S(150, 186), S(134, 180), S(165, 192), S(117, 175),
          S(103, 178), S(138, 218), S(102, 204),
    };
};
#endif // WEIGHTS_H_
