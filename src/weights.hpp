#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"

constexpr Score pawnScore = S(92, 164);
constexpr Score knightScore = S(368, 419);
constexpr Score bishopScore = S(382, 451);
constexpr Score rookScore = S(517, 685);
constexpr Score queenScore = S(1125, 1383);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),      S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
      S(0, 0),      S(0, 0),     S(0, 0),     S(-54, 155), S(47, 118),
      S(-36, 137),  S(1, 37),    S(-50, 28),  S(-45, 27),  S(-117, 92),
      S(-172, 131), S(-41, 129), S(-32, 110), S(54, 24),   S(-5, 4),
      S(53, -14),   S(105, 38),  S(68, 63),   S(16, 51),   S(-28, 76),
      S(-46, 53),   S(-14, 36),  S(3, 11),    S(25, -34),  S(39, -14),
      S(-28, 29),   S(-30, 46),  S(-61, 61),  S(-34, 54),  S(-15, 8),
      S(3, -13),    S(-10, -14), S(-11, -4),  S(-4, 7),    S(-22, 33),
      S(-25, 46),   S(-17, 4),   S(0, 5),     S(-4, -11),  S(8, 0),
      S(12, -8),    S(41, -4),   S(1, 8),     S(-37, 39),  S(-21, 29),
      S(-7, -4),    S(13, 24),   S(-3, -15),  S(43, -14),  S(48, -8),
      S(-14, -13),  S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
      S(0, 0),      S(0, 0),     S(0, 0),     S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-208, -115), S(-111, -38), S(-67, -6),   S(-44, -35), S(42, -12),
      S(-128, -3),   S(-75, -35),  S(-77, -106), S(-30, -1),  S(8, 10),
      S(-16, -1),    S(32, -7),    S(41, -46),   S(136, -82), S(45, 25),
      S(64, -50),    S(-9, -13),   S(53, -6),    S(48, 38),   S(67, 61),
      S(119, -7),    S(120, 30),   S(76, 6),     S(72, -22),  S(15, 56),
      S(10, -10),    S(36, 42),    S(54, 39),    S(30, 79),   S(105, 20),
      S(23, -13),    S(94, -13),   S(22, 49),    S(-5, 4),    S(28, 69),
      S(15, 50),     S(24, 40),    S(28, 14),    S(51, 37),   S(13, 46),
      S(-26, 15),    S(-24, -3),   S(-4, 18),    S(8, 12),    S(46, 18),
      S(19, 6),      S(21, 22),    S(23, -36),   S(-48, -31), S(-51, -36),
      S(-51, 3),     S(7, 3),      S(9, 0),      S(-7, 4),    S(15, -55),
      S(6, -30),     S(-71, 14),   S(-49, -27),  S(-25, 1),   S(31, -13),
      S(22, -35),    S(35, -17),   S(-31, -33),  S(-78, -51),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-77, 30),  S(-66, 15),  S(-38, 44),  S(-84, -23), S(-42, -7),
      S(-74, -18), S(11, 10),   S(-67, -64), S(23, -4),   S(20, 2),
      S(-41, 34),  S(-29, -20), S(22, -16),  S(-12, 23),  S(-12, -35),
      S(-36, -37), S(-32, 42),  S(38, 37),   S(14, 27),   S(17, 5),
      S(5, -30),   S(79, 22),   S(63, -27),  S(36, -4),   S(-38, -25),
      S(-28, 41),  S(3, -29),   S(67, 24),   S(46, -18),  S(-9, 40),
      S(9, -2),    S(-12, -8),  S(3, 35),    S(-47, 7),   S(-23, 30),
      S(47, 26),   S(2, 29),    S(7, 11),    S(-21, 42),  S(15, -23),
      S(-17, -5),  S(42, 31),   S(1, 11),    S(-8, 12),   S(27, 43),
      S(-1, 37),   S(27, 22),   S(3, 22),    S(-3, 9),    S(14, -13),
      S(26, -47),  S(-7, 12),   S(-21, 28),  S(52, -29),  S(11, 7),
      S(21, -35),  S(28, -29),  S(25, -22),  S(-8, 29),   S(0, 22),
      S(0, 34),    S(-22, 9),   S(-18, -55), S(41, -43),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(14, 52),   S(40, 52),   S(14, 57),   S(35, 39),   S(109, -3),
      S(56, 37),   S(55, 35),   S(78, 41),   S(-34, 48),  S(-30, 43),
      S(20, 49),   S(21, 30),   S(59, -5),   S(52, 32),   S(21, -17),
      S(79, 7),    S(28, 2),    S(57, 14),   S(11, 55),   S(42, -1),
      S(100, -28), S(71, 4),    S(150, -38), S(83, -28),  S(-31, 28),
      S(-2, -13),  S(13, 29),   S(14, 18),   S(-6, -11),  S(19, -3),
      S(74, -24),  S(23, -36),  S(-39, 24),  S(-45, 16),  S(0, -8),
      S(-64, 37),  S(-31, -17), S(-25, -18), S(-21, -29), S(-17, -36),
      S(-39, 31),  S(-34, 18),  S(-19, 20),  S(5, 2),     S(-50, -22),
      S(10, -2),   S(65, -33),  S(29, -19),  S(-64, 20),  S(-40, -38),
      S(6, -22),   S(-25, 7),   S(-11, 0),   S(0, 10),    S(45, -58),
      S(-54, -50), S(-44, 12),  S(-13, 26),  S(-11, 0),   S(6, 6),
      S(15, 1),    S(9, -6),    S(-23, -41), S(-56, 0),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-3, 8),   S(-56, -44), S(-4, 24),   S(6, 67),    S(70, 34),  S(55, 36),
      S(91, -15), S(60, 30),   S(-9, 6),    S(-105, 66), S(-31, 93), S(-48, 69),
      S(-63, 99), S(7, 88),    S(-31, 46),  S(70, 8),    S(-36, 53), S(-10, 73),
      S(-23, 77), S(-4, 121),  S(-20, 79),  S(53, 40),   S(70, 6),   S(41, 36),
      S(-43, 18), S(-23, 30),  S(11, 22),   S(-45, 48),  S(-42, 99), S(20, 81),
      S(7, 83),   S(15, 41),   S(13, 19),   S(-66, 12),  S(-30, 34), S(-3, 74),
      S(-47, 78), S(-13, 110), S(13, 57),   S(17, 36),   S(23, -1),  S(-15, 22),
      S(-18, 62), S(-13, 18),  S(-39, 82),  S(24, 24),   S(34, 46),  S(-6, -36),
      S(36, -29), S(-12, -38), S(9, 19),    S(7, -48),   S(18, -27), S(63, -31),
      S(26, -69), S(92, -85),  S(-35, -29), S(12, -51),  S(36, -68), S(29, -50),
      S(29, -41), S(3, -50),   S(26, 1),    S(-1, -14),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-136, -175), S(14, -60),  S(35, -59),  S(12, 23),   S(-56, -5),
      S(-69, -42),   S(25, 14),   S(21, -122), S(-81, -64), S(-19, -9),
      S(-33, 44),    S(14, 4),    S(26, 52),   S(2, 68),    S(5, 39),
      S(35, -2),     S(-139, -2), S(69, 30),   S(-26, 52),  S(-18, 49),
      S(-38, 39),    S(34, 30),   S(59, 47),   S(-74, 42),  S(-37, 19),
      S(-86, 36),    S(-120, 66), S(-196, 81), S(-129, 73), S(-107, 69),
      S(-127, 26),   S(-127, 25), S(-151, 1),  S(-86, 0),   S(-152, 77),
      S(-129, 74),   S(-232, 79), S(-149, 55), S(-167, 31), S(-259, 24),
      S(-79, -31),   S(-83, -6),  S(-159, 67), S(-138, 49), S(-177, 35),
      S(-135, 60),   S(-94, 20),  S(-165, 9),  S(57, -53),  S(-54, -2),
      S(-67, 17),    S(-113, 35), S(-91, 3),   S(-65, 24),  S(4, -7),
      S(47, -72),    S(7, -112),  S(61, -93),  S(34, -38),  S(-99, -1),
      S(5, -52),     S(-17, -42), S(85, -91),  S(69, -137),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),    S(12, 20),   S(23, 10),  S(23, 40),
      S(-24, 98), S(-12, 173), S(25, 207), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(-10, -10),  S(6, -64),     S(9, -50),   S(-9, -34),
      S(-26, -118), S(-137, -135), S(-10, -10), S(-10, -10),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(-6, -6), S(-16, 5),  S(-28, -11), S(-16, 4),
      S(9, -26), S(10, -13), S(20, -36),  S(-6, -6),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(-15, -15), S(-23, 3),   S(-7, -6),   S(-1, -23),
      S(-21, 22),  S(-15, -15), S(-15, -15), S(-15, -15),
};
constexpr Score KnightMobilityScore[9] = {
      S(-73, -64), S(-24, 16), S(-17, 40), S(25, 24), S(37, 26),
      S(28, 60),   S(34, 62),  S(47, 65),  S(87, 30),
};
constexpr Score BishopMobilityScore[14] = {
      S(-32, -53), S(24, -22), S(30, 49),   S(39, 45),  S(58, 70),
      S(60, 86),   S(71, 100), S(82, 93),   S(73, 102), S(79, 104),
      S(87, 93),   S(75, 94),  S(102, 114), S(124, 80),
};
constexpr Score RookMobilityScore[15] = {
      S(-44, 10), S(-24, 52), S(-3, 88),  S(-1, 127), S(-1, 126),
      S(10, 111), S(23, 143), S(20, 144), S(35, 147), S(45, 145),
      S(61, 150), S(76, 149), S(64, 171), S(60, 158), S(95, 157),
};
constexpr Score QueenMobilityScore[28] = {
      S(-131, -145), S(-32, -43), S(9, -33),   S(-24, 23),  S(-9, 76),
      S(5, 55),      S(6, 84),    S(13, 115),  S(25, 168),  S(39, 169),
      S(49, 182),    S(42, 195),  S(56, 171),  S(71, 159),  S(68, 173),
      S(77, 202),    S(78, 188),  S(45, 224),  S(57, 210),  S(86, 216),
      S(107, 222),   S(106, 144), S(154, 210), S(156, 185), S(156, 152),
      S(168, 197),   S(155, 210), S(182, 245),
};
struct EvalWeights {
    const Score pawnScore = S(92, 164);
    const Score knightScore = S(368, 419);
    const Score bishopScore = S(382, 451);
    const Score rookScore = S(517, 685);
    const Score queenScore = S(1125, 1383);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),      S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
          S(0, 0),      S(0, 0),     S(0, 0),     S(-54, 155), S(47, 118),
          S(-36, 137),  S(1, 37),    S(-50, 28),  S(-45, 27),  S(-117, 92),
          S(-172, 131), S(-41, 129), S(-32, 110), S(54, 24),   S(-5, 4),
          S(53, -14),   S(105, 38),  S(68, 63),   S(16, 51),   S(-28, 76),
          S(-46, 53),   S(-14, 36),  S(3, 11),    S(25, -34),  S(39, -14),
          S(-28, 29),   S(-30, 46),  S(-61, 61),  S(-34, 54),  S(-15, 8),
          S(3, -13),    S(-10, -14), S(-11, -4),  S(-4, 7),    S(-22, 33),
          S(-25, 46),   S(-17, 4),   S(0, 5),     S(-4, -11),  S(8, 0),
          S(12, -8),    S(41, -4),   S(1, 8),     S(-37, 39),  S(-21, 29),
          S(-7, -4),    S(13, 24),   S(-3, -15),  S(43, -14),  S(48, -8),
          S(-14, -13),  S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
          S(0, 0),      S(0, 0),     S(0, 0),     S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-208, -115), S(-111, -38), S(-67, -6),   S(-44, -35), S(42, -12),
          S(-128, -3),   S(-75, -35),  S(-77, -106), S(-30, -1),  S(8, 10),
          S(-16, -1),    S(32, -7),    S(41, -46),   S(136, -82), S(45, 25),
          S(64, -50),    S(-9, -13),   S(53, -6),    S(48, 38),   S(67, 61),
          S(119, -7),    S(120, 30),   S(76, 6),     S(72, -22),  S(15, 56),
          S(10, -10),    S(36, 42),    S(54, 39),    S(30, 79),   S(105, 20),
          S(23, -13),    S(94, -13),   S(22, 49),    S(-5, 4),    S(28, 69),
          S(15, 50),     S(24, 40),    S(28, 14),    S(51, 37),   S(13, 46),
          S(-26, 15),    S(-24, -3),   S(-4, 18),    S(8, 12),    S(46, 18),
          S(19, 6),      S(21, 22),    S(23, -36),   S(-48, -31), S(-51, -36),
          S(-51, 3),     S(7, 3),      S(9, 0),      S(-7, 4),    S(15, -55),
          S(6, -30),     S(-71, 14),   S(-49, -27),  S(-25, 1),   S(31, -13),
          S(22, -35),    S(35, -17),   S(-31, -33),  S(-78, -51),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-77, 30),  S(-66, 15),  S(-38, 44),  S(-84, -23), S(-42, -7),
          S(-74, -18), S(11, 10),   S(-67, -64), S(23, -4),   S(20, 2),
          S(-41, 34),  S(-29, -20), S(22, -16),  S(-12, 23),  S(-12, -35),
          S(-36, -37), S(-32, 42),  S(38, 37),   S(14, 27),   S(17, 5),
          S(5, -30),   S(79, 22),   S(63, -27),  S(36, -4),   S(-38, -25),
          S(-28, 41),  S(3, -29),   S(67, 24),   S(46, -18),  S(-9, 40),
          S(9, -2),    S(-12, -8),  S(3, 35),    S(-47, 7),   S(-23, 30),
          S(47, 26),   S(2, 29),    S(7, 11),    S(-21, 42),  S(15, -23),
          S(-17, -5),  S(42, 31),   S(1, 11),    S(-8, 12),   S(27, 43),
          S(-1, 37),   S(27, 22),   S(3, 22),    S(-3, 9),    S(14, -13),
          S(26, -47),  S(-7, 12),   S(-21, 28),  S(52, -29),  S(11, 7),
          S(21, -35),  S(28, -29),  S(25, -22),  S(-8, 29),   S(0, 22),
          S(0, 34),    S(-22, 9),   S(-18, -55), S(41, -43),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(14, 52),   S(40, 52),   S(14, 57),   S(35, 39),   S(109, -3),
          S(56, 37),   S(55, 35),   S(78, 41),   S(-34, 48),  S(-30, 43),
          S(20, 49),   S(21, 30),   S(59, -5),   S(52, 32),   S(21, -17),
          S(79, 7),    S(28, 2),    S(57, 14),   S(11, 55),   S(42, -1),
          S(100, -28), S(71, 4),    S(150, -38), S(83, -28),  S(-31, 28),
          S(-2, -13),  S(13, 29),   S(14, 18),   S(-6, -11),  S(19, -3),
          S(74, -24),  S(23, -36),  S(-39, 24),  S(-45, 16),  S(0, -8),
          S(-64, 37),  S(-31, -17), S(-25, -18), S(-21, -29), S(-17, -36),
          S(-39, 31),  S(-34, 18),  S(-19, 20),  S(5, 2),     S(-50, -22),
          S(10, -2),   S(65, -33),  S(29, -19),  S(-64, 20),  S(-40, -38),
          S(6, -22),   S(-25, 7),   S(-11, 0),   S(0, 10),    S(45, -58),
          S(-54, -50), S(-44, 12),  S(-13, 26),  S(-11, 0),   S(6, 6),
          S(15, 1),    S(9, -6),    S(-23, -41), S(-56, 0),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-3, 8),   S(-56, -44), S(-4, 24),   S(6, 67),   S(70, 34),
          S(55, 36),  S(91, -15),  S(60, 30),   S(-9, 6),   S(-105, 66),
          S(-31, 93), S(-48, 69),  S(-63, 99),  S(7, 88),   S(-31, 46),
          S(70, 8),   S(-36, 53),  S(-10, 73),  S(-23, 77), S(-4, 121),
          S(-20, 79), S(53, 40),   S(70, 6),    S(41, 36),  S(-43, 18),
          S(-23, 30), S(11, 22),   S(-45, 48),  S(-42, 99), S(20, 81),
          S(7, 83),   S(15, 41),   S(13, 19),   S(-66, 12), S(-30, 34),
          S(-3, 74),  S(-47, 78),  S(-13, 110), S(13, 57),  S(17, 36),
          S(23, -1),  S(-15, 22),  S(-18, 62),  S(-13, 18), S(-39, 82),
          S(24, 24),  S(34, 46),   S(-6, -36),  S(36, -29), S(-12, -38),
          S(9, 19),   S(7, -48),   S(18, -27),  S(63, -31), S(26, -69),
          S(92, -85), S(-35, -29), S(12, -51),  S(36, -68), S(29, -50),
          S(29, -41), S(3, -50),   S(26, 1),    S(-1, -14),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-136, -175), S(14, -60),  S(35, -59),  S(12, 23),   S(-56, -5),
          S(-69, -42),   S(25, 14),   S(21, -122), S(-81, -64), S(-19, -9),
          S(-33, 44),    S(14, 4),    S(26, 52),   S(2, 68),    S(5, 39),
          S(35, -2),     S(-139, -2), S(69, 30),   S(-26, 52),  S(-18, 49),
          S(-38, 39),    S(34, 30),   S(59, 47),   S(-74, 42),  S(-37, 19),
          S(-86, 36),    S(-120, 66), S(-196, 81), S(-129, 73), S(-107, 69),
          S(-127, 26),   S(-127, 25), S(-151, 1),  S(-86, 0),   S(-152, 77),
          S(-129, 74),   S(-232, 79), S(-149, 55), S(-167, 31), S(-259, 24),
          S(-79, -31),   S(-83, -6),  S(-159, 67), S(-138, 49), S(-177, 35),
          S(-135, 60),   S(-94, 20),  S(-165, 9),  S(57, -53),  S(-54, -2),
          S(-67, 17),    S(-113, 35), S(-91, 3),   S(-65, 24),  S(4, -7),
          S(47, -72),    S(7, -112),  S(61, -93),  S(34, -38),  S(-99, -1),
          S(5, -52),     S(-17, -42), S(85, -91),  S(69, -137),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),    S(12, 20),   S(23, 10),  S(23, 40),
          S(-24, 98), S(-12, 173), S(25, 207), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(-10, -10),  S(6, -64),     S(9, -50),   S(-9, -34),
          S(-26, -118), S(-137, -135), S(-10, -10), S(-10, -10),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(-6, -6), S(-16, 5),  S(-28, -11), S(-16, 4),
          S(9, -26), S(10, -13), S(20, -36),  S(-6, -6),
    };
    const Score backwardPawnRankBonus[8] = {
          S(-15, -15), S(-23, 3),   S(-7, -6),   S(-1, -23),
          S(-21, 22),  S(-15, -15), S(-15, -15), S(-15, -15),
    };
    const Score KnightMobilityScore[9] = {
          S(-73, -64), S(-24, 16), S(-17, 40), S(25, 24), S(37, 26),
          S(28, 60),   S(34, 62),  S(47, 65),  S(87, 30),
    };
    const Score BishopMobilityScore[14] = {
          S(-32, -53), S(24, -22), S(30, 49),   S(39, 45),  S(58, 70),
          S(60, 86),   S(71, 100), S(82, 93),   S(73, 102), S(79, 104),
          S(87, 93),   S(75, 94),  S(102, 114), S(124, 80),
    };
    const Score RookMobilityScore[15] = {
          S(-44, 10), S(-24, 52), S(-3, 88),  S(-1, 127), S(-1, 126),
          S(10, 111), S(23, 143), S(20, 144), S(35, 147), S(45, 145),
          S(61, 150), S(76, 149), S(64, 171), S(60, 158), S(95, 157),
    };
    const Score QueenMobilityScore[28] = {
          S(-131, -145), S(-32, -43), S(9, -33),   S(-24, 23),  S(-9, 76),
          S(5, 55),      S(6, 84),    S(13, 115),  S(25, 168),  S(39, 169),
          S(49, 182),    S(42, 195),  S(56, 171),  S(71, 159),  S(68, 173),
          S(77, 202),    S(78, 188),  S(45, 224),  S(57, 210),  S(86, 216),
          S(107, 222),   S(106, 144), S(154, 210), S(156, 185), S(156, 152),
          S(168, 197),   S(155, 210), S(182, 245),
    };
};

#endif // WEIGHTS_H_
