#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"

constexpr Score pawnScore = S(116, 149);
constexpr Score knightScore = S(402, 436);
constexpr Score bishopScore = S(375, 428);
constexpr Score rookScore = S(514, 722);
constexpr Score queenScore = S(1159, 1369);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),
      S(0, 0),     S(0, 0),     S(0, 0),     S(44, 144), S(33, 120),
      S(6, 132),   S(34, 72),   S(-4, 72),   S(26, 64),  S(-92, 133),
      S(-98, 164), S(-35, 126), S(18, 99),   S(43, 76),  S(44, 26),
      S(10, 14),   S(112, 46),  S(60, 85),   S(-3, 103), S(-35, 52),
      S(-26, 66),  S(25, 44),   S(29, -35),  S(49, 18),  S(32, -22),
      S(25, 47),   S(-15, 22),  S(-55, 65),  S(-2, 26),  S(-5, 25),
      S(16, 17),   S(26, -15),  S(3, 20),    S(18, 4),   S(-32, -6),
      S(-14, 47),  S(-4, 43),   S(-12, -16), S(9, 33),   S(29, -15),
      S(28, -11),  S(14, -18),  S(-23, 26),  S(1, 49),   S(1, 43),
      S(-25, 32),  S(-29, -12), S(-16, -8),  S(60, 35),  S(63, 23),
      S(-5, 22),   S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),
      S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-132, -23), S(-84, -9),   S(-32, 11),  S(-46, -38), S(41, -41),
      S(-101, 8),   S(-14, -11),  S(-64, -73), S(1, -31),   S(24, -26),
      S(71, -47),   S(79, 4),     S(34, 0),    S(63, -44),  S(45, -40),
      S(20, -7),    S(8, -17),    S(61, 6),    S(29, 27),   S(51, 34),
      S(127, -19),  S(146, 7),    S(44, -5),   S(75, -57),  S(28, 25),
      S(-15, -7),   S(12, 59),    S(94, 22),   S(24, 58),   S(42, 18),
      S(56, 34),    S(94, -26),   S(21, -11),  S(32, 34),   S(38, 44),
      S(2, 52),     S(10, 14),    S(8, 56),    S(27, -22),  S(-3, -18),
      S(-2, 18),    S(-40, -24),  S(25, 27),   S(-16, 9),   S(55, 16),
      S(9, 26),     S(27, -41),   S(-24, -31), S(-70, -29), S(-48, 15),
      S(-40, 24),   S(25, 24),    S(3, -27),   S(-20, -31), S(30, -43),
      S(-32, 19),   S(-113, -45), S(-3, -48),  S(-5, -22),  S(-34, 36),
      S(21, 18),    S(16, -37),   S(12, -4),   S(-61, -40),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-26, 31),  S(-69, -23), S(-36, 30),  S(-99, -20), S(-73, -22),
      S(-29, 29),  S(12, 27),   S(-52, 15),  S(15, -36),  S(29, 12),
      S(-42, 23),  S(-41, -23), S(36, 13),   S(44, 3),    S(64, 24),
      S(19, 13),   S(-4, 26),   S(41, 29),   S(2, 20),    S(54, 15),
      S(61, 22),   S(31, -13),  S(44, 4),    S(58, 29),   S(12, -28),
      S(34, 4),    S(49, 22),   S(23, 0),    S(58, 45),   S(61, 35),
      S(-16, 15),  S(-30, 28),  S(-35, -28), S(23, -10),  S(-17, 46),
      S(62, -1),   S(3, 46),    S(23, -6),   S(-29, 21),  S(2, 8),
      S(-5, -15),  S(34, 33),   S(-10, -8),  S(-1, 39),   S(56, -4),
      S(-3, 40),   S(44, 8),    S(51, -31),  S(-10, -22), S(33, -30),
      S(5, 23),    S(16, -15),  S(-3, 32),   S(2, -26),   S(8, 12),
      S(-6, -26),  S(-28, -27), S(59, 40),   S(-10, -12), S(-25, -16),
      S(-27, -21), S(11, 3),    S(-11, -29), S(37, 21),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(51, 43),   S(71, 42),   S(40, 30),   S(47, 44),   S(80, 34),
      S(21, 52),   S(71, 46),   S(42, 42),   S(28, 48),   S(21, 56),
      S(51, 62),   S(90, 30),   S(27, 46),   S(99, 34),   S(67, 35),
      S(32, 35),   S(25, 47),   S(49, 51),   S(46, 44),   S(63, 42),
      S(36, 36),   S(100, 20),  S(135, 22),  S(77, 28),   S(-39, 51),
      S(31, 40),   S(-20, 60),  S(-8, -4),   S(47, 24),   S(54, 27),
      S(14, -13),  S(51, 1),    S(-10, -10), S(-4, 13),   S(4, 0),
      S(-44, -5),  S(5, -8),    S(-1, 27),   S(-16, 32),  S(12, -5),
      S(-47, 15),  S(-54, -3),  S(-42, -5),  S(-45, -8),  S(13, -17),
      S(-22, -22), S(22, -48),  S(20, 7),    S(-68, 10),  S(-7, 26),
      S(-30, -13), S(-36, 4),   S(21, 17),   S(-19, -34), S(10, -41),
      S(-58, -25), S(-44, -9),  S(7, -8),    S(15, 32),   S(30, 16),
      S(-9, 24),   S(-24, -22), S(36, 20),   S(-3, 17),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-14, 63),  S(1, 45),   S(-22, 29),  S(43, 86),   S(60, 74),
      S(69, 65),   S(47, 41),  S(20, 6),    S(-28, 52),  S(-27, 13),
      S(3, 91),    S(0, 112),  S(-45, 134), S(57, 16),   S(-10, 12),
      S(49, 10),   S(13, 52),  S(-54, 60),  S(16, 79),   S(11, 111),
      S(44, 105),  S(96, 79),  S(105, 38),  S(44, 29),   S(-5, 34),
      S(-18, 42),  S(5, 72),   S(4, 95),    S(21, 105),  S(36, 105),
      S(44, 103),  S(-4, 75),  S(-13, 24),  S(-16, 67),  S(-36, 75),
      S(-41, 100), S(-37, 86), S(-7, 99),   S(-25, 42),  S(-12, 88),
      S(11, 27),   S(14, 41),  S(9, 53),    S(8, 57),    S(4, 46),
      S(-17, 6),   S(38, -9),  S(-16, 41),  S(-36, 16),  S(8, 3),
      S(-21, -33), S(33, 12),  S(33, 6),    S(-7, -45),  S(-7, -42),
      S(56, -16),  S(-6, -37), S(-28, -47), S(-13, -54), S(-1, -34),
      S(-17, -40), S(12, 19),  S(-20, -42), S(-31, -27),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-44, -78), S(-19, -55), S(39, -8),    S(-16, 17),  S(-56, 5),
      S(-2, -3),   S(41, 27),   S(-24, -68),  S(-13, -12), S(-51, 35),
      S(-43, 45),  S(-11, 48),  S(24, 51),    S(-15, 23),  S(51, 59),
      S(33, 27),   S(-44, 19),  S(31, 37),    S(-64, 66),  S(-52, 76),
      S(-40, 40),  S(14, 71),   S(21, 48),    S(-43, 20),  S(-21, 8),
      S(-64, 45),  S(-87, 33),  S(-105, 61),  S(-127, 46), S(-105, 54),
      S(-105, 71), S(-77, 17),  S(-65, 2),    S(-76, 27),  S(-86, 37),
      S(-109, 61), S(-187, 75), S(-135, 56),  S(-136, 18), S(-160, -19),
      S(-77, -17), S(-68, 14),  S(-68, 34),   S(-136, 18), S(-106, 42),
      S(-124, 19), S(-94, -13), S(-121, -20), S(12, -24),  S(-35, 9),
      S(-9, 18),   S(-88, -6),  S(-81, -10),  S(-76, -14), S(-13, -28),
      S(42, -38),  S(63, -121), S(93, -102),  S(66, -26),  S(-69, -48),
      S(-15, -66), S(-10, -58), S(70, -90),   S(27, -113),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),    S(18, 26),  S(10, 38),   S(15, 70),
      S(31, 107), S(46, 170), S(117, 214), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(-10, -10), S(-14, -5),  S(7, -46),   S(18, -10),
      S(28, -81),  S(-90, -43), S(-10, -10), S(-10, -10),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(-6, -6),  S(-35, 18), S(-19, 9), S(-36, 6),
      S(-27, -9), S(-17, -6), S(-11, 3), S(-6, -6),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(-15, -15), S(-32, -12), S(-12, 6),   S(-18, -16),
      S(-18, -24), S(-15, -15), S(-15, -15), S(-15, -15),
};
constexpr Score KnightMobilityScore[9] = {
      S(-58, -47), S(10, -9), S(-20, 9), S(26, 7),  S(31, 41),
      S(38, 72),   S(58, 63), S(43, 44), S(23, 15),
};
constexpr Score BishopMobilityScore[14] = {
      S(-37, -43), S(-8, -15), S(-1, 7),   S(58, 21), S(50, 85),
      S(33, 52),   S(51, 90),  S(86, 84),  S(91, 99), S(93, 99),
      S(103, 94),  S(82, 105), S(109, 84), S(84, 75),
};
constexpr Score RookMobilityScore[15] = {
      S(-51, 32), S(1, 97),   S(-29, 71), S(13, 116), S(22, 136),
      S(-7, 122), S(39, 152), S(5, 165),  S(31, 166), S(67, 169),
      S(70, 174), S(90, 184), S(79, 183), S(70, 189), S(55, 164),
};
constexpr Score QueenMobilityScore[28] = {
      S(-71, -93), S(-46, -60), S(-23, -33), S(-10, 14),  S(-1, 45),
      S(3, 92),    S(38, 80),   S(41, 91),   S(25, 90),   S(49, 134),
      S(61, 166),  S(88, 170),  S(89, 180),  S(87, 196),  S(98, 199),
      S(92, 215),  S(96, 177),  S(96, 226),  S(112, 234), S(109, 240),
      S(147, 221), S(160, 228), S(145, 224), S(173, 218), S(153, 217),
      S(143, 208), S(95, 188),  S(145, 247),
};

struct EvalWeights {
    const Score pawnScore = S(116, 149);
    const Score knightScore = S(402, 436);
    const Score bishopScore = S(375, 428);
    const Score rookScore = S(514, 722);
    const Score queenScore = S(1159, 1369);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),
          S(0, 0),     S(0, 0),     S(0, 0),     S(44, 144), S(33, 120),
          S(6, 132),   S(34, 72),   S(-4, 72),   S(26, 64),  S(-92, 133),
          S(-98, 164), S(-35, 126), S(18, 99),   S(43, 76),  S(44, 26),
          S(10, 14),   S(112, 46),  S(60, 85),   S(-3, 103), S(-35, 52),
          S(-26, 66),  S(25, 44),   S(29, -35),  S(49, 18),  S(32, -22),
          S(25, 47),   S(-15, 22),  S(-55, 65),  S(-2, 26),  S(-5, 25),
          S(16, 17),   S(26, -15),  S(3, 20),    S(18, 4),   S(-32, -6),
          S(-14, 47),  S(-4, 43),   S(-12, -16), S(9, 33),   S(29, -15),
          S(28, -11),  S(14, -18),  S(-23, 26),  S(1, 49),   S(1, 43),
          S(-25, 32),  S(-29, -12), S(-16, -8),  S(60, 35),  S(63, 23),
          S(-5, 22),   S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),
          S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-132, -23), S(-84, -9),   S(-32, 11),  S(-46, -38), S(41, -41),
          S(-101, 8),   S(-14, -11),  S(-64, -73), S(1, -31),   S(24, -26),
          S(71, -47),   S(79, 4),     S(34, 0),    S(63, -44),  S(45, -40),
          S(20, -7),    S(8, -17),    S(61, 6),    S(29, 27),   S(51, 34),
          S(127, -19),  S(146, 7),    S(44, -5),   S(75, -57),  S(28, 25),
          S(-15, -7),   S(12, 59),    S(94, 22),   S(24, 58),   S(42, 18),
          S(56, 34),    S(94, -26),   S(21, -11),  S(32, 34),   S(38, 44),
          S(2, 52),     S(10, 14),    S(8, 56),    S(27, -22),  S(-3, -18),
          S(-2, 18),    S(-40, -24),  S(25, 27),   S(-16, 9),   S(55, 16),
          S(9, 26),     S(27, -41),   S(-24, -31), S(-70, -29), S(-48, 15),
          S(-40, 24),   S(25, 24),    S(3, -27),   S(-20, -31), S(30, -43),
          S(-32, 19),   S(-113, -45), S(-3, -48),  S(-5, -22),  S(-34, 36),
          S(21, 18),    S(16, -37),   S(12, -4),   S(-61, -40),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-26, 31),  S(-69, -23), S(-36, 30),  S(-99, -20), S(-73, -22),
          S(-29, 29),  S(12, 27),   S(-52, 15),  S(15, -36),  S(29, 12),
          S(-42, 23),  S(-41, -23), S(36, 13),   S(44, 3),    S(64, 24),
          S(19, 13),   S(-4, 26),   S(41, 29),   S(2, 20),    S(54, 15),
          S(61, 22),   S(31, -13),  S(44, 4),    S(58, 29),   S(12, -28),
          S(34, 4),    S(49, 22),   S(23, 0),    S(58, 45),   S(61, 35),
          S(-16, 15),  S(-30, 28),  S(-35, -28), S(23, -10),  S(-17, 46),
          S(62, -1),   S(3, 46),    S(23, -6),   S(-29, 21),  S(2, 8),
          S(-5, -15),  S(34, 33),   S(-10, -8),  S(-1, 39),   S(56, -4),
          S(-3, 40),   S(44, 8),    S(51, -31),  S(-10, -22), S(33, -30),
          S(5, 23),    S(16, -15),  S(-3, 32),   S(2, -26),   S(8, 12),
          S(-6, -26),  S(-28, -27), S(59, 40),   S(-10, -12), S(-25, -16),
          S(-27, -21), S(11, 3),    S(-11, -29), S(37, 21),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(51, 43),   S(71, 42),   S(40, 30),   S(47, 44),   S(80, 34),
          S(21, 52),   S(71, 46),   S(42, 42),   S(28, 48),   S(21, 56),
          S(51, 62),   S(90, 30),   S(27, 46),   S(99, 34),   S(67, 35),
          S(32, 35),   S(25, 47),   S(49, 51),   S(46, 44),   S(63, 42),
          S(36, 36),   S(100, 20),  S(135, 22),  S(77, 28),   S(-39, 51),
          S(31, 40),   S(-20, 60),  S(-8, -4),   S(47, 24),   S(54, 27),
          S(14, -13),  S(51, 1),    S(-10, -10), S(-4, 13),   S(4, 0),
          S(-44, -5),  S(5, -8),    S(-1, 27),   S(-16, 32),  S(12, -5),
          S(-47, 15),  S(-54, -3),  S(-42, -5),  S(-45, -8),  S(13, -17),
          S(-22, -22), S(22, -48),  S(20, 7),    S(-68, 10),  S(-7, 26),
          S(-30, -13), S(-36, 4),   S(21, 17),   S(-19, -34), S(10, -41),
          S(-58, -25), S(-44, -9),  S(7, -8),    S(15, 32),   S(30, 16),
          S(-9, 24),   S(-24, -22), S(36, 20),   S(-3, 17),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-14, 63),  S(1, 45),   S(-22, 29),  S(43, 86),   S(60, 74),
          S(69, 65),   S(47, 41),  S(20, 6),    S(-28, 52),  S(-27, 13),
          S(3, 91),    S(0, 112),  S(-45, 134), S(57, 16),   S(-10, 12),
          S(49, 10),   S(13, 52),  S(-54, 60),  S(16, 79),   S(11, 111),
          S(44, 105),  S(96, 79),  S(105, 38),  S(44, 29),   S(-5, 34),
          S(-18, 42),  S(5, 72),   S(4, 95),    S(21, 105),  S(36, 105),
          S(44, 103),  S(-4, 75),  S(-13, 24),  S(-16, 67),  S(-36, 75),
          S(-41, 100), S(-37, 86), S(-7, 99),   S(-25, 42),  S(-12, 88),
          S(11, 27),   S(14, 41),  S(9, 53),    S(8, 57),    S(4, 46),
          S(-17, 6),   S(38, -9),  S(-16, 41),  S(-36, 16),  S(8, 3),
          S(-21, -33), S(33, 12),  S(33, 6),    S(-7, -45),  S(-7, -42),
          S(56, -16),  S(-6, -37), S(-28, -47), S(-13, -54), S(-1, -34),
          S(-17, -40), S(12, 19),  S(-20, -42), S(-31, -27),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-44, -78), S(-19, -55), S(39, -8),    S(-16, 17),  S(-56, 5),
          S(-2, -3),   S(41, 27),   S(-24, -68),  S(-13, -12), S(-51, 35),
          S(-43, 45),  S(-11, 48),  S(24, 51),    S(-15, 23),  S(51, 59),
          S(33, 27),   S(-44, 19),  S(31, 37),    S(-64, 66),  S(-52, 76),
          S(-40, 40),  S(14, 71),   S(21, 48),    S(-43, 20),  S(-21, 8),
          S(-64, 45),  S(-87, 33),  S(-105, 61),  S(-127, 46), S(-105, 54),
          S(-105, 71), S(-77, 17),  S(-65, 2),    S(-76, 27),  S(-86, 37),
          S(-109, 61), S(-187, 75), S(-135, 56),  S(-136, 18), S(-160, -19),
          S(-77, -17), S(-68, 14),  S(-68, 34),   S(-136, 18), S(-106, 42),
          S(-124, 19), S(-94, -13), S(-121, -20), S(12, -24),  S(-35, 9),
          S(-9, 18),   S(-88, -6),  S(-81, -10),  S(-76, -14), S(-13, -28),
          S(42, -38),  S(63, -121), S(93, -102),  S(66, -26),  S(-69, -48),
          S(-15, -66), S(-10, -58), S(70, -90),   S(27, -113),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),    S(18, 26),  S(10, 38),   S(15, 70),
          S(31, 107), S(46, 170), S(117, 214), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(-10, -10), S(-14, -5),  S(7, -46),   S(18, -10),
          S(28, -81),  S(-90, -43), S(-10, -10), S(-10, -10),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(-6, -6),  S(-35, 18), S(-19, 9), S(-36, 6),
          S(-27, -9), S(-17, -6), S(-11, 3), S(-6, -6),
    };
    const Score backwardPawnRankBonus[8] = {
          S(-15, -15), S(-32, -12), S(-12, 6),   S(-18, -16),
          S(-18, -24), S(-15, -15), S(-15, -15), S(-15, -15),
    };
    const Score KnightMobilityScore[9] = {
          S(-58, -47), S(10, -9), S(-20, 9), S(26, 7),  S(31, 41),
          S(38, 72),   S(58, 63), S(43, 44), S(23, 15),
    };
    const Score BishopMobilityScore[14] = {
          S(-37, -43), S(-8, -15), S(-1, 7),   S(58, 21), S(50, 85),
          S(33, 52),   S(51, 90),  S(86, 84),  S(91, 99), S(93, 99),
          S(103, 94),  S(82, 105), S(109, 84), S(84, 75),
    };
    const Score RookMobilityScore[15] = {
          S(-51, 32), S(1, 97),   S(-29, 71), S(13, 116), S(22, 136),
          S(-7, 122), S(39, 152), S(5, 165),  S(31, 166), S(67, 169),
          S(70, 174), S(90, 184), S(79, 183), S(70, 189), S(55, 164),
    };
    const Score QueenMobilityScore[28] = {
          S(-71, -93), S(-46, -60), S(-23, -33), S(-10, 14),  S(-1, 45),
          S(3, 92),    S(38, 80),   S(41, 91),   S(25, 90),   S(49, 134),
          S(61, 166),  S(88, 170),  S(89, 180),  S(87, 196),  S(98, 199),
          S(92, 215),  S(96, 177),  S(96, 226),  S(112, 234), S(109, 240),
          S(147, 221), S(160, 228), S(145, 224), S(173, 218), S(153, 217),
          S(143, 208), S(95, 188),  S(145, 247),
    };
};
#endif // WEIGHTS_H_
