#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"
constexpr Score pawnScore = S(114, 147);
constexpr Score knightScore = S(396, 437);
constexpr Score bishopScore = S(383, 442);
constexpr Score rookScore = S(556, 719);
constexpr Score queenScore = S(1156, 1366);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),      S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),     S(0, 0),    S(40, 141), S(29, 118),
      S(2, 129),    S(31, 69),   S(-7, 69),  S(23, 61),  S(-91, 129),
      S(-126, 161), S(-29, 123), S(14, 124), S(37, 73),  S(41, 23),
      S(14, 16),    S(108, 43),  S(33, 87),  S(0, 101),  S(-39, 48),
      S(4, 60),     S(21, 41),   S(27, -14), S(12, 18),  S(23, 22),
      S(-11, 45),   S(-13, 45),  S(-57, 58), S(-8, 28),  S(7, 18),
      S(20, 14),    S(22, -9),   S(-1, 4),   S(-14, -4), S(-31, 8),
      S(-24, 45),   S(-33, 41),  S(10, -13), S(18, 31),  S(34, -11),
      S(28, -5),    S(7, -12),   S(1, 23),   S(-1, 48),  S(2, 45),
      S(-22, 32),   S(-26, -9),  S(-13, -6), S(58, 31),  S(61, 20),
      S(21, 18),    S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),     S(0, 0),    S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-135, -25), S(-87, -13),  S(-22, 5),   S(2, -34),   S(40, -17),
      S(-99, -37),  S(-16, -14),  S(-68, -76), S(-3, 15),   S(22, -21),
      S(70, -44),   S(76, 10),    S(40, -9),   S(115, -44), S(41, 8),
      S(23, -10),   S(5, -11),    S(59, -6),   S(57, 22),   S(57, -6),
      S(124, 4),    S(142, 8),    S(91, -15),  S(72, -53),  S(24, 28),
      S(-13, 0),    S(12, 36),    S(89, 43),   S(35, 54),   S(51, 40),
      S(7, 33),     S(65, -23),   S(19, -7),   S(27, 30),   S(37, 14),
      S(40, 46),    S(11, 31),    S(13, 50),   S(29, -19),  S(42, -15),
      S(-5, -34),   S(-42, -22),  S(6, 23),    S(-12, 9),   S(52, 5),
      S(10, 20),    S(25, -39),   S(-24, -31), S(-62, -25), S(-45, 20),
      S(-37, -9),   S(14, 20),    S(-12, -20), S(-15, -27), S(25, -36),
      S(-29, -28),  S(-106, -36), S(-1, -45),  S(-52, -20), S(-17, 34),
      S(-26, 16),   S(13, -31),   S(14, -24),  S(-56, -34),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(11, 26),   S(-66, 20),  S(-87, 31), S(-97, -18), S(-18, -24),
      S(-33, 25),  S(10, 23),   S(-1, 11),  S(8, -35),   S(-19, 12),
      S(-40, 18),  S(-37, -18), S(4, 10),   S(-12, 8),   S(60, 20),
      S(-10, 8),   S(10, -3),   S(-3, 26),  S(5, 20),    S(58, -9),
      S(55, 17),   S(34, 4),    S(79, 17),  S(42, 26),   S(-2, -27),
      S(30, 8),    S(39, -8),   S(47, 8),   S(57, 41),   S(59, 33),
      S(-9, 7),    S(-13, 25),  S(-31, 8),  S(-14, -7),  S(-17, 43),
      S(58, 29),   S(9, 43),    S(27, 7),   S(-23, 27),  S(6, -28),
      S(-8, -12),  S(33, 26),   S(-5, -3),  S(20, 27),   S(48, -1),
      S(6, 38),    S(44, 21),   S(47, -29), S(-7, -19),  S(34, -26),
      S(11, -18),  S(16, -13),  S(12, 29),  S(7, -23),   S(14, 13),
      S(-1, -22),  S(-27, -25), S(55, 28),  S(21, -11),  S(-23, -11),
      S(-24, -18), S(-15, -4),  S(-8, -25), S(34, 17),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(48, 43),   S(69, 39),   S(34, 34),  S(42, 49),   S(77, 31),
      S(8, 49),    S(68, 44),   S(43, 38),  S(24, 45),   S(25, 54),
      S(49, 59),   S(86, 28),   S(20, 41),  S(96, 31),   S(63, 32),
      S(41, 28),   S(22, 44),   S(45, 48),  S(38, 41),   S(60, 40),
      S(37, 32),   S(99, 17),   S(133, 18), S(83, 24),   S(-38, 48),
      S(24, 33),   S(-20, 54),  S(-4, -3),  S(44, 19),   S(50, 24),
      S(15, 26),   S(5, 20),    S(-15, -5), S(-7, 10),   S(-51, 6),
      S(-41, -1),  S(11, -6),   S(-5, 32),  S(-11, 29),  S(-29, 36),
      S(-59, 12),  S(-27, -3),  S(-40, -7), S(-34, -2),  S(13, -14),
      S(-22, -1),  S(56, -44),  S(18, -33), S(-18, 12),  S(-9, 26),
      S(-31, -10), S(-31, -10), S(19, 7),   S(-17, -32), S(16, -38),
      S(-55, -22), S(-42, -5),  S(-1, -10), S(16, 28),   S(28, 5),
      S(-4, 20),   S(4, -5),    S(22, 18),  S(-35, 18),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-19, 59),  S(0, 41),    S(-20, 35),  S(41, 83),   S(58, 43),
      S(65, 62),   S(64, 34),   S(23, 10),   S(-19, 48),  S(-30, 13),
      S(-2, 88),   S(-2, 109),  S(-40, 131), S(57, 18),   S(-14, 58),
      S(52, 13),   S(10, 49),   S(-52, 56),  S(13, 76),   S(9, 108),
      S(41, 101),  S(94, 77),   S(105, 38),  S(48, 32),   S(-4, 52),
      S(-4, 54),   S(2, 69),    S(1, 92),    S(19, 102),  S(33, 101),
      S(28, 101),  S(0, 46),    S(2, 26),    S(-19, 57),  S(-10, 67),
      S(-41, 97),  S(-39, 97),  S(-34, 99),  S(-24, 34),  S(-7, 88),
      S(8, 25),    S(11, 39),   S(11, 6),    S(6, 38),    S(-3, 37),
      S(-13, 7),   S(-4, -3),   S(-12, 56),  S(-32, 40),  S(7, 11),
      S(17, -33),  S(39, -33),  S(32, -18),  S(-3, -40),  S(-5, -40),
      S(54, -14),  S(-29, -33), S(-23, -43), S(-7, -50),  S(6, -32),
      S(-13, -37), S(-28, -28), S(-14, -8),  S(-29, -25),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-95, -128), S(26, -52),  S(35, -13),   S(-5, 13),   S(-43, 2),
      S(-2, -24),   S(42, -14),  S(-21, -68),  S(5, -42),   S(8, 32),
      S(-48, 41),   S(5, 43),    S(21, 46),    S(-23, 19),  S(11, 54),
      S(28, 21),    S(-48, 15),  S(28, 34),    S(-56, 63),  S(-46, 70),
      S(-41, 45),   S(9, 59),    S(23, 63),    S(4, 20),    S(-70, 5),
      S(-59, 47),   S(-82, 46),  S(-109, 76),  S(-125, 62), S(-104, 82),
      S(-84, 68),   S(-57, 10),  S(-65, -1),   S(-71, 25),  S(-88, 32),
      S(-110, 45),  S(-184, 82), S(-131, 53),  S(-131, 16), S(-155, -13),
      S(-74, -56),  S(-18, 8),   S(-71, 18),   S(-153, 22), S(-129, 42),
      S(-138, 20),  S(-90, -12), S(-115, -14), S(15, -29),  S(-32, 6),
      S(-6, -12),   S(-90, -12), S(-90, -7),   S(-72, -1),  S(-13, 2),
      S(46, -49),   S(15, -116), S(80, -100),  S(21, -28),  S(-85, -47),
      S(-12, -64),  S(-8, -55),  S(68, -56),   S(32, -95),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),    S(15, 23),  S(14, 35),   S(14, 67),
      S(27, 104), S(42, 167), S(114, 211), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(-10, -10), S(-22, -7),  S(-30, -42), S(-8, -13),
      S(26, -75),  S(-56, -33), S(-10, -10), S(-10, -10),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(-6, -6),   S(-35, 15), S(-41, 7), S(-37, 3),
      S(-21, -11), S(-1, -9),  S(-15, 0), S(-6, -6),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(-15, -15), S(-36, -12), S(-26, -1),  S(-7, -19),
      S(-9, -24),  S(-15, -15), S(-15, -15), S(-15, -15),
};
constexpr Score KnightMobilityScore[9] = {
      S(-59, -43), S(-2, -3), S(-27, 8), S(-11, 12), S(14, 39),
      S(39, 69),   S(53, 55), S(64, 51), S(51, 48),
};
constexpr Score BishopMobilityScore[14] = {
      S(-28, -39), S(30, -15), S(4, 10),   S(60, 24),  S(68, 77),
      S(40, 69),   S(74, 85),  S(83, 92),  S(87, 95),  S(92, 96),
      S(102, 91),  S(81, 101), S(105, 80), S(121, 80),
};
constexpr Score RookMobilityScore[15] = {
      S(-46, 35), S(-2, 99),  S(-8, 74),  S(10, 129), S(5, 136),
      S(-1, 137), S(17, 149), S(6, 161),  S(23, 164), S(45, 166),
      S(71, 172), S(79, 181), S(76, 180), S(68, 185), S(53, 158),
};
constexpr Score QueenMobilityScore[28] = {
      S(-96, -118), S(-43, -57), S(-19, -30), S(-11, 19),  S(20, 104),
      S(7, 56),     S(39, 83),   S(36, 98),   S(34, 96),   S(53, 123),
      S(66, 121),   S(84, 166),  S(86, 170),  S(76, 190),  S(95, 195),
      S(74, 213),   S(91, 197),  S(94, 223),  S(107, 230), S(104, 237),
      S(143, 218),  S(148, 225), S(141, 221), S(170, 222), S(150, 214),
      S(141, 205),  S(99, 186),  S(141, 244),
};

struct EvalWeights {
    const Score pawnScore = S(114, 147);
    const Score knightScore = S(396, 437);
    const Score bishopScore = S(383, 442);
    const Score rookScore = S(556, 719);
    const Score queenScore = S(1156, 1366);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),      S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),     S(0, 0),    S(40, 141), S(29, 118),
          S(2, 129),    S(31, 69),   S(-7, 69),  S(23, 61),  S(-91, 129),
          S(-126, 161), S(-29, 123), S(14, 124), S(37, 73),  S(41, 23),
          S(14, 16),    S(108, 43),  S(33, 87),  S(0, 101),  S(-39, 48),
          S(4, 60),     S(21, 41),   S(27, -14), S(12, 18),  S(23, 22),
          S(-11, 45),   S(-13, 45),  S(-57, 58), S(-8, 28),  S(7, 18),
          S(20, 14),    S(22, -9),   S(-1, 4),   S(-14, -4), S(-31, 8),
          S(-24, 45),   S(-33, 41),  S(10, -13), S(18, 31),  S(34, -11),
          S(28, -5),    S(7, -12),   S(1, 23),   S(-1, 48),  S(2, 45),
          S(-22, 32),   S(-26, -9),  S(-13, -6), S(58, 31),  S(61, 20),
          S(21, 18),    S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),     S(0, 0),    S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-135, -25), S(-87, -13),  S(-22, 5),   S(2, -34),   S(40, -17),
          S(-99, -37),  S(-16, -14),  S(-68, -76), S(-3, 15),   S(22, -21),
          S(70, -44),   S(76, 10),    S(40, -9),   S(115, -44), S(41, 8),
          S(23, -10),   S(5, -11),    S(59, -6),   S(57, 22),   S(57, -6),
          S(124, 4),    S(142, 8),    S(91, -15),  S(72, -53),  S(24, 28),
          S(-13, 0),    S(12, 36),    S(89, 43),   S(35, 54),   S(51, 40),
          S(7, 33),     S(65, -23),   S(19, -7),   S(27, 30),   S(37, 14),
          S(40, 46),    S(11, 31),    S(13, 50),   S(29, -19),  S(42, -15),
          S(-5, -34),   S(-42, -22),  S(6, 23),    S(-12, 9),   S(52, 5),
          S(10, 20),    S(25, -39),   S(-24, -31), S(-62, -25), S(-45, 20),
          S(-37, -9),   S(14, 20),    S(-12, -20), S(-15, -27), S(25, -36),
          S(-29, -28),  S(-106, -36), S(-1, -45),  S(-52, -20), S(-17, 34),
          S(-26, 16),   S(13, -31),   S(14, -24),  S(-56, -34),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(11, 26),   S(-66, 20),  S(-87, 31), S(-97, -18), S(-18, -24),
          S(-33, 25),  S(10, 23),   S(-1, 11),  S(8, -35),   S(-19, 12),
          S(-40, 18),  S(-37, -18), S(4, 10),   S(-12, 8),   S(60, 20),
          S(-10, 8),   S(10, -3),   S(-3, 26),  S(5, 20),    S(58, -9),
          S(55, 17),   S(34, 4),    S(79, 17),  S(42, 26),   S(-2, -27),
          S(30, 8),    S(39, -8),   S(47, 8),   S(57, 41),   S(59, 33),
          S(-9, 7),    S(-13, 25),  S(-31, 8),  S(-14, -7),  S(-17, 43),
          S(58, 29),   S(9, 43),    S(27, 7),   S(-23, 27),  S(6, -28),
          S(-8, -12),  S(33, 26),   S(-5, -3),  S(20, 27),   S(48, -1),
          S(6, 38),    S(44, 21),   S(47, -29), S(-7, -19),  S(34, -26),
          S(11, -18),  S(16, -13),  S(12, 29),  S(7, -23),   S(14, 13),
          S(-1, -22),  S(-27, -25), S(55, 28),  S(21, -11),  S(-23, -11),
          S(-24, -18), S(-15, -4),  S(-8, -25), S(34, 17),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(48, 43),   S(69, 39),   S(34, 34),  S(42, 49),   S(77, 31),
          S(8, 49),    S(68, 44),   S(43, 38),  S(24, 45),   S(25, 54),
          S(49, 59),   S(86, 28),   S(20, 41),  S(96, 31),   S(63, 32),
          S(41, 28),   S(22, 44),   S(45, 48),  S(38, 41),   S(60, 40),
          S(37, 32),   S(99, 17),   S(133, 18), S(83, 24),   S(-38, 48),
          S(24, 33),   S(-20, 54),  S(-4, -3),  S(44, 19),   S(50, 24),
          S(15, 26),   S(5, 20),    S(-15, -5), S(-7, 10),   S(-51, 6),
          S(-41, -1),  S(11, -6),   S(-5, 32),  S(-11, 29),  S(-29, 36),
          S(-59, 12),  S(-27, -3),  S(-40, -7), S(-34, -2),  S(13, -14),
          S(-22, -1),  S(56, -44),  S(18, -33), S(-18, 12),  S(-9, 26),
          S(-31, -10), S(-31, -10), S(19, 7),   S(-17, -32), S(16, -38),
          S(-55, -22), S(-42, -5),  S(-1, -10), S(16, 28),   S(28, 5),
          S(-4, 20),   S(4, -5),    S(22, 18),  S(-35, 18),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-19, 59),  S(0, 41),    S(-20, 35),  S(41, 83),   S(58, 43),
          S(65, 62),   S(64, 34),   S(23, 10),   S(-19, 48),  S(-30, 13),
          S(-2, 88),   S(-2, 109),  S(-40, 131), S(57, 18),   S(-14, 58),
          S(52, 13),   S(10, 49),   S(-52, 56),  S(13, 76),   S(9, 108),
          S(41, 101),  S(94, 77),   S(105, 38),  S(48, 32),   S(-4, 52),
          S(-4, 54),   S(2, 69),    S(1, 92),    S(19, 102),  S(33, 101),
          S(28, 101),  S(0, 46),    S(2, 26),    S(-19, 57),  S(-10, 67),
          S(-41, 97),  S(-39, 97),  S(-34, 99),  S(-24, 34),  S(-7, 88),
          S(8, 25),    S(11, 39),   S(11, 6),    S(6, 38),    S(-3, 37),
          S(-13, 7),   S(-4, -3),   S(-12, 56),  S(-32, 40),  S(7, 11),
          S(17, -33),  S(39, -33),  S(32, -18),  S(-3, -40),  S(-5, -40),
          S(54, -14),  S(-29, -33), S(-23, -43), S(-7, -50),  S(6, -32),
          S(-13, -37), S(-28, -28), S(-14, -8),  S(-29, -25),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-95, -128), S(26, -52),  S(35, -13),   S(-5, 13),   S(-43, 2),
          S(-2, -24),   S(42, -14),  S(-21, -68),  S(5, -42),   S(8, 32),
          S(-48, 41),   S(5, 43),    S(21, 46),    S(-23, 19),  S(11, 54),
          S(28, 21),    S(-48, 15),  S(28, 34),    S(-56, 63),  S(-46, 70),
          S(-41, 45),   S(9, 59),    S(23, 63),    S(4, 20),    S(-70, 5),
          S(-59, 47),   S(-82, 46),  S(-109, 76),  S(-125, 62), S(-104, 82),
          S(-84, 68),   S(-57, 10),  S(-65, -1),   S(-71, 25),  S(-88, 32),
          S(-110, 45),  S(-184, 82), S(-131, 53),  S(-131, 16), S(-155, -13),
          S(-74, -56),  S(-18, 8),   S(-71, 18),   S(-153, 22), S(-129, 42),
          S(-138, 20),  S(-90, -12), S(-115, -14), S(15, -29),  S(-32, 6),
          S(-6, -12),   S(-90, -12), S(-90, -7),   S(-72, -1),  S(-13, 2),
          S(46, -49),   S(15, -116), S(80, -100),  S(21, -28),  S(-85, -47),
          S(-12, -64),  S(-8, -55),  S(68, -56),   S(32, -95),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),    S(15, 23),  S(14, 35),   S(14, 67),
          S(27, 104), S(42, 167), S(114, 211), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(-10, -10), S(-22, -7),  S(-30, -42), S(-8, -13),
          S(26, -75),  S(-56, -33), S(-10, -10), S(-10, -10),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(-6, -6),   S(-35, 15), S(-41, 7), S(-37, 3),
          S(-21, -11), S(-1, -9),  S(-15, 0), S(-6, -6),
    };
    const Score backwardPawnRankBonus[8] = {
          S(-15, -15), S(-36, -12), S(-26, -1),  S(-7, -19),
          S(-9, -24),  S(-15, -15), S(-15, -15), S(-15, -15),
    };
    const Score KnightMobilityScore[9] = {
          S(-59, -43), S(-2, -3), S(-27, 8), S(-11, 12), S(14, 39),
          S(39, 69),   S(53, 55), S(64, 51), S(51, 48),
    };
    const Score BishopMobilityScore[14] = {
          S(-28, -39), S(30, -15), S(4, 10),   S(60, 24),  S(68, 77),
          S(40, 69),   S(74, 85),  S(83, 92),  S(87, 95),  S(92, 96),
          S(102, 91),  S(81, 101), S(105, 80), S(121, 80),
    };
    const Score RookMobilityScore[15] = {
          S(-46, 35), S(-2, 99),  S(-8, 74),  S(10, 129), S(5, 136),
          S(-1, 137), S(17, 149), S(6, 161),  S(23, 164), S(45, 166),
          S(71, 172), S(79, 181), S(76, 180), S(68, 185), S(53, 158),
    };
    const Score QueenMobilityScore[28] = {
          S(-96, -118), S(-43, -57), S(-19, -30), S(-11, 19),  S(20, 104),
          S(7, 56),     S(39, 83),   S(36, 98),   S(34, 96),   S(53, 123),
          S(66, 121),   S(84, 166),  S(86, 170),  S(76, 190),  S(95, 195),
          S(74, 213),   S(91, 197),  S(94, 223),  S(107, 230), S(104, 237),
          S(143, 218),  S(148, 225), S(141, 221), S(170, 222), S(150, 214),
          S(141, 205),  S(99, 186),  S(141, 244),
    };
};

#endif // WEIGHTS_H_
