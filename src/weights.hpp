#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"

constexpr Score pawnScore = S(97, 97);
constexpr Score knightScore = S(302, 303);
constexpr Score bishopScore = S(329, 328);
constexpr Score rookScore = S(497, 503);
constexpr Score queenScore = S(903, 904);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),
      S(0, 0),   S(0, 0),   S(3, 3),   S(3, 3),   S(3, 3),   S(0, 0),
      S(3, 0),   S(3, 3),   S(-4, 3),  S(-4, 3),  S(-3, 2),  S(2, -3),
      S(-3, -3), S(-4, -3), S(-2, -3), S(3, -3),  S(3, -3),  S(-2, -2),
      S(-4, -3), S(-3, -3), S(-4, -3), S(-1, -4), S(3, -4),  S(3, -4),
      S(-3, -3), S(-3, -3), S(-3, -2), S(-3, 2),  S(-3, -3), S(2, -3),
      S(2, -3),  S(-3, -3), S(-3, 2),  S(-3, -2), S(-3, -3), S(-3, 0),
      S(-3, -3), S(-3, -2), S(-3, 0),  S(-3, -2), S(3, 2),   S(2, -3),
      S(0, -1),  S(-2, 3),  S(-3, 3),  S(-3, -3), S(-3, 4),  S(3, 3),
      S(3, 2),   S(1, -3),  S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),
      S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-4, -3), S(-3, 0),  S(3, 2),   S(0, -2),  S(-4, -3), S(3, -3),
      S(-4, -3), S(-4, -4), S(-3, -3), S(3, 2),   S(4, -3),  S(3, 2),
      S(3, 3),   S(3, -4),  S(3, -3),  S(4, -3),  S(4, -3),  S(3, -3),
      S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, -3),
      S(-2, -2), S(0, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
      S(3, 3),   S(3, 3),   S(-3, 3),  S(0, 3),   S(3, 3),   S(3, 3),
      S(3, 3),   S(3, 3),   S(3, 3),   S(4, -3),  S(-3, -3), S(-3, -2),
      S(3, 2),   S(-3, 3),  S(2, 3),   S(3, 2),   S(3, -3),  S(-3, -3),
      S(-3, -3), S(-3, -3), S(-3, -3), S(-3, 0),  S(-3, -2), S(-3, -3),
      S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3),
      S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-3, -3), S(-4, 3),  S(-3, 2),  S(2, 1),   S(-4, 3),  S(3, 3),
      S(3, -3),  S(-4, -1), S(-3, -3), S(-2, -2), S(3, 3),   S(0, 3),
      S(3, -1),  S(3, 3),   S(3, 0),   S(3, 3),   S(-3, 3),  S(3, 3),
      S(3, 0),   S(3, 1),   S(3, 2),   S(3, 3),   S(3, 3),   S(3, 3),
      S(-4, 2),  S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
      S(3, 3),   S(3, -1),  S(-2, 3),  S(-3, 3),  S(3, 3),   S(3, 3),
      S(3, 3),   S(3, 3),   S(0, 3),   S(-2, 0),  S(-2, 3),  S(3, 2),
      S(2, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, -2),  S(2, 3),
      S(-3, 3),  S(-3, -2), S(3, -3),  S(-3, -1), S(-1, 1),  S(3, -3),
      S(4, -1),  S(2, -3),  S(-3, -3), S(3, -2),  S(-3, -3), S(-3, -3),
      S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
      S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
      S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(-2, 4),  S(3, 3),
      S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 1),
      S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 2),
      S(4, 0),   S(3, -1),  S(-5, 3),  S(-4, 3),  S(-5, 3),  S(1, 0),
      S(3, -2),  S(-3, -3), S(4, -3),  S(3, 1),   S(-3, -3), S(-3, -3),
      S(-4, 3),  S(-4, -3), S(-3, -3), S(-3, -3), S(4, -3),  S(1, -3),
      S(-3, -3), S(-3, -3), S(3, -3),  S(-3, -3), S(-3, -3), S(-3, -3),
      S(-3, -3), S(-3, -3), S(-3, -3), S(-2, -3), S(3, 0),   S(3, 3),
      S(3, 0),   S(3, -3),  S(-3, -3), S(-3, -3),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-1, 3),  S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
      S(3, 3),   S(3, 3),   S(-3, -2), S(-3, 4),  S(-3, 4),  S(3, 3),
      S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(-3, 2),  S(-3, 4),
      S(-3, 4),  S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
      S(-3, 3),  S(-3, 4),  S(-1, 4),  S(2, 3),   S(3, 3),   S(3, 3),
      S(3, 3),   S(3, 3),   S(-3, -2), S(-4, 3),  S(-4, 3),  S(2, 3),
      S(-1, 3),  S(3, 3),   S(3, 3),   S(3, 3),   S(-3, -3), S(-3, 3),
      S(-1, 3),  S(-3, 3),  S(2, 3),   S(3, 3),   S(3, 3),   S(1, 2),
      S(-3, -3), S(-3, -3), S(0, -3),  S(2, -3),  S(1, -3),  S(0, -3),
      S(-3, -3), S(3, -3),  S(3, 0),   S(-3, -3), S(-3, -3), S(0, -3),
      S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-4, -4), S(-4, -3), S(-4, -3), S(-3, -3), S(3, 3),   S(3, 3),
      S(3, 3),   S(3, -3),  S(-3, -3), S(4, -3),  S(2, 3),   S(-4, 3),
      S(3, 3),   S(4, 2),   S(3, 2),   S(4, -3),  S(-3, -3), S(4, 0),
      S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(-3, -3),
      S(-3, -3), S(-3, -3), S(-3, 3),  S(-4, 4),  S(3, 3),   S(3, 3),
      S(-3, 4),  S(-4, -3), S(-3, -3), S(-3, -3), S(-4, 3),  S(-4, 3),
      S(-4, 3),  S(-4, 3),  S(-3, -2), S(-3, -3), S(-3, -3), S(-3, -3),
      S(-3, 0),  S(-4, 3),  S(-4, 3),  S(-4, 3),  S(-3, 2),  S(-3, -3),
      S(4, -3),  S(-3, -1), S(-3, 0),  S(-3, 2),  S(-3, 3),  S(-3, 3),
      S(-3, 0),  S(3, -3),  S(-3, -3), S(3, -3),  S(3, 3),   S(-3, -3),
      S(-3, -3), S(-3, -3), S(3, -2),  S(1, -3),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),    S(-13, -26), S(-8, -10), S(22, 47),
      S(72, 147), S(77, 172),  S(87, 183), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(0, 0),   S(-3, -3), S(-3, -3), S(-3, -3),
      S(-3, -3), S(-4, -4), S(0, 0),   S(0, 0),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(0, 0),   S(-3, -3), S(-3, -3), S(-3, -3),
      S(-3, -3), S(-3, -3), S(3, 3),   S(0, 0),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(0, 0), S(-3, -3), S(-2, -3), S(0, 0),
      S(2, 3), S(0, 0),   S(0, 0),   S(0, 0),
};
constexpr Score KnightMobilityScore[9] = {
      S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3), S(2, 1),
      S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
};
constexpr Score BishopMobilityScore[14] = {
      S(-3, -3), S(-3, -3), S(-3, -3), S(-2, -3), S(3, -3), S(3, 2), S(3, 3),
      S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),  S(3, 3), S(3, 3),
};
constexpr Score RookMobilityScore[15] = {
      S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3),
      S(1, -3),  S(2, -3),  S(3, -2),  S(3, 2),   S(3, 3),
      S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(4, 3),
};
constexpr Score QueenMobilityScore[28] = {
      S(4, 4),   S(-3, -3), S(-3, -3),  S(-3, -3), S(-3, -3), S(-3, -3),
      S(-3, -3), S(-3, -3), S(-2, -1),  S(1, -2),  S(2, 3),   S(3, 3),
      S(3, 3),   S(3, 3),   S(3, 3),    S(3, 3),   S(3, 3),   S(3, 3),
      S(3, 4),   S(3, 3),   S(3, 3),    S(4, 4),   S(4, 3),   S(4, 4),
      S(3, 3),   S(97, 97), S(100, 97), S(-3, -3),
};

struct EvalWeights {
    const Score pawnScore = S(97, 97);
    const Score knightScore = S(302, 303);
    const Score bishopScore = S(329, 328);
    const Score rookScore = S(497, 503);
    const Score queenScore = S(903, 904);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),
          S(0, 0),   S(0, 0),   S(3, 3),   S(3, 3),   S(3, 3),   S(0, 0),
          S(3, 0),   S(3, 3),   S(-4, 3),  S(-4, 3),  S(-3, 2),  S(2, -3),
          S(-3, -3), S(-4, -3), S(-2, -3), S(3, -3),  S(3, -3),  S(-2, -2),
          S(-4, -3), S(-3, -3), S(-4, -3), S(-1, -4), S(3, -4),  S(3, -4),
          S(-3, -3), S(-3, -3), S(-3, -2), S(-3, 2),  S(-3, -3), S(2, -3),
          S(2, -3),  S(-3, -3), S(-3, 2),  S(-3, -2), S(-3, -3), S(-3, 0),
          S(-3, -3), S(-3, -2), S(-3, 0),  S(-3, -2), S(3, 2),   S(2, -3),
          S(0, -1),  S(-2, 3),  S(-3, 3),  S(-3, -3), S(-3, 4),  S(3, 3),
          S(3, 2),   S(1, -3),  S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),
          S(0, 0),   S(0, 0),   S(0, 0),   S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-4, -3), S(-3, 0),  S(3, 2),   S(0, -2),  S(-4, -3), S(3, -3),
          S(-4, -3), S(-4, -4), S(-3, -3), S(3, 2),   S(4, -3),  S(3, 2),
          S(3, 3),   S(3, -4),  S(3, -3),  S(4, -3),  S(4, -3),  S(3, -3),
          S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, -3),
          S(-2, -2), S(0, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
          S(3, 3),   S(3, 3),   S(-3, 3),  S(0, 3),   S(3, 3),   S(3, 3),
          S(3, 3),   S(3, 3),   S(3, 3),   S(4, -3),  S(-3, -3), S(-3, -2),
          S(3, 2),   S(-3, 3),  S(2, 3),   S(3, 2),   S(3, -3),  S(-3, -3),
          S(-3, -3), S(-3, -3), S(-3, -3), S(-3, 0),  S(-3, -2), S(-3, -3),
          S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3),
          S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-3, -3), S(-4, 3),  S(-3, 2),  S(2, 1),   S(-4, 3),  S(3, 3),
          S(3, -3),  S(-4, -1), S(-3, -3), S(-2, -2), S(3, 3),   S(0, 3),
          S(3, -1),  S(3, 3),   S(3, 0),   S(3, 3),   S(-3, 3),  S(3, 3),
          S(3, 0),   S(3, 1),   S(3, 2),   S(3, 3),   S(3, 3),   S(3, 3),
          S(-4, 2),  S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
          S(3, 3),   S(3, -1),  S(-2, 3),  S(-3, 3),  S(3, 3),   S(3, 3),
          S(3, 3),   S(3, 3),   S(0, 3),   S(-2, 0),  S(-2, 3),  S(3, 2),
          S(2, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, -2),  S(2, 3),
          S(-3, 3),  S(-3, -2), S(3, -3),  S(-3, -1), S(-1, 1),  S(3, -3),
          S(4, -1),  S(2, -3),  S(-3, -3), S(3, -2),  S(-3, -3), S(-3, -3),
          S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
          S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
          S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(-2, 4),  S(3, 3),
          S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 1),
          S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 2),
          S(4, 0),   S(3, -1),  S(-5, 3),  S(-4, 3),  S(-5, 3),  S(1, 0),
          S(3, -2),  S(-3, -3), S(4, -3),  S(3, 1),   S(-3, -3), S(-3, -3),
          S(-4, 3),  S(-4, -3), S(-3, -3), S(-3, -3), S(4, -3),  S(1, -3),
          S(-3, -3), S(-3, -3), S(3, -3),  S(-3, -3), S(-3, -3), S(-3, -3),
          S(-3, -3), S(-3, -3), S(-3, -3), S(-2, -3), S(3, 0),   S(3, 3),
          S(3, 0),   S(3, -3),  S(-3, -3), S(-3, -3),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-1, 3),  S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
          S(3, 3),   S(3, 3),   S(-3, -2), S(-3, 4),  S(-3, 4),  S(3, 3),
          S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(-3, 2),  S(-3, 4),
          S(-3, 4),  S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
          S(-3, 3),  S(-3, 4),  S(-1, 4),  S(2, 3),   S(3, 3),   S(3, 3),
          S(3, 3),   S(3, 3),   S(-3, -2), S(-4, 3),  S(-4, 3),  S(2, 3),
          S(-1, 3),  S(3, 3),   S(3, 3),   S(3, 3),   S(-3, -3), S(-3, 3),
          S(-1, 3),  S(-3, 3),  S(2, 3),   S(3, 3),   S(3, 3),   S(1, 2),
          S(-3, -3), S(-3, -3), S(0, -3),  S(2, -3),  S(1, -3),  S(0, -3),
          S(-3, -3), S(3, -3),  S(3, 0),   S(-3, -3), S(-3, -3), S(0, -3),
          S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-4, -4), S(-4, -3), S(-4, -3), S(-3, -3), S(3, 3),   S(3, 3),
          S(3, 3),   S(3, -3),  S(-3, -3), S(4, -3),  S(2, 3),   S(-4, 3),
          S(3, 3),   S(4, 2),   S(3, 2),   S(4, -3),  S(-3, -3), S(4, 0),
          S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(-3, -3),
          S(-3, -3), S(-3, -3), S(-3, 3),  S(-4, 4),  S(3, 3),   S(3, 3),
          S(-3, 4),  S(-4, -3), S(-3, -3), S(-3, -3), S(-4, 3),  S(-4, 3),
          S(-4, 3),  S(-4, 3),  S(-3, -2), S(-3, -3), S(-3, -3), S(-3, -3),
          S(-3, 0),  S(-4, 3),  S(-4, 3),  S(-4, 3),  S(-3, 2),  S(-3, -3),
          S(4, -3),  S(-3, -1), S(-3, 0),  S(-3, 2),  S(-3, 3),  S(-3, 3),
          S(-3, 0),  S(3, -3),  S(-3, -3), S(3, -3),  S(3, 3),   S(-3, -3),
          S(-3, -3), S(-3, -3), S(3, -2),  S(1, -3),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),    S(-13, -26), S(-8, -10), S(22, 47),
          S(72, 147), S(77, 172),  S(87, 183), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(0, 0),   S(-3, -3), S(-3, -3), S(-3, -3),
          S(-3, -3), S(-4, -4), S(0, 0),   S(0, 0),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(0, 0),   S(-3, -3), S(-3, -3), S(-3, -3),
          S(-3, -3), S(-3, -3), S(3, 3),   S(0, 0),
    };
    const Score backwardPawnRankBonus[8] = {
          S(0, 0), S(-3, -3), S(-2, -3), S(0, 0),
          S(2, 3), S(0, 0),   S(0, 0),   S(0, 0),
    };
    const Score KnightMobilityScore[9] = {
          S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3), S(2, 1),
          S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
    };
    const Score BishopMobilityScore[14] = {
          S(-3, -3), S(-3, -3), S(-3, -3), S(-2, -3), S(3, -3),
          S(3, 2),   S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
          S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),
    };
    const Score RookMobilityScore[15] = {
          S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3), S(-3, -3),
          S(1, -3),  S(2, -3),  S(3, -2),  S(3, 2),   S(3, 3),
          S(3, 3),   S(3, 3),   S(3, 3),   S(3, 3),   S(4, 3),
    };
    const Score QueenMobilityScore[28] = {
          S(4, 4),   S(-3, -3), S(-3, -3),  S(-3, -3),   S(-3, -3), S(-3, -3),
          S(-3, -3), S(-3, -3), S(-2, -1),  S(1, 2),     S(2, 3),   S(3, 3),
          S(3, 3),   S(3, 3),   S(3, 3),    S(3, 3),     S(3, 3),   S(3, 3),
          S(3, 4),   S(3, 3),   S(3, 3),    S(4, 4),     S(4, 3),   S(4, 4),
          S(3, 3),   S(97, 97), S(100, 97), S(100, 100),
    };
};
#endif // WEIGHTS_H_
