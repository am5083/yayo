#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"
constexpr Score pawnScore = S(97, 130);
constexpr Score knightScore = S(368, 423);
constexpr Score bishopScore = S(392, 417);
constexpr Score rookScore = S(527, 688);
constexpr Score queenScore = S(1119, 1342);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),      S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),    S(0, 0),    S(3, 128),  S(4, 105),
      S(-15, 115),  S(12, 55),  S(-24, 56), S(2, 48),   S(-104, 117),
      S(-133, 148), S(-3, 94),  S(-18, 97), S(23, 41),  S(18, -10),
      S(45, -17),   S(92, 12),  S(65, 60),  S(16, 70),  S(-23, 54),
      S(-19, 35),   S(-6, 19),  S(-2, -8),  S(25, -6),  S(23, 3),
      S(14, 17),    S(9, 19),   S(-36, 27), S(-33, 24), S(-15, 6),
      S(-4, -4),    S(-4, -4),  S(1, 2),    S(-8, 8),   S(-10, 1),
      S(-27, 21),   S(-25, 15), S(-13, 10), S(-8, 8),   S(11, 10),
      S(8, 7),      S(22, 2),   S(2, 0),    S(-22, 25), S(-23, 20),
      S(-9, 11),    S(-2, 7),   S(3, 19),   S(33, 7),   S(38, -2),
      S(-1, -3),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),    S(0, 0),    S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-170, -61), S(-98, -46), S(-52, -23),   S(-27, -18), S(51, -22),
      S(-86, -29),  S(-53, -50), S(-102, -110), S(-25, -9),  S(-7, -6),
      S(37, -13),   S(65, -11),  S(52, -12),    S(98, -29),  S(18, -7),
      S(39, -43),   S(-7, 2),    S(26, -3),     S(48, 18),   S(72, 21),
      S(108, 17),   S(132, -3),  S(71, -32),    S(51, -32),  S(-8, 16),
      S(7, 16),     S(30, 47),   S(67, 34),     S(45, 41),   S(70, 30),
      S(28, 7),     S(58, 7),    S(-4, 17),     S(2, 10),    S(14, 44),
      S(29, 35),    S(34, 41),   S(34, 25),     S(55, -1),   S(18, 14),
      S(-29, -19),  S(-20, -1),  S(-3, 10),     S(2, 30),    S(26, 24),
      S(11, -1),    S(14, -12),  S(4, -6),      S(-44, -9),  S(-19, -4),
      S(-22, 0),    S(2, 3),     S(13, 0),      S(5, -1),    S(-2, -19),
      S(-6, -10),   S(-96, -10), S(-15, -25),   S(-36, -13), S(1, -4),
      S(2, -2),     S(0, -20),   S(-6, -11),    S(-44, -23),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-22, -4), S(-54, 12),  S(-53, 8),  S(-84, 6),  S(-56, -5), S(-44, -8),
      S(-25, -8), S(-35, -17), S(-12, -6), S(-3, -4),  S(-9, 2),   S(-15, 8),
      S(11, -7),  S(27, -3),   S(24, 7),   S(2, -19),  S(-8, 21),  S(16, 2),
      S(25, 2),   S(29, 6),    S(37, 2),   S(69, 13),  S(50, -1),  S(28, 12),
      S(-17, 4),  S(5, 13),    S(14, 16),  S(51, 17),  S(35, 17),  S(30, 14),
      S(-1, 19),  S(-7, 7),    S(-13, 1),  S(-14, 17), S(6, 11),   S(28, 17),
      S(24, 22),  S(-3, 18),   S(-8, 8),   S(17, -21), S(-8, 9),   S(21, 6),
      S(5, 11),   S(15, 13),   S(20, 23),  S(13, 7),   S(18, 3),   S(21, -9),
      S(14, 7),   S(6, -9),    S(23, -10), S(-6, 7),   S(7, 6),    S(33, -10),
      S(30, -4),  S(19, 2),    S(-14, 8),  S(29, 12),  S(10, 8),   S(-12, 9),
      S(3, -1),   S(5, 10),    S(27, -13), S(13, -17),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(35, 16),  S(35, 21),   S(15, 43),  S(28, 34),   S(68, 17),  S(44, 32),
      S(55, 25),  S(81, 9),    S(-5, 20),  S(-7, 37),   S(19, 40),  S(55, 20),
      S(40, 20),  S(74, 15),   S(50, 8),   S(79, -1),   S(5, 13),   S(23, 20),
      S(12, 21),  S(30, 17),   S(64, 0),   S(87, -2),   S(121, -2), S(79, -9),
      S(-20, 23), S(-3, 24),   S(-3, 28),  S(4, 19),    S(20, -2),  S(21, -2),
      S(43, 0),   S(38, -10),  S(-41, 15), S(-38, 14),  S(-30, 17), S(-28, 14),
      S(-22, 11), S(-33, 8),   S(18, 0),   S(-14, 0),   S(-48, 12), S(-39, 14),
      S(-29, 1),  S(-28, 6),   S(-19, 5),  S(-12, -9),  S(36, -32), S(-6, -24),
      S(-53, -3), S(-38, -3),  S(-13, 0),  S(-12, -2),  S(-3, -14), S(2, -14),
      S(28, -28), S(-38, -10), S(-26, 0),  S(-20, 3),   S(-6, 0),   S(1, -2),
      S(7, -14),  S(1, -10),   S(9, -12),  S(-26, -14),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-43, 27),  S(-21, 7),   S(-7, 61),  S(29, 49),   S(43, 54),  S(44, 49),
      S(85, -2),   S(57, 18),   S(-24, 33), S(-60, 49),  S(-28, 76), S(-36, 97),
      S(-26, 108), S(35, 50),   S(14, 48),  S(84, 43),   S(-5, 14),  S(-28, 33),
      S(-16, 66),  S(-15, 85),  S(21, 84),  S(77, 58),   S(86, 27),  S(61, 66),
      S(-28, 27),  S(-19, 36),  S(-21, 51), S(-30, 75),  S(-9, 91),  S(2, 86),
      S(13, 88),   S(18, 56),   S(-13, -3), S(-33, 38),  S(-33, 52), S(-18, 67),
      S(-22, 66),  S(-19, 76),  S(-10, 64), S(12, 51),   S(-20, -8), S(-8, 11),
      S(-20, 25),  S(-15, 29),  S(-14, 50), S(1, 33),    S(16, 12),  S(11, 21),
      S(-12, -4),  S(-10, -23), S(5, -15),  S(13, -14),  S(8, -5),   S(24, -34),
      S(26, -33),  S(41, -54),  S(-5, -20), S(8, -33),   S(17, -42), S(25, -24),
      S(15, -27),  S(-1, -18),  S(10, -33), S(-10, -16),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-82, -117), S(-5, -55),  S(25, -47),  S(-13, -21), S(-75, -25),
      S(-34, -13),  S(7, 0),     S(19, -99),  S(-31, -35), S(-27, 14),
      S(-58, 19),   S(6, 32),    S(11, 37),   S(12, 40),   S(38, 41),
      S(21, 12),    S(-82, -8),  S(16, 22),   S(-20, 48),  S(-13, 63),
      S(-19, 73),   S(44, 58),   S(60, 50),   S(-18, 9),   S(-51, -15),
      S(-34, 17),   S(-66, 55),  S(-133, 71), S(-117, 74), S(-74, 68),
      S(-82, 53),   S(-89, 4),   S(-99, -22), S(-60, 9),   S(-127, 51),
      S(-149, 72),  S(-172, 74), S(-122, 54), S(-123, 35), S(-145, 0),
      S(-62, -29),  S(-53, 1),   S(-102, 29), S(-147, 48), S(-141, 50),
      S(-134, 40),  S(-80, 12),  S(-107, -6), S(51, -54),  S(-21, -12),
      S(-40, 6),    S(-71, 15),  S(-76, 20),  S(-63, 14),  S(12, -19),
      S(22, -43),   S(33, -104), S(82, -81),  S(54, -46),  S(-75, -28),
      S(1, -42),    S(-45, -29), S(55, -72),  S(48, -114),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),  S(-3, 3),   S(-8, 12),  S(-5, 42),
      S(7, 74), S(13, 151), S(91, 198), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(-10, -10), S(-6, -30),  S(-14, -19), S(-7, -36),
      S(15, -59),  S(-73, -63), S(-10, -10), S(-10, -10),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(-6, -6),  S(-18, -6), S(-22, -14), S(-17, -9),
      S(-3, -25), S(15, -38), S(-27, -13), S(-6, -6),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(-15, -15), S(-16, -12), S(-4, -7),   S(-9, -4),
      S(-19, -6),  S(-15, -15), S(-15, -15), S(-15, -15),
};
constexpr Score KnightMobilityScore[9] = {
      S(-46, -33), S(-24, 4), S(-5, 17), S(9, 34),  S(20, 44),
      S(30, 52),   S(43, 49), S(53, 39), S(50, 30),
};
constexpr Score BishopMobilityScore[14] = {
      S(-20, -27), S(6, -1),  S(22, 23), S(34, 47),  S(45, 59),
      S(54, 70),   S(61, 75), S(65, 81), S(68, 82),  S(74, 82),
      S(88, 78),   S(68, 83), S(94, 68), S(109, 89),
};
constexpr Score RookMobilityScore[15] = {
      S(-35, 47), S(-18, 67), S(-7, 85),  S(-2, 100), S(1, 105),
      S(6, 119),  S(16, 126), S(25, 130), S(36, 135), S(47, 140),
      S(56, 146), S(63, 157), S(68, 157), S(56, 159), S(82, 166),
};
constexpr Score QueenMobilityScore[28] = {
      S(-83, -105), S(-31, -45), S(-7, -16),  S(1, 30),    S(22, 58),
      S(25, 59),    S(29, 102),  S(35, 123),  S(45, 126),  S(50, 149),
      S(59, 144),   S(64, 152),  S(63, 166),  S(65, 168),  S(70, 179),
      S(65, 193),   S(70, 196),  S(69, 201),  S(78, 208),  S(86, 206),
      S(122, 183),  S(128, 192), S(118, 186), S(160, 190), S(137, 185),
      S(128, 180),  S(134, 219), S(131, 208),
};

struct EvalWeights {

    const Score pawnScore = S(97, 130);
    const Score knightScore = S(368, 423);
    const Score bishopScore = S(392, 417);
    const Score rookScore = S(527, 688);
    const Score queenScore = S(1119, 1342);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),      S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),    S(0, 0),    S(3, 128),  S(4, 105),
          S(-15, 115),  S(12, 55),  S(-24, 56), S(2, 48),   S(-104, 117),
          S(-133, 148), S(-3, 94),  S(-18, 97), S(23, 41),  S(18, -10),
          S(45, -17),   S(92, 12),  S(65, 60),  S(16, 70),  S(-23, 54),
          S(-19, 35),   S(-6, 19),  S(-2, -8),  S(25, -6),  S(23, 3),
          S(14, 17),    S(9, 19),   S(-36, 27), S(-33, 24), S(-15, 6),
          S(-4, -4),    S(-4, -4),  S(1, 2),    S(-8, 8),   S(-10, 1),
          S(-27, 21),   S(-25, 15), S(-13, 10), S(-8, 8),   S(11, 10),
          S(8, 7),      S(22, 2),   S(2, 0),    S(-22, 25), S(-23, 20),
          S(-9, 11),    S(-2, 7),   S(3, 19),   S(33, 7),   S(38, -2),
          S(-1, -3),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),    S(0, 0),    S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-170, -61), S(-98, -46), S(-52, -23),   S(-27, -18), S(51, -22),
          S(-86, -29),  S(-53, -50), S(-102, -110), S(-25, -9),  S(-7, -6),
          S(37, -13),   S(65, -11),  S(52, -12),    S(98, -29),  S(18, -7),
          S(39, -43),   S(-7, 2),    S(26, -3),     S(48, 18),   S(72, 21),
          S(108, 17),   S(132, -3),  S(71, -32),    S(51, -32),  S(-8, 16),
          S(7, 16),     S(30, 47),   S(67, 34),     S(45, 41),   S(70, 30),
          S(28, 7),     S(58, 7),    S(-4, 17),     S(2, 10),    S(14, 44),
          S(29, 35),    S(34, 41),   S(34, 25),     S(55, -1),   S(18, 14),
          S(-29, -19),  S(-20, -1),  S(-3, 10),     S(2, 30),    S(26, 24),
          S(11, -1),    S(14, -12),  S(4, -6),      S(-44, -9),  S(-19, -4),
          S(-22, 0),    S(2, 3),     S(13, 0),      S(5, -1),    S(-2, -19),
          S(-6, -10),   S(-96, -10), S(-15, -25),   S(-36, -13), S(1, -4),
          S(2, -2),     S(0, -20),   S(-6, -11),    S(-44, -23),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-22, -4), S(-54, 12), S(-53, 8),   S(-84, 6),  S(-56, -5),
          S(-44, -8), S(-25, -8), S(-35, -17), S(-12, -6), S(-3, -4),
          S(-9, 2),   S(-15, 8),  S(11, -7),   S(27, -3),  S(24, 7),
          S(2, -19),  S(-8, 21),  S(16, 2),    S(25, 2),   S(29, 6),
          S(37, 2),   S(69, 13),  S(50, -1),   S(28, 12),  S(-17, 4),
          S(5, 13),   S(14, 16),  S(51, 17),   S(35, 17),  S(30, 14),
          S(-1, 19),  S(-7, 7),   S(-13, 1),   S(-14, 17), S(6, 11),
          S(28, 17),  S(24, 22),  S(-3, 18),   S(-8, 8),   S(17, -21),
          S(-8, 9),   S(21, 6),   S(5, 11),    S(15, 13),  S(20, 23),
          S(13, 7),   S(18, 3),   S(21, -9),   S(14, 7),   S(6, -9),
          S(23, -10), S(-6, 7),   S(7, 6),     S(33, -10), S(30, -4),
          S(19, 2),   S(-14, 8),  S(29, 12),   S(10, 8),   S(-12, 9),
          S(3, -1),   S(5, 10),   S(27, -13),  S(13, -17),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(35, 16),   S(35, 21),  S(15, 43),  S(28, 34),   S(68, 17),
          S(44, 32),   S(55, 25),  S(81, 9),   S(-5, 20),   S(-7, 37),
          S(19, 40),   S(55, 20),  S(40, 20),  S(74, 15),   S(50, 8),
          S(79, -1),   S(5, 13),   S(23, 20),  S(12, 21),   S(30, 17),
          S(64, 0),    S(87, -2),  S(121, -2), S(79, -9),   S(-20, 23),
          S(-3, 24),   S(-3, 28),  S(4, 19),   S(20, -2),   S(21, -2),
          S(43, 0),    S(38, -10), S(-41, 15), S(-38, 14),  S(-30, 17),
          S(-28, 14),  S(-22, 11), S(-33, 8),  S(18, 0),    S(-14, 0),
          S(-48, 12),  S(-39, 14), S(-29, 1),  S(-28, 6),   S(-19, 5),
          S(-12, -9),  S(36, -32), S(-6, -24), S(-53, -3),  S(-38, -3),
          S(-13, 0),   S(-12, -2), S(-3, -14), S(2, -14),   S(28, -28),
          S(-38, -10), S(-26, 0),  S(-20, 3),  S(-6, 0),    S(1, -2),
          S(7, -14),   S(1, -10),  S(9, -12),  S(-26, -14),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-43, 27), S(-21, 7),  S(-7, 61),   S(29, 49),   S(43, 54),
          S(44, 49),  S(85, -2),  S(57, 18),   S(-24, 33),  S(-60, 49),
          S(-28, 76), S(-36, 97), S(-26, 108), S(35, 50),   S(14, 48),
          S(84, 43),  S(-5, 14),  S(-28, 33),  S(-16, 66),  S(-15, 85),
          S(21, 84),  S(77, 58),  S(86, 27),   S(61, 66),   S(-28, 27),
          S(-19, 36), S(-21, 51), S(-30, 75),  S(-9, 91),   S(2, 86),
          S(13, 88),  S(18, 56),  S(-13, -3),  S(-33, 38),  S(-33, 52),
          S(-18, 67), S(-22, 66), S(-19, 76),  S(-10, 64),  S(12, 51),
          S(-20, -8), S(-8, 11),  S(-20, 25),  S(-15, 29),  S(-14, 50),
          S(1, 33),   S(16, 12),  S(11, 21),   S(-12, -4),  S(-10, -23),
          S(5, -15),  S(13, -14), S(8, -5),    S(24, -34),  S(26, -33),
          S(41, -54), S(-5, -20), S(8, -33),   S(17, -42),  S(25, -24),
          S(15, -27), S(-1, -18), S(10, -33),  S(-10, -16),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-82, -117), S(-5, -55),  S(25, -47),  S(-13, -21), S(-75, -25),
          S(-34, -13),  S(7, 0),     S(19, -99),  S(-31, -35), S(-27, 14),
          S(-58, 19),   S(6, 32),    S(11, 37),   S(12, 40),   S(38, 41),
          S(21, 12),    S(-82, -8),  S(16, 22),   S(-20, 48),  S(-13, 63),
          S(-19, 73),   S(44, 58),   S(60, 50),   S(-18, 9),   S(-51, -15),
          S(-34, 17),   S(-66, 55),  S(-133, 71), S(-117, 74), S(-74, 68),
          S(-82, 53),   S(-89, 4),   S(-99, -22), S(-60, 9),   S(-127, 51),
          S(-149, 72),  S(-172, 74), S(-122, 54), S(-123, 35), S(-145, 0),
          S(-62, -29),  S(-53, 1),   S(-102, 29), S(-147, 48), S(-141, 50),
          S(-134, 40),  S(-80, 12),  S(-107, -6), S(51, -54),  S(-21, -12),
          S(-40, 6),    S(-71, 15),  S(-76, 20),  S(-63, 14),  S(12, -19),
          S(22, -43),   S(33, -104), S(82, -81),  S(54, -46),  S(-75, -28),
          S(1, -42),    S(-45, -29), S(55, -72),  S(48, -114),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),  S(-3, 3),   S(-8, 12),  S(-5, 42),
          S(7, 74), S(13, 151), S(91, 198), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(-10, -10), S(-6, -30),  S(-14, -19), S(-7, -36),
          S(15, -59),  S(-73, -63), S(-10, -10), S(-10, -10),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(-6, -6),  S(-18, -6), S(-22, -14), S(-17, -9),
          S(-3, -25), S(15, -38), S(-27, -13), S(-6, -6),
    };
    const Score backwardPawnRankBonus[8] = {
          S(-15, -15), S(-16, -12), S(-4, -7),   S(-9, -4),
          S(-19, -6),  S(-15, -15), S(-15, -15), S(-15, -15),
    };
    const Score KnightMobilityScore[9] = {
          S(-46, -33), S(-24, 4), S(-5, 17), S(9, 34),  S(20, 44),
          S(30, 52),   S(43, 49), S(53, 39), S(50, 30),
    };
    const Score BishopMobilityScore[14] = {
          S(-20, -27), S(6, -1),  S(22, 23), S(34, 47),  S(45, 59),
          S(54, 70),   S(61, 75), S(65, 81), S(68, 82),  S(74, 82),
          S(88, 78),   S(68, 83), S(94, 68), S(109, 89),
    };
    const Score RookMobilityScore[15] = {
          S(-35, 47), S(-18, 67), S(-7, 85),  S(-2, 100), S(1, 105),
          S(6, 119),  S(16, 126), S(25, 130), S(36, 135), S(47, 140),
          S(56, 146), S(63, 157), S(68, 157), S(56, 159), S(82, 166),
    };
    const Score QueenMobilityScore[28] = {
          S(-83, -105), S(-31, -45), S(-7, -16),  S(1, 30),    S(22, 58),
          S(25, 59),    S(29, 102),  S(35, 123),  S(45, 126),  S(50, 149),
          S(59, 144),   S(64, 152),  S(63, 166),  S(65, 168),  S(70, 179),
          S(65, 193),   S(70, 196),  S(69, 201),  S(78, 208),  S(86, 206),
          S(122, 183),  S(128, 192), S(118, 186), S(160, 190), S(137, 185),
          S(128, 180),  S(134, 219), S(131, 208),
    };
};

#endif // WEIGHTS_H_
