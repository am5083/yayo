#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"

constexpr Score pawnScore = S(132, 159);
constexpr Score knightScore = S(198, 320);
constexpr Score bishopScore = S(264, 343);
constexpr Score rookScore = S(382, 578);
constexpr Score queenScore = S(862, 1096);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
      S(0, 0),     S(0, 0),     S(0, 0),     S(-57, 66),  S(-19, 24),
      S(21, 18),   S(-37, -6),  S(-60, -32), S(-44, -37), S(-125, 34),
      S(-163, 61), S(-74, 40),  S(-60, 35),  S(-60, -5),  S(-54, -51),
      S(-41, -56), S(3, -41),   S(-14, 16),  S(-64, 17),  S(-83, 10),
      S(-81, 1),   S(-67, -33), S(-62, -60), S(-47, -51), S(-49, -44),
      S(-64, -23), S(-54, -29), S(-89, -16), S(-85, -18), S(-71, -42),
      S(-61, -49), S(-63, -46), S(-59, -43), S(-73, -31), S(-71, -41),
      S(-82, -23), S(-77, -23), S(-69, -36), S(-63, -44), S(-49, -39),
      S(-57, -38), S(-47, -40), S(-60, -41), S(-78, -26), S(-75, -25),
      S(-66, -38), S(-64, -39), S(-58, -29), S(-37, -38), S(-35, -42),
      S(-64, -46), S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
      S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-87, -72), S(-148, -3),  S(-47, -6),   S(-41, 26), S(52, 8),
      S(-88, 23),  S(-126, -28), S(-110, -91), S(15, -8),  S(22, 11),
      S(68, -15),  S(40, 5),     S(69, 9),     S(93, -23), S(-21, 19),
      S(37, -8),   S(30, -18),   S(44, 15),    S(57, 28),  S(70, 27),
      S(109, 18),  S(89, 5),     S(58, -7),    S(59, -22), S(49, -5),
      S(36, 11),   S(55, 36),    S(77, 35),    S(62, 42),  S(83, 36),
      S(50, 5),    S(67, -3),    S(30, 0),     S(38, 5),   S(38, 33),
      S(47, 37),   S(53, 40),    S(52, 20),    S(69, 30),  S(41, 4),
      S(3, -5),    S(17, 11),    S(29, 11),    S(32, 34),  S(51, 22),
      S(39, 8),    S(37, -3),    S(37, -23),   S(5, -15),  S(3, 0),
      S(14, 0),    S(31, 7),     S(37, -7),    S(34, 1),   S(24, -18),
      S(25, -2),   S(-56, -6),   S(19, -28),   S(2, -23),  S(12, -8),
      S(22, -2),   S(23, -7),    S(29, -17),   S(8, -28),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-28, 7),  S(-39, 44),  S(-41, 21), S(-101, 14), S(-88, 32), S(-66, 1),
      S(-17, -4), S(-103, 86), S(1, -8),   S(11, 17),   S(-13, 21), S(-8, 21),
      S(8, 5),    S(-2, 20),   S(-12, 31), S(-24, 16),  S(6, 29),   S(4, 23),
      S(26, 27),  S(35, 13),   S(27, 10),  S(53, 23),   S(25, 13),  S(37, -1),
      S(10, 8),   S(14, 23),   S(19, 27),  S(47, 39),   S(38, 32),  S(45, 23),
      S(25, 13),  S(17, 4),    S(0, 10),   S(10, 16),   S(20, 30),  S(32, 40),
      S(33, 23),  S(18, 18),   S(16, 6),   S(25, 3),    S(18, -1),  S(20, 24),
      S(20, 26),  S(20, 22),   S(30, 29),  S(27, 22),   S(22, 15),  S(26, 10),
      S(21, 27),  S(23, 3),    S(32, 0),   S(12, 10),   S(16, 10),  S(33, 1),
      S(36, 14),  S(24, 10),   S(13, 1),   S(33, 30),   S(22, 10),  S(-3, 21),
      S(5, 7),    S(10, 25),   S(44, -18), S(23, -11),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(-71, 75), S(-3, 62),  S(-49, 77), S(-25, 71), S(-39, 88), S(-1, 55),
      S(-40, 75), S(1, 59),   S(-30, 67), S(-27, 65), S(-20, 78), S(-15, 70),
      S(-39, 77), S(24, 49),  S(-10, 60), S(7, 54),   S(-51, 69), S(-19, 67),
      S(-10, 71), S(-25, 63), S(30, 34),  S(52, 46),  S(89, 30),  S(8, 41),
      S(-49, 69), S(-45, 62), S(-42, 66), S(-20, 51), S(-18, 39), S(-22, 55),
      S(-5, 41),  S(-17, 44), S(-60, 61), S(-75, 63), S(-59, 63), S(-42, 43),
      S(-50, 53), S(-41, 48), S(-13, 41), S(-46, 42), S(-57, 52), S(-59, 46),
      S(-45, 41), S(-39, 42), S(-48, 50), S(-25, 29), S(-14, 39), S(-42, 30),
      S(-62, 37), S(-68, 52), S(-37, 42), S(-33, 37), S(-31, 35), S(-21, 19),
      S(-15, 19), S(-50, 21), S(-46, 38), S(-40, 40), S(-32, 45), S(-22, 41),
      S(-18, 31), S(-25, 32), S(-27, 35), S(-37, 27),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-44, 125), S(-100, 144), S(-42, 155), S(35, 85),   S(35, 95),
      S(-3, 83),   S(-27, 127),  S(-40, 111), S(-14, 89),  S(-42, 103),
      S(-49, 174), S(-65, 182),  S(-46, 166), S(-8, 138),  S(-25, 74),
      S(38, 109),  S(-15, 78),   S(-4, 84),   S(-8, 135),  S(-25, 147),
      S(1, 141),   S(15, 153),   S(44, 84),   S(41, 93),   S(-12, 56),
      S(-18, 118), S(-18, 119),  S(-33, 143), S(-26, 155), S(-5, 139),
      S(-1, 152),  S(7, 108),    S(-21, 94),  S(-30, 119), S(-23, 97),
      S(-21, 138), S(-21, 129),  S(-16, 140), S(-9, 113),  S(-2, 118),
      S(-32, 85),  S(-9, 93),    S(-17, 112), S(-20, 118), S(-7, 102),
      S(-5, 119),  S(0, 103),    S(9, 51),    S(-27, 85),  S(-26, 108),
      S(-5, 84),   S(2, 80),     S(-1, 86),   S(8, 46),    S(-6, 56),
      S(24, -25),  S(-6, 70),    S(-7, 70),   S(8, 66),    S(8, 69),
      S(7, 77),    S(-5, 44),    S(19, -73),  S(-27, 34),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(30, -103), S(109, -46),  S(55, 36),    S(-22, -8),  S(-8, 90),
      S(80, 25),   S(69, 90),    S(171, -92),  S(-88, 40),  S(132, 32),
      S(-32, 94),  S(29, 76),    S(-60, 94),   S(-55, 111), S(121, 95),
      S(-2, 32),   S(-140, 69),  S(-21, 63),   S(-50, 86),  S(-70, 102),
      S(57, 74),   S(19, 112),   S(23, 109),   S(41, 58),   S(2, 5),
      S(-110, 90), S(-105, 99),  S(-224, 127), S(-96, 118), S(-67, 122),
      S(-69, 101), S(-95, 80),   S(-137, 37),  S(-12, 57),  S(-109, 94),
      S(-92, 98),  S(-151, 113), S(-97, 92),   S(-91, 81),  S(-119, 59),
      S(20, 27),   S(27, 49),    S(-44, 71),   S(-93, 90),  S(-62, 81),
      S(-50, 74),  S(-7, 59),    S(-21, 37),   S(77, -4),   S(30, 28),
      S(38, 41),   S(-8, 53),    S(0, 53),     S(14, 48),   S(69, 31),
      S(78, 4),    S(51, 4),     S(100, -4),   S(79, 6),    S(2, 44),
      S(68, 9),    S(28, 20),    S(107, -11),  S(100, -38),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),  S(-7, 11), S(-6, 15),   S(-12, 49),
      S(3, 78), S(3, 129), S(-17, 178), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(0, 0),    S(0, -32),   S(-4, -19), S(-4, -36),
      S(26, -69), S(-70, -84), S(0, 0),    S(0, 0),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(0, 0),    S(-12, -3), S(-17, -13), S(-16, -10),
      S(-5, -22), S(10, -28), S(38, -30),  S(0, 0),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(0, 0),   S(-12, -5), S(-3, -7), S(-7, -5),
      S(-13, 3), S(0, 0),    S(0, 0),   S(0, 0),
};
constexpr Score KnightMobilityScore[9] = {
      S(-15, 3), S(7, 35),  S(15, 70), S(26, 70), S(33, 80),
      S(38, 88), S(46, 85), S(53, 82), S(56, 65),
};
constexpr Score BishopMobilityScore[14] = {
      S(-16, -29), S(-7, 14), S(6, 34),   S(14, 50), S(24, 61),
      S(28, 75),   S(30, 80), S(35, 82),  S(36, 85), S(40, 88),
      S(50, 77),   S(67, 66), S(104, 59), S(51, 62),
};
constexpr Score RookMobilityScore[15] = {
      S(-33, -4), S(-9, 55),  S(1, 58),   S(4, 67),   S(8, 71),
      S(9, 81),   S(13, 86),  S(19, 96),  S(24, 101), S(30, 104),
      S(36, 106), S(41, 111), S(46, 114), S(48, 114), S(41, 116),
};
constexpr Score QueenMobilityScore[28] = {
      S(61, 2),    S(-126, -11), S(-141, -2),  S(-111, -27), S(-109, 72),
      S(-113, 99), S(-115, 141), S(-105, 143), S(-102, 155), S(-97, 155),
      S(-90, 157), S(-88, 159),  S(-83, 160),  S(-85, 170),  S(-84, 177),
      S(-87, 186), S(-86, 190),  S(-87, 204),  S(-77, 192),  S(-76, 189),
      S(-52, 183), S(-16, 135),  S(-22, 123),  S(-3, 165),   S(153, 35),
      S(146, 22),  S(111, 22),   S(140, 76),
};

struct EvalWeights {
    const Score pawnScore = S(132, 159);
    const Score knightScore = S(198, 320);
    const Score bishopScore = S(264, 343);
    const Score rookScore = S(382, 578);
    const Score queenScore = S(862, 1096);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
          S(0, 0),     S(0, 0),     S(0, 0),     S(-57, 66),  S(-19, 24),
          S(21, 18),   S(-37, -6),  S(-60, -32), S(-44, -37), S(-125, 34),
          S(-163, 61), S(-74, 40),  S(-60, 35),  S(-60, -5),  S(-54, -51),
          S(-41, -56), S(3, -41),   S(-14, 16),  S(-64, 17),  S(-83, 10),
          S(-81, 1),   S(-67, -33), S(-62, -60), S(-47, -51), S(-49, -44),
          S(-64, -23), S(-54, -29), S(-89, -16), S(-85, -18), S(-71, -42),
          S(-61, -49), S(-63, -46), S(-59, -43), S(-73, -31), S(-71, -41),
          S(-82, -23), S(-77, -23), S(-69, -36), S(-63, -44), S(-49, -39),
          S(-57, -38), S(-47, -40), S(-60, -41), S(-78, -26), S(-75, -25),
          S(-66, -38), S(-64, -39), S(-58, -29), S(-37, -38), S(-35, -42),
          S(-64, -46), S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
          S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-87, -72), S(-148, -3),  S(-47, -6),   S(-41, 26), S(52, 8),
          S(-88, 23),  S(-126, -28), S(-110, -91), S(15, -8),  S(22, 11),
          S(68, -15),  S(40, 5),     S(69, 9),     S(93, -23), S(-21, 19),
          S(37, -8),   S(30, -18),   S(44, 15),    S(57, 28),  S(70, 27),
          S(109, 18),  S(89, 5),     S(58, -7),    S(59, -22), S(49, -5),
          S(36, 11),   S(55, 36),    S(77, 35),    S(62, 42),  S(83, 36),
          S(50, 5),    S(67, -3),    S(30, 0),     S(38, 5),   S(38, 33),
          S(47, 37),   S(53, 40),    S(52, 20),    S(69, 30),  S(41, 4),
          S(3, -5),    S(17, 11),    S(29, 11),    S(32, 34),  S(51, 22),
          S(39, 8),    S(37, -3),    S(37, -23),   S(5, -15),  S(3, 0),
          S(14, 0),    S(31, 7),     S(37, -7),    S(34, 1),   S(24, -18),
          S(25, -2),   S(-56, -6),   S(19, -28),   S(2, -23),  S(12, -8),
          S(22, -2),   S(23, -7),    S(29, -17),   S(8, -28),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-28, 7),  S(-39, 44), S(-41, 21),  S(-101, 14), S(-88, 32),
          S(-66, 1),  S(-17, -4), S(-103, 86), S(1, -8),    S(11, 17),
          S(-13, 21), S(-8, 21),  S(8, 5),     S(-2, 20),   S(-12, 31),
          S(-24, 16), S(6, 29),   S(4, 23),    S(26, 27),   S(35, 13),
          S(27, 10),  S(53, 23),  S(25, 13),   S(37, -1),   S(10, 8),
          S(14, 23),  S(19, 27),  S(47, 39),   S(38, 32),   S(45, 23),
          S(25, 13),  S(17, 4),   S(0, 10),    S(10, 16),   S(20, 30),
          S(32, 40),  S(33, 23),  S(18, 18),   S(16, 6),    S(25, 3),
          S(18, -1),  S(20, 24),  S(20, 26),   S(20, 22),   S(30, 29),
          S(27, 22),  S(22, 15),  S(26, 10),   S(21, 27),   S(23, 3),
          S(32, 0),   S(12, 10),  S(16, 10),   S(33, 1),    S(36, 14),
          S(24, 10),  S(13, 1),   S(33, 30),   S(22, 10),   S(-3, 21),
          S(5, 7),    S(10, 25),  S(44, -18),  S(23, -11),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(-71, 75), S(-3, 62),  S(-49, 77), S(-25, 71), S(-39, 88),
          S(-1, 55),  S(-40, 75), S(1, 59),   S(-30, 67), S(-27, 65),
          S(-20, 78), S(-15, 70), S(-39, 77), S(24, 49),  S(-10, 60),
          S(7, 54),   S(-51, 69), S(-19, 67), S(-10, 71), S(-25, 63),
          S(30, 34),  S(52, 46),  S(89, 30),  S(8, 41),   S(-49, 69),
          S(-45, 62), S(-42, 66), S(-20, 51), S(-18, 39), S(-22, 55),
          S(-5, 41),  S(-17, 44), S(-60, 61), S(-75, 63), S(-59, 63),
          S(-42, 43), S(-50, 53), S(-41, 48), S(-13, 41), S(-46, 42),
          S(-57, 52), S(-59, 46), S(-45, 41), S(-39, 42), S(-48, 50),
          S(-25, 29), S(-14, 39), S(-42, 30), S(-62, 37), S(-68, 52),
          S(-37, 42), S(-33, 37), S(-31, 35), S(-21, 19), S(-15, 19),
          S(-50, 21), S(-46, 38), S(-40, 40), S(-32, 45), S(-22, 41),
          S(-18, 31), S(-25, 32), S(-27, 35), S(-37, 27),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-44, 125), S(-100, 144), S(-42, 155), S(35, 85),   S(35, 95),
          S(-3, 83),   S(-27, 127),  S(-40, 111), S(-14, 89),  S(-42, 103),
          S(-49, 174), S(-65, 182),  S(-46, 166), S(-8, 138),  S(-25, 74),
          S(38, 109),  S(-15, 78),   S(-4, 84),   S(-8, 135),  S(-25, 147),
          S(1, 141),   S(15, 153),   S(44, 84),   S(41, 93),   S(-12, 56),
          S(-18, 118), S(-18, 119),  S(-33, 143), S(-26, 155), S(-5, 139),
          S(-1, 152),  S(7, 108),    S(-21, 94),  S(-30, 119), S(-23, 97),
          S(-21, 138), S(-21, 129),  S(-16, 140), S(-9, 113),  S(-2, 118),
          S(-32, 85),  S(-9, 93),    S(-17, 112), S(-20, 118), S(-7, 102),
          S(-5, 119),  S(0, 103),    S(9, 51),    S(-27, 85),  S(-26, 108),
          S(-5, 84),   S(2, 80),     S(-1, 86),   S(8, 46),    S(-6, 56),
          S(24, -25),  S(-6, 70),    S(-7, 70),   S(8, 66),    S(8, 69),
          S(7, 77),    S(-5, 44),    S(19, -73),  S(-27, 34),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(30, -103), S(109, -46),  S(55, 36),    S(-22, -8),  S(-8, 90),
          S(80, 25),   S(69, 90),    S(171, -92),  S(-88, 40),  S(132, 32),
          S(-32, 94),  S(29, 76),    S(-60, 94),   S(-55, 111), S(121, 95),
          S(-2, 32),   S(-140, 69),  S(-21, 63),   S(-50, 86),  S(-70, 102),
          S(57, 74),   S(19, 112),   S(23, 109),   S(41, 58),   S(2, 5),
          S(-110, 90), S(-105, 99),  S(-224, 127), S(-96, 118), S(-67, 122),
          S(-69, 101), S(-95, 80),   S(-137, 37),  S(-12, 57),  S(-109, 94),
          S(-92, 98),  S(-151, 113), S(-97, 92),   S(-91, 81),  S(-119, 59),
          S(20, 27),   S(27, 49),    S(-44, 71),   S(-93, 90),  S(-62, 81),
          S(-50, 74),  S(-7, 59),    S(-21, 37),   S(77, -4),   S(30, 28),
          S(38, 41),   S(-8, 53),    S(0, 53),     S(14, 48),   S(69, 31),
          S(78, 4),    S(51, 4),     S(100, -4),   S(79, 6),    S(2, 44),
          S(68, 9),    S(28, 20),    S(107, -11),  S(100, -38),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),  S(-7, 11), S(-6, 15),   S(-12, 49),
          S(3, 78), S(3, 129), S(-17, 178), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(0, 0),    S(0, -32),   S(-4, -19), S(-4, -36),
          S(26, -69), S(-70, -84), S(0, 0),    S(0, 0),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(0, 0),    S(-12, -3), S(-17, -13), S(-16, -10),
          S(-5, -22), S(10, -28), S(38, -30),  S(0, 0),
    };
    const Score backwardPawnRankBonus[8] = {
          S(0, 0),   S(-12, -5), S(-3, -7), S(-7, -5),
          S(-13, 3), S(0, 0),    S(0, 0),   S(0, 0),
    };
    const Score KnightMobilityScore[9] = {
          S(-15, 3), S(7, 35),  S(15, 70), S(26, 70), S(33, 80),
          S(38, 88), S(46, 85), S(53, 82), S(56, 65),
    };
    const Score BishopMobilityScore[14] = {
          S(-16, -29), S(-7, 14), S(6, 34),   S(14, 50), S(24, 61),
          S(28, 75),   S(30, 80), S(35, 82),  S(36, 85), S(40, 88),
          S(50, 77),   S(67, 66), S(104, 59), S(51, 62),
    };
    const Score RookMobilityScore[15] = {
          S(-33, -4), S(-9, 55),  S(1, 58),   S(4, 67),   S(8, 71),
          S(9, 81),   S(13, 86),  S(19, 96),  S(24, 101), S(30, 104),
          S(36, 106), S(41, 111), S(46, 114), S(48, 114), S(41, 116),
    };
    const Score QueenMobilityScore[28] = {
          S(61, 2),    S(-126, -11), S(-141, -2),  S(-111, -27), S(-109, 72),
          S(-113, 99), S(-115, 141), S(-105, 143), S(-102, 155), S(-97, 155),
          S(-90, 157), S(-88, 159),  S(-83, 160),  S(-85, 170),  S(-84, 177),
          S(-87, 186), S(-86, 190),  S(-87, 204),  S(-77, 192),  S(-76, 189),
          S(-52, 183), S(-16, 135),  S(-22, 123),  S(-3, 165),   S(153, 35),
          S(146, 22),  S(111, 22),   S(140, 76),
    };
};
#endif // WEIGHTS_H_
