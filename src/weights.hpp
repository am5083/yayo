#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"
constexpr Score pawnScore = S(83, 130);
constexpr Score knightScore = S(371, 429);
constexpr Score bishopScore = S(389, 422);
constexpr Score rookScore = S(519, 685);
constexpr Score queenScore = S(1127, 1347);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),      S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),    S(0, 0),     S(19, 125), S(-5, 108),
      S(-38, 120),  S(16, 55),  S(-14, 50),  S(-13, 46), S(-132, 129),
      S(-103, 130), S(8, 112),  S(-11, 115), S(25, 59),  S(23, 2),
      S(46, -6),    S(101, 33), S(79, 71),   S(14, 87),  S(-13, 53),
      S(-9, 32),    S(6, 22),   S(11, -8),   S(38, -3),  S(31, 2),
      S(22, 20),    S(19, 21),  S(-19, 26),  S(-17, 26), S(0, 7),
      S(14, -3),    S(13, -2),  S(13, 5),    S(0, 13),   S(2, 4),
      S(-12, 22),   S(-9, 19),  S(3, 12),    S(9, 7),    S(29, 10),
      S(23, 9),     S(33, 5),   S(16, 1),    S(-6, 24),  S(-9, 23),
      S(6, 14),     S(7, 20),   S(15, 29),   S(47, 10),  S(43, 5),
      S(10, 2),     S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),    S(0, 0),     S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-155, -44), S(-117, -42), S(-48, -10),   S(3, -1),    S(59, -33),
      S(-93, -31),  S(-22, -26),  S(-111, -118), S(-32, 1),   S(9, -9),
      S(29, -17),   S(69, -19),   S(70, -12),    S(113, -34), S(34, -3),
      S(65, -27),   S(-16, 4),    S(51, -21),    S(46, 25),   S(86, 29),
      S(110, 20),   S(143, 8),    S(93, -34),    S(34, -40),  S(-4, 21),
      S(15, 23),    S(39, 49),    S(73, 40),     S(55, 45),   S(79, 41),
      S(46, 20),    S(74, -9),    S(-4, 14),     S(4, 17),    S(20, 42),
      S(41, 37),    S(43, 42),    S(42, 33),     S(62, 8),    S(18, 14),
      S(-18, -16),  S(-8, 4),     S(10, 15),     S(14, 32),   S(38, 26),
      S(24, 1),     S(25, -7),    S(16, -16),    S(-45, 6),   S(-34, 21),
      S(-8, -14),   S(12, 5),     S(21, 9),      S(24, -2),   S(7, -29),
      S(4, -19),    S(-81, -33),  S(-16, -17),   S(-38, 10),  S(6, -3),
      S(14, 1),     S(0, -13),    S(5, -17),     S(-44, 4),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-4, -5),   S(-56, -2),  S(-83, 1),  S(-61, -9), S(-34, 11), S(-31, -8),
      S(-31, -10), S(-45, -27), S(-19, -3), S(4, -18),  S(-11, 14), S(-38, 14),
      S(-8, 0),    S(32, -11),  S(27, -13), S(-9, -14), S(-2, 25),  S(8, 1),
      S(11, 9),    S(29, 10),   S(50, -1),  S(84, 3),   S(57, -7),  S(41, 8),
      S(-27, 13),  S(12, 10),   S(28, 2),   S(56, 5),   S(45, 9),   S(27, 8),
      S(7, 9),     S(-19, 14),  S(-10, 5),  S(-13, 17), S(7, 13),   S(36, 16),
      S(26, 5),    S(1, 15),    S(-10, 13), S(15, -7),  S(0, 4),    S(21, 8),
      S(10, 8),    S(16, 9),    S(22, 17),  S(25, 2),   S(22, -4),  S(15, -14),
      S(15, 9),    S(8, -5),    S(27, -17), S(-4, 7),   S(9, 6),    S(35, -11),
      S(29, -4),   S(24, 0),    S(-5, -8),  S(40, 3),   S(11, 13),  S(7, 9),
      S(-11, -8),  S(6, 16),    S(31, -18), S(1, -9),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(49, 14),  S(31, 22),  S(31, 42), S(38, 43),  S(78, 35),  S(60, 26),
      S(66, 22),  S(95, 13),  S(2, 28),  S(-6, 36),  S(24, 47),  S(59, 30),
      S(39, 22),  S(85, 14),  S(60, -1), S(90, 3),   S(3, 15),   S(32, 31),
      S(25, 24),  S(52, 10),  S(60, 22), S(97, -10), S(132, 1),  S(94, -14),
      S(-31, 26), S(9, 16),   S(-3, 34), S(4, 27),   S(17, -1),  S(23, 2),
      S(61, -9),  S(42, -11), S(-32, 6), S(-48, 20), S(-33, 35), S(-32, 15),
      S(-15, 16), S(-33, 17), S(14, -5), S(-2, -6),  S(-48, 10), S(-47, 15),
      S(-32, -2), S(-38, 7),  S(-20, 9), S(-21, -1), S(41, -29), S(3, -8),
      S(-35, 0),  S(-36, -3), S(-11, 7), S(-8, -7),  S(-2, -12), S(10, -20),
      S(30, -39), S(-45, 3),  S(-23, 2), S(-19, 5),  S(-4, 3),   S(5, -7),
      S(9, -17),  S(2, -12),  S(5, -3),  S(-30, -7),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-37, 18), S(-27, 1),   S(8, 52),   S(18, 70),  S(23, 63),   S(41, 59),
      S(96, 15),  S(71, 19),   S(-8, 8),   S(-54, 29), S(-15, 82),  S(-21, 77),
      S(-8, 111), S(21, 61),   S(27, 59),  S(92, 23),  S(1, 20),    S(-38, 45),
      S(-15, 39), S(-3, 69),   S(30, 85),  S(80, 70),  S(73, 44),   S(62, 55),
      S(-29, 29), S(-35, 57),  S(-21, 38), S(-22, 67), S(-13, 94),  S(4, 83),
      S(22, 89),  S(14, 71),   S(-12, 0),  S(-39, 54), S(-42, 62),  S(-17, 56),
      S(-18, 65), S(-23, 80),  S(1, 37),   S(1, 52),   S(-13, -13), S(-11, 30),
      S(-16, 28), S(-21, 35),  S(-19, 57), S(5, 23),   S(10, 27),   S(15, 38),
      S(1, -12),  S(-20, -21), S(4, -20),  S(8, -9),   S(6, -10),   S(19, -37),
      S(20, -45), S(44, -65),  S(-4, -36), S(-12, -2), S(19, -52),  S(23, -21),
      S(10, -6),  S(-5, -30),  S(15, -44), S(-21, 2),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-93, -132), S(-12, -56), S(19, -29),   S(-42, -24), S(-82, -37),
      S(-30, 8),    S(2, -8),    S(-12, -109), S(-41, -17), S(2, 15),
      S(-54, 8),    S(11, 32),   S(17, 42),    S(15, 36),   S(10, 25),
      S(19, -5),    S(-93, -12), S(19, 25),    S(-33, 48),  S(-5, 60),
      S(-6, 60),    S(27, 58),   S(59, 44),    S(-23, -2),  S(-29, -19),
      S(-48, 17),   S(-88, 55),  S(-140, 81),  S(-117, 85), S(-63, 67),
      S(-71, 47),   S(-103, 17), S(-105, -33), S(-74, 5),   S(-139, 52),
      S(-127, 66),  S(-174, 79), S(-133, 56),  S(-117, 29), S(-162, -1),
      S(-62, -29),  S(-27, -5),  S(-119, 30),  S(-149, 49), S(-147, 51),
      S(-138, 37),  S(-71, 10),  S(-85, -11),  S(49, -46),  S(-9, -18),
      S(-41, 2),    S(-86, 16),  S(-72, 16),   S(-62, 14),  S(10, -17),
      S(23, -43),   S(48, -117), S(86, -91),   S(66, -60),  S(-75, -31),
      S(6, -50),    S(-43, -33), S(61, -79),   S(55, -127),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),  S(-6, 7),   S(-4, 11),  S(-8, 39),
      S(7, 77), S(28, 139), S(98, 209), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(-10, -10), S(-6, -31),  S(-16, -18), S(-10, -33),
      S(20, -70),  S(-44, -67), S(-10, -10), S(-10, -10),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(-6, -6),  S(-21, -6), S(-25, -14), S(-18, -7),
      S(-2, -23), S(15, -49), S(-20, 0),   S(-6, -6),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(-15, -15), S(-14, -10), S(-3, -6),   S(-7, -5),
      S(-17, -3),  S(-15, -15), S(-15, -15), S(-15, -15),
};
constexpr Score KnightMobilityScore[9] = {
      S(-51, -45), S(-35, -2), S(-16, 10), S(-5, 30), S(5, 42),
      S(12, 50),   S(28, 46),  S(38, 42),  S(46, 21),
};
constexpr Score BishopMobilityScore[14] = {
      S(-33, -26), S(3, -11), S(17, 22),  S(29, 52),  S(44, 61),
      S(50, 73),   S(60, 81), S(66, 87),  S(67, 91),  S(77, 89),
      S(86, 86),   S(76, 97), S(109, 75), S(123, 85),
};
constexpr Score RookMobilityScore[15] = {
      S(-19, 31), S(-11, 58), S(-3, 79),  S(5, 97),   S(5, 113),
      S(10, 122), S(18, 132), S(30, 132), S(38, 140), S(52, 152),
      S(65, 148), S(70, 161), S(76, 162), S(66, 165), S(81, 167),
};
constexpr Score QueenMobilityScore[28] = {
      S(-76, -95), S(-39, -54), S(-2, -32),  S(-7, 24),   S(17, 82),
      S(34, 54),   S(33, 121),  S(45, 115),  S(51, 126),  S(57, 146),
      S(67, 141),  S(69, 157),  S(71, 168),  S(64, 180),  S(72, 186),
      S(71, 197),  S(64, 214),  S(63, 211),  S(83, 200),  S(90, 196),
      S(106, 195), S(150, 186), S(139, 179), S(177, 190), S(120, 177),
      S(114, 184), S(147, 221), S(95, 196),
};

struct EvalWeights {
    const Score pawnScore = S(83, 130);
    const Score knightScore = S(371, 429);
    const Score bishopScore = S(389, 422);
    const Score rookScore = S(519, 685);
    const Score queenScore = S(1127, 1347);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),      S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),    S(0, 0),     S(19, 125), S(-5, 108),
          S(-38, 120),  S(16, 55),  S(-14, 50),  S(-13, 46), S(-132, 129),
          S(-103, 130), S(8, 112),  S(-11, 115), S(25, 59),  S(23, 2),
          S(46, -6),    S(101, 33), S(79, 71),   S(14, 87),  S(-13, 53),
          S(-9, 32),    S(6, 22),   S(11, -8),   S(38, -3),  S(31, 2),
          S(22, 20),    S(19, 21),  S(-19, 26),  S(-17, 26), S(0, 7),
          S(14, -3),    S(13, -2),  S(13, 5),    S(0, 13),   S(2, 4),
          S(-12, 22),   S(-9, 19),  S(3, 12),    S(9, 7),    S(29, 10),
          S(23, 9),     S(33, 5),   S(16, 1),    S(-6, 24),  S(-9, 23),
          S(6, 14),     S(7, 20),   S(15, 29),   S(47, 10),  S(43, 5),
          S(10, 2),     S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),    S(0, 0),     S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-155, -44), S(-117, -42), S(-48, -10),   S(3, -1),    S(59, -33),
          S(-93, -31),  S(-22, -26),  S(-111, -118), S(-32, 1),   S(9, -9),
          S(29, -17),   S(69, -19),   S(70, -12),    S(113, -34), S(34, -3),
          S(65, -27),   S(-16, 4),    S(51, -21),    S(46, 25),   S(86, 29),
          S(110, 20),   S(143, 8),    S(93, -34),    S(34, -40),  S(-4, 21),
          S(15, 23),    S(39, 49),    S(73, 40),     S(55, 45),   S(79, 41),
          S(46, 20),    S(74, -9),    S(-4, 14),     S(4, 17),    S(20, 42),
          S(41, 37),    S(43, 42),    S(42, 33),     S(62, 8),    S(18, 14),
          S(-18, -16),  S(-8, 4),     S(10, 15),     S(14, 32),   S(38, 26),
          S(24, 1),     S(25, -7),    S(16, -16),    S(-45, 6),   S(-34, 21),
          S(-8, -14),   S(12, 5),     S(21, 9),      S(24, -2),   S(7, -29),
          S(4, -19),    S(-81, -33),  S(-16, -17),   S(-38, 10),  S(6, -3),
          S(14, 1),     S(0, -13),    S(5, -17),     S(-44, 4),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-4, -5),  S(-56, -2),  S(-83, 1),   S(-61, -9), S(-34, 11),
          S(-31, -8), S(-31, -10), S(-45, -27), S(-19, -3), S(4, -18),
          S(-11, 14), S(-38, 14),  S(-8, 0),    S(32, -11), S(27, -13),
          S(-9, -14), S(-2, 25),   S(8, 1),     S(11, 9),   S(29, 10),
          S(50, -1),  S(84, 3),    S(57, -7),   S(41, 8),   S(-27, 13),
          S(12, 10),  S(28, 2),    S(56, 5),    S(45, 9),   S(27, 8),
          S(7, 9),    S(-19, 14),  S(-10, 5),   S(-13, 17), S(7, 13),
          S(36, 16),  S(26, 5),    S(1, 15),    S(-10, 13), S(15, -7),
          S(0, 4),    S(21, 8),    S(10, 8),    S(16, 9),   S(22, 17),
          S(25, 2),   S(22, -4),   S(15, -14),  S(15, 9),   S(8, -5),
          S(27, -17), S(-4, 7),    S(9, 6),     S(35, -11), S(29, -4),
          S(24, 0),   S(-5, -8),   S(40, 3),    S(11, 13),  S(7, 9),
          S(-11, -8), S(6, 16),    S(31, -18),  S(1, -9),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(49, 14),  S(31, 22),  S(31, 42), S(38, 43),  S(78, 35),  S(60, 26),
          S(66, 22),  S(95, 13),  S(2, 28),  S(-6, 36),  S(24, 47),  S(59, 30),
          S(39, 22),  S(85, 14),  S(60, -1), S(90, 3),   S(3, 15),   S(32, 31),
          S(25, 24),  S(52, 10),  S(60, 22), S(97, -10), S(132, 1),  S(94, -14),
          S(-31, 26), S(9, 16),   S(-3, 34), S(4, 27),   S(17, -1),  S(23, 2),
          S(61, -9),  S(42, -11), S(-32, 6), S(-48, 20), S(-33, 35), S(-32, 15),
          S(-15, 16), S(-33, 17), S(14, -5), S(-2, -6),  S(-48, 10), S(-47, 15),
          S(-32, -2), S(-38, 7),  S(-20, 9), S(-21, -1), S(41, -29), S(3, -8),
          S(-35, 0),  S(-36, -3), S(-11, 7), S(-8, -7),  S(-2, -12), S(10, -20),
          S(30, -39), S(-45, 3),  S(-23, 2), S(-19, 5),  S(-4, 3),   S(5, -7),
          S(9, -17),  S(2, -12),  S(5, -3),  S(-30, -7),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-37, 18),  S(-27, 1),  S(8, 52),   S(18, 70),  S(23, 63),
          S(41, 59),   S(96, 15),  S(71, 19),  S(-8, 8),   S(-54, 29),
          S(-15, 82),  S(-21, 77), S(-8, 111), S(21, 61),  S(27, 59),
          S(92, 23),   S(1, 20),   S(-38, 45), S(-15, 39), S(-3, 69),
          S(30, 85),   S(80, 70),  S(73, 44),  S(62, 55),  S(-29, 29),
          S(-35, 57),  S(-21, 38), S(-22, 67), S(-13, 94), S(4, 83),
          S(22, 89),   S(14, 71),  S(-12, 0),  S(-39, 54), S(-42, 62),
          S(-17, 56),  S(-18, 65), S(-23, 80), S(1, 37),   S(1, 52),
          S(-13, -13), S(-11, 30), S(-16, 28), S(-21, 35), S(-19, 57),
          S(5, 23),    S(10, 27),  S(15, 38),  S(1, -12),  S(-20, -21),
          S(4, -20),   S(8, -9),   S(6, -10),  S(19, -37), S(20, -45),
          S(44, -65),  S(-4, -36), S(-12, -2), S(19, -52), S(23, -21),
          S(10, -6),   S(-5, -30), S(15, -44), S(-21, 2),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-93, -132), S(-12, -56), S(19, -29),   S(-42, -24), S(-82, -37),
          S(-30, 8),    S(2, -8),    S(-12, -109), S(-41, -17), S(2, 15),
          S(-54, 8),    S(11, 32),   S(17, 42),    S(15, 36),   S(10, 25),
          S(19, -5),    S(-93, -12), S(19, 25),    S(-33, 48),  S(-5, 60),
          S(-6, 60),    S(27, 58),   S(59, 44),    S(-23, -2),  S(-29, -19),
          S(-48, 17),   S(-88, 55),  S(-140, 81),  S(-117, 85), S(-63, 67),
          S(-71, 47),   S(-103, 17), S(-105, -33), S(-74, 5),   S(-139, 52),
          S(-127, 66),  S(-174, 79), S(-133, 56),  S(-117, 29), S(-162, -1),
          S(-62, -29),  S(-27, -5),  S(-119, 30),  S(-149, 49), S(-147, 51),
          S(-138, 37),  S(-71, 10),  S(-85, -11),  S(49, -46),  S(-9, -18),
          S(-41, 2),    S(-86, 16),  S(-72, 16),   S(-62, 14),  S(10, -17),
          S(23, -43),   S(48, -117), S(86, -91),   S(66, -60),  S(-75, -31),
          S(6, -50),    S(-43, -33), S(61, -79),   S(55, -127),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),  S(-6, 7),   S(-4, 11),  S(-8, 39),
          S(7, 77), S(28, 139), S(98, 209), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(-10, -10), S(-6, -31),  S(-16, -18), S(-10, -33),
          S(20, -70),  S(-44, -67), S(-10, -10), S(-10, -10),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(-6, -6),  S(-21, -6), S(-25, -14), S(-18, -7),
          S(-2, -23), S(15, -49), S(-20, 0),   S(-6, -6),
    };
    const Score backwardPawnRankBonus[8] = {
          S(-15, -15), S(-14, -10), S(-3, -6),   S(-7, -5),
          S(-17, -3),  S(-15, -15), S(-15, -15), S(-15, -15),
    };
    const Score KnightMobilityScore[9] = {
          S(-51, -45), S(-35, -2), S(-16, 10), S(-5, 30), S(5, 42),
          S(12, 50),   S(28, 46),  S(38, 42),  S(46, 21),
    };
    const Score BishopMobilityScore[14] = {
          S(-33, -26), S(3, -11), S(17, 22),  S(29, 52),  S(44, 61),
          S(50, 73),   S(60, 81), S(66, 87),  S(67, 91),  S(77, 89),
          S(86, 86),   S(76, 97), S(109, 75), S(123, 85),
    };
    const Score RookMobilityScore[15] = {
          S(-19, 31), S(-11, 58), S(-3, 79),  S(5, 97),   S(5, 113),
          S(10, 122), S(18, 132), S(30, 132), S(38, 140), S(52, 152),
          S(65, 148), S(70, 161), S(76, 162), S(66, 165), S(81, 167),
    };
    const Score QueenMobilityScore[28] = {
          S(-76, -95), S(-39, -54), S(-2, -32),  S(-7, 24),   S(17, 82),
          S(34, 54),   S(33, 121),  S(45, 115),  S(51, 126),  S(57, 146),
          S(67, 141),  S(69, 157),  S(71, 168),  S(64, 180),  S(72, 186),
          S(71, 197),  S(64, 214),  S(63, 211),  S(83, 200),  S(90, 196),
          S(106, 195), S(150, 186), S(139, 179), S(177, 190), S(120, 177),
          S(114, 184), S(147, 221), S(95, 196),
    };
};
#endif // WEIGHTS_H_
