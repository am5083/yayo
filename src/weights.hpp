#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"
constexpr Score pawnScore = S(99, 134);
constexpr Score knightScore = S(381, 418);
constexpr Score bishopScore = S(393, 418);
constexpr Score rookScore = S(537, 684);
constexpr Score queenScore = S(1120, 1360);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),      S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),    S(0, 0),    S(-1, 125), S(25, 108),
      S(-41, 120),  S(2, 58),   S(-45, 62), S(8, 45),   S(-129, 118),
      S(-139, 147), S(5, 113),  S(6, 91),   S(-1, 65),  S(26, -12),
      S(40, -9),    S(75, 9),   S(39, 86),  S(9, 65),   S(-31, 56),
      S(-22, 34),   S(-7, 18),  S(-7, -3),  S(24, -7),  S(24, 0),
      S(7, 14),     S(14, 13),  S(-39, 27), S(-26, 17), S(-16, 4),
      S(-2, -11),   S(0, -8),   S(2, -3),   S(-5, 2),   S(-10, -3),
      S(-26, 24),   S(-19, 15), S(-11, 8),  S(-4, 11),  S(10, 11),
      S(6, 6),      S(22, 4),   S(2, -2),   S(-21, 26), S(-19, 18),
      S(-11, 14),   S(2, 15),   S(5, 24),   S(34, 4),   S(40, -3),
      S(0, -6),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),    S(0, 0),    S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-175, -55), S(-129, -49), S(-59, -28),   S(-38, -25), S(29, -29),
      S(-57, -36),  S(-61, -44),  S(-109, -116), S(-9, -21),  S(-15, 8),
      S(29, -10),   S(54, 6),     S(75, -5),     S(103, -19), S(17, 0),
      S(56, -46),   S(-31, 10),   S(47, -17),    S(41, 28),   S(62, 24),
      S(116, 5),    S(131, -23),  S(72, -9),     S(60, -23),  S(7, 13),
      S(19, 14),    S(36, 46),    S(65, 42),     S(37, 45),   S(65, 43),
      S(28, 15),    S(57, 11),    S(-9, 6),      S(7, -6),    S(17, 41),
      S(28, 28),    S(40, 44),    S(28, 31),     S(66, -10),  S(7, 7),
      S(-12, -29),  S(-10, -12),  S(1, 8),       S(-3, 36),   S(17, 21),
      S(11, 0),     S(20, -25),   S(4, -25),     S(-53, 11),  S(-34, 15),
      S(-24, 2),    S(5, 8),      S(19, -2),     S(23, -20),  S(-1, -13),
      S(0, -27),    S(-103, -37), S(-7, -38),    S(-26, -22), S(-1, -10),
      S(8, -20),    S(-7, -2),    S(-1, -20),    S(-50, -30),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-3, -12), S(-59, 22), S(-82, -4), S(-89, -7), S(-61, 9),  S(-73, 6),
      S(5, -12),  S(-42, 7),  S(-4, -4),  S(0, 5),    S(-31, 14), S(3, 2),
      S(12, 3),   S(8, -27),  S(20, 12),  S(-1, 7),   S(6, 14),   S(39, -7),
      S(45, -1),  S(39, 13),  S(39, 9),   S(77, 17),  S(39, 13),  S(43, 8),
      S(-9, 13),  S(18, 5),   S(21, 16),  S(55, 19),  S(38, 20),  S(30, 19),
      S(10, 25),  S(-17, 20), S(-19, 8),  S(-3, 7),   S(14, 27),  S(43, 11),
      S(38, 20),  S(7, 24),   S(-13, 27), S(19, 0),   S(-1, 25),  S(27, 17),
      S(26, 4),   S(22, 16),  S(30, 23),  S(26, 20),  S(34, 1),   S(24, -4),
      S(6, 22),   S(10, 9),   S(35, -1),  S(4, 14),   S(23, 9),   S(46, 3),
      S(41, 7),   S(8, 18),   S(13, 4),   S(31, 23),  S(27, 1),   S(-4, 23),
      S(-15, 17), S(15, 9),   S(7, -14),  S(5, -7),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(39, 17),  S(42, 28),   S(27, 42),  S(34, 34),  S(72, 28),  S(42, 43),
      S(55, 22),  S(88, 12),   S(17, 10),  S(0, 30),   S(7, 48),   S(42, 30),
      S(34, 28),  S(90, 22),   S(60, 14),  S(86, -4),  S(-1, 14),  S(17, 31),
      S(19, 13),  S(34, 27),   S(71, 3),   S(91, -21), S(93, 8),   S(85, -15),
      S(-10, 38), S(25, 13),   S(6, 27),   S(-3, 31),  S(19, -5),  S(14, -6),
      S(51, -3),  S(45, -11),  S(-51, 29), S(-44, 16), S(-8, 18),  S(-23, 14),
      S(-11, 1),  S(-22, 5),   S(-5, 23),  S(-25, -4), S(-25, 17), S(-18, 4),
      S(-21, -6), S(-15, 2),   S(-13, 5),  S(-6, -9),  S(48, -37), S(-23, -8),
      S(-59, 9),  S(-12, 8),   S(-11, -3), S(4, 0),    S(11, -2),  S(-3, -5),
      S(24, -31), S(-50, -18), S(-23, -3), S(-9, -9),  S(-1, 1),   S(7, -5),
      S(6, -10),  S(-3, -8),   S(6, -12),  S(-35, -8),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-25, 16),  S(-7, 33),   S(-3, 36),   S(32, 62),   S(37, 32),
      S(60, 18),   S(53, 29),   S(39, 45),   S(-34, 8),   S(-66, 30),
      S(-35, 53),  S(-45, 87),  S(-32, 98),  S(16, 31),   S(-1, 38),
      S(88, 15),   S(-30, 38),  S(-45, 32),  S(-23, 39),  S(-30, 97),
      S(26, 92),   S(81, 36),   S(91, -4),   S(76, 48),   S(-42, 21),
      S(-24, 46),  S(-21, 53),  S(-34, 53),  S(-23, 95),  S(-3, 64),
      S(10, 89),   S(14, 59),   S(-23, -9),  S(-43, 26),  S(-31, 52),
      S(-39, 85),  S(-27, 56),  S(-30, 69),  S(-14, 70),  S(-2, 45),
      S(-23, -15), S(-18, 15),  S(-25, 29),  S(-29, 37),  S(-27, 54),
      S(-7, 29),   S(2, 2),     S(10, 18),   S(-1, -14),  S(-19, -14),
      S(-4, -6),   S(8, -19),   S(2, 5),     S(11, -38),  S(11, -37),
      S(41, -59),  S(-17, -20), S(-15, -37), S(8, -47),   S(21, -30),
      S(16, -18),  S(-18, -17), S(-16, -37), S(-25, -14),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-49, -122), S(26, -48),  S(-7, -48),   S(-6, -29),  S(-49, -3),
      S(-7, -10),   S(-1, -9),   S(-14, -106), S(-39, -36), S(-34, 25),
      S(-90, 23),   S(0, 6),     S(-21, 42),   S(17, 58),   S(43, 56),
      S(27, 18),    S(-90, 10),  S(-15, 23),   S(-50, 53),  S(-5, 69),
      S(-4, 69),    S(53, 57),   S(30, 58),    S(11, 17),   S(-18, -31),
      S(-11, 9),    S(-48, 60),  S(-138, 76),  S(-88, 76),  S(-99, 77),
      S(-86, 58),   S(-97, 21),  S(-105, -6),  S(-65, 4),   S(-132, 49),
      S(-154, 73),  S(-145, 80), S(-132, 64),  S(-102, 37), S(-152, 5),
      S(-69, -27),  S(-60, 4),   S(-82, 24),   S(-156, 57), S(-148, 52),
      S(-137, 41),  S(-73, 11),  S(-104, -10), S(34, -61),  S(-15, -10),
      S(-41, 12),   S(-67, 10),  S(-92, 26),   S(-54, 13),  S(8, -15),
      S(8, -37),    S(33, -78),  S(81, -79),   S(60, -57),  S(-82, -33),
      S(-3, -43),   S(-44, -21), S(48, -67),   S(44, -115),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),   S(-7, 3),   S(-3, 6),   S(-15, 43),
      S(-2, 75), S(23, 140), S(77, 202), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(-10, -10), S(-11, -28), S(-16, -19), S(-15, -49),
      S(-15, -35), S(-41, -72), S(-10, -10), S(-10, -10),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(-6, -6), S(-16, -6), S(-22, -16), S(-19, -7),
      S(2, -27), S(14, -40), S(-21, -9),  S(-6, -6),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(-15, -15), S(-17, -11), S(-5, -7),   S(-10, 0),
      S(-16, 1),   S(-15, -15), S(-15, -15), S(-15, -15),
};
constexpr Score KnightMobilityScore[9] = {
      S(-53, -39), S(-29, 0), S(-12, 25), S(-4, 41), S(11, 50),
      S(24, 54),   S(30, 56), S(47, 39),  S(36, 39),
};
constexpr Score BishopMobilityScore[14] = {
      S(-26, -34), S(0, -8),  S(18, 21),  S(29, 34),  S(43, 52),
      S(49, 65),   S(55, 77), S(58, 79),  S(60, 82),  S(69, 82),
      S(87, 75),   S(63, 82), S(101, 39), S(115, 82),
};
constexpr Score RookMobilityScore[15] = {
      S(-33, 40), S(-32, 87), S(-15, 82), S(-10, 101), S(-5, 101),
      S(0, 115),  S(9, 127),  S(16, 136), S(32, 136),  S(40, 137),
      S(58, 142), S(58, 157), S(68, 151), S(62, 152),  S(61, 170),
};
constexpr Score QueenMobilityScore[28] = {
      S(-91, -113), S(-38, -52), S(18, -28),  S(-5, 22),   S(2, 53),
      S(11, 53),    S(22, 89),   S(23, 130),  S(35, 130),  S(48, 123),
      S(50, 128),   S(59, 134),  S(56, 161),  S(57, 163),  S(68, 163),
      S(65, 180),   S(62, 200),  S(57, 197),  S(74, 195),  S(96, 193),
      S(105, 190),  S(152, 180), S(113, 181), S(162, 183), S(117, 171),
      S(134, 162),  S(102, 226), S(100, 202),
};

struct EvalWeights {
    const Score pawnScore = S(94, 125);
    const Score knightScore = S(381, 418);
    const Score bishopScore = S(396, 414);
    const Score rookScore = S(532, 695);
    const Score queenScore = S(1132, 1341);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0),
    };
    const Score backwardPawnRankBonus[8] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0),
    };
    const Score KnightMobilityScore[9] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0),
    };
    const Score BishopMobilityScore[14] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
    };
    const Score RookMobilityScore[15] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
    };
    const Score QueenMobilityScore[28] = {
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
          S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
    };
};
#endif // WEIGHTS_H_
