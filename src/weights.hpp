#ifndef WEIGHTS_H_
#define WEIGHTS_H_

#include "util.hpp"
namespace Yayo {

constexpr Score pawnScore = S(36, 41);
constexpr Score knightScore = S(80, 40);
constexpr Score bishopScore = S(90, 44);
constexpr Score rookScore = S(51, 66);
constexpr Score queenScore = S(68, 155);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),    S(0, 0),     S(8, 78),    S(-17, 66), S(7, 59),   S(18, 55),
      S(9, 8),    S(-32, 83),  S(-23, 64),  S(-71, 82), S(-16, 39), S(3, 37),
      S(-31, 30), S(18, -1),   S(-45, 25),  S(9, -5),   S(1, 16),   S(-6, 12),
      S(-30, 26), S(-10, 14),  S(-1, 17),   S(-9, 24),  S(-5, 16),  S(1, -1),
      S(-22, 26), S(-9, 13),   S(3, -7),    S(-10, 16), S(-1, 15),  S(-7, -9),
      S(15, 9),   S(-1, 5),    S(-12, -12), S(-26, 12), S(-2, 7),   S(-10, 1),
      S(10, 14),  S(1, -5),    S(20, 15),   S(-15, -7), S(-19, 0),  S(-5, -7),
      S(-3, -4),  S(-11, -12), S(2, 20),    S(-21, 10), S(29, -5),  S(18, -4),
      S(4, -7),   S(-1, 3),    S(0, 0),     S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(91, -50), S(68, 20),  S(38, 50),   S(70, 35),  S(28, 65), S(29, 49),
      S(13, 88),  S(1, 127),  S(28, 19),   S(57, 43),  S(76, 61), S(46, 48),
      S(37, 70),  S(60, 64),  S(53, 54),   S(50, 65),  S(34, 50), S(60, 78),
      S(62, 47),  S(93, 54),  S(70, 56),   S(56, 63),  S(83, 39), S(48, 73),
      S(48, 43),  S(43, 44),  S(66, 55),   S(65, 44),  S(65, 57), S(65, 49),
      S(56, 66),  S(82, 98),  S(55, 47),   S(45, 22),  S(59, 42), S(50, 63),
      S(81, 44),  S(36, 77),  S(84, 49),   S(78, 55),  S(49, 38), S(50, 37),
      S(47, 49),  S(24, 57),  S(66, 31),   S(48, 64),  S(66, 32), S(60, 21),
      S(88, -10), S(48, -24), S(13, 66),   S(33, 20),  S(59, 49), S(87, 20),
      S(37, 51),  S(27, -3),  S(-66, -90), S(24, 55),  S(49, 18), S(21, 4),
      S(76, 11),  S(25, -1),  S(26, -2),   S(-49, 83),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-15, -34), S(-13, 15), S(-22, 42),  S(-37, 26),  S(-41, 17), S(-36, -2),
      S(-58, 25),  S(-31, 41), S(1, 41),    S(13, 27),   S(-24, -5), S(-32, 37),
      S(-20, 1),   S(-20, 26), S(-58, 35),  S(-36, -16), S(-14, 19), S(10, 15),
      S(-27, 27),  S(-6, 33),  S(-35, 12),  S(-27, 18),  S(-8, 21),  S(15, 23),
      S(-33, -8),  S(14, 17),  S(3, 16),    S(9, 43),    S(1, 2),    S(12, 30),
      S(-13, 19),  S(6, 5),    S(-42, 10),  S(4, 30),    S(-7, 42),  S(16, 42),
      S(-14, 29),  S(6, 40),   S(4, 18),    S(-34, -23), S(-26, 33), S(-34, 7),
      S(19, 26),   S(1, 30),   S(21, 20),   S(-33, 25),  S(-5, -13), S(20, 2),
      S(-4, 20),   S(24, 26),  S(18, -5),   S(12, 15),   S(19, 24),  S(-21, 2),
      S(32, 3),    S(17, -7),  S(-12, -18), S(4, 24),    S(-2, 37),  S(-33, 24),
      S(-35, 19),  S(-1, 16),  S(24, -17),  S(-28, -77),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(35, 80),  S(-29, 90), S(-21, 98), S(-6, 102), S(-70, 104), S(-54, 97),
      S(40, 66),  S(29, 92),  S(8, 97),   S(-13, 95), S(0, 82),    S(22, 106),
      S(3, 80),   S(26, 54),  S(21, 83),  S(22, 83),  S(7, 90),    S(-4, 85),
      S(8, 77),   S(42, 68),  S(24, 71),  S(-2, 88),  S(37, 86),   S(6, 81),
      S(11, 90),  S(19, 71),  S(-3, 73),  S(17, 75),  S(28, 65),   S(-14, 82),
      S(44, 85),  S(31, 83),  S(-19, 71), S(1, 87),   S(-6, 62),   S(6, 63),
      S(13, 64),  S(23, 49),  S(15, 45),  S(-12, 81), S(-19, 79),  S(7, 84),
      S(-1, 59),  S(-3, 64),  S(11, 60),  S(24, 61),  S(36, 60),   S(27, 80),
      S(-18, 74), S(-21, 65), S(28, 76),  S(39, 67),  S(-28, 64),  S(13, 51),
      S(-8, 45),  S(-7, -19), S(27, 55),  S(23, 47),  S(4, 74),    S(34, 56),
      S(38, 56),  S(30, 53),  S(44, 49),  S(48, 65),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-30, 125), S(-26, 82),  S(-39, 126), S(-101, 151), S(-60, 125),
      S(-42, 86),  S(2, 90),    S(-57, 144), S(-43, 97),   S(-21, 69),
      S(2, 102),   S(-33, 132), S(11, 31),   S(-20, 108),  S(-35, 84),
      S(5, 81),    S(-37, 75),  S(-26, 98),  S(-22, 130),  S(-30, 93),
      S(-23, 118), S(33, 75),   S(1, 85),    S(-5, 111),   S(-44, 103),
      S(-13, 95),  S(8, 96),    S(-9, 85),   S(-9, 102),   S(-7, 105),
      S(-5, 96),   S(-10, 106), S(-28, 117), S(-29, 41),   S(-31, 79),
      S(-30, 96),  S(-25, 99),  S(-38, 130), S(-22, 73),   S(-13, 105),
      S(-14, 94),  S(-2, 78),   S(9, 94),    S(-19, 78),   S(12, 99),
      S(17, 79),   S(-6, 95),   S(-35, 86),  S(-53, 71),   S(-20, 96),
      S(16, 62),   S(16, 84),   S(18, 73),   S(11, 89),    S(-3, 85),
      S(-3, 6),    S(21, 39),   S(-43, 31),  S(-6, 78),    S(15, 104),
      S(-40, 47),  S(-55, 38),  S(-31, -15), S(-98, 128),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(96, -43), S(134, -50),  S(117, -77), S(-88, -3),  S(110, -4),
      S(-18, 69), S(-219, 114), S(97, 41),   S(-118, 72), S(-125, 72),
      S(-9, 67),  S(-123, 82),  S(-11, 32),  S(-17, 79),  S(-83, 66),
      S(-63, 66), S(-74, 58),   S(-91, 71),  S(-161, 71), S(-105, 38),
      S(27, -8),  S(80, 20),    S(-38, 67),  S(-124, 54), S(-94, 60),
      S(-71, 50), S(-72, 66),   S(-101, 52), S(-132, 55), S(-57, 57),
      S(-86, 82), S(-48, 33),   S(-118, 57), S(-55, 55),  S(-46, 52),
      S(-41, 30), S(-57, 52),   S(-58, 52),  S(-47, 45),  S(-53, 17),
      S(2, -1),   S(-32, 38),   S(-48, 49),  S(-63, 45),  S(-13, 33),
      S(-11, 49), S(16, 40),    S(-35, 22),  S(-33, 66),  S(-5, 31),
      S(-18, 40), S(-14, 31),   S(-23, 30),  S(-14, 39),  S(40, 27),
      S(36, 3),   S(4, -60),    S(40, 10),   S(38, -16),  S(15, 1),
      S(17, -5),  S(19, 11),    S(41, 10),   S(-8, -19),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),    S(-4, 12), S(2, 17),  S(-8, 22),
      S(-14, 41), S(6, 49),  S(-3, 56), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(0, 0),   S(8, -12),    S(-4, -1), S(8, -20),
      S(3, -10), S(103, -107), S(0, 0),   S(0, 0),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(0, 0),   S(-13, -6), S(-25, -7), S(-7, -4),
      S(2, -20), S(5, 2),    S(35, -19), S(0, 0),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(0, 0), S(2, 1), S(1, 10), S(5, 6), S(-4, 3), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score KnightMobilityScore[9] = {
      S(-62, -4), S(-59, 36), S(-64, 38), S(-58, 40), S(-43, 39),
      S(-42, 50), S(-41, 46), S(-24, 29), S(0, 0),
};
constexpr Score BishopMobilityScore[14] = {
      S(-14, 30), S(-22, 76), S(6, 66),  S(7, 54),  S(4, 76),
      S(6, 69),   S(10, 73),  S(4, 79),  S(13, 68), S(11, 63),
      S(-9, 61),  S(-7, 62),  S(46, 35), S(0, 0),
};
constexpr Score RookMobilityScore[15] = {
      S(-18, 52), S(2, 62),  S(-4, 40), S(6, 51),  S(5, 45),
      S(12, 47),  S(20, 52), S(19, 53), S(24, 53), S(15, 58),
      S(18, 63),  S(6, 69),  S(6, 69),  S(20, 62), S(0, 0),
};
constexpr Score QueenMobilityScore[28] = {
      S(79, -188), S(45, 10),  S(45, 145),  S(77, 84),   S(81, 116),
      S(80, 135),  S(76, 143), S(71, 124),  S(84, 118),  S(87, 149),
      S(87, 138),  S(90, 159), S(83, 137),  S(91, 129),  S(92, 141),
      S(84, 152),  S(95, 134), S(91, 138),  S(106, 141), S(90, 145),
      S(126, 100), S(27, 164), S(110, 105), S(110, 108), S(139, 58),
      S(150, 117), S(95, 68),  S(0, 0),
};
constexpr Score kingAttackersWeight[7] = {
      S(4, -7),   S(-15, 15), S(-5, 4), S(-8, -6),
      S(-13, -2), S(-8, -16), S(0, 0),
};
constexpr Score trappedRookWeight = {
      S(11, 19),
};
constexpr Score rookOnOpenFile[2] = {
      S(-27, 93),
      S(-9, -23),
};
constexpr Score openFileNextToKing[3] = {
      S(35, -22),
      S(40, -28),
      S(48, -38),
};
constexpr Score pawnShieldStrength[4] = {
      S(21, -27),
      S(32, -29),
      S(22, -30),
      S(25, -48),
};
struct EvalWeights {
    const Score pawnScore = S(36, 41);
    const Score knightScore = S(80, 40);
    const Score bishopScore = S(90, 44);
    const Score rookScore = S(51, 66);
    const Score queenScore = S(68, 155);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),     S(0, 0),
          S(0, 0),    S(0, 0),    S(0, 0),   S(8, 78),    S(-17, 66),
          S(7, 59),   S(18, 55),  S(9, 8),   S(-32, 83),  S(-23, 64),
          S(-71, 82), S(-16, 39), S(3, 37),  S(-31, 30),  S(18, -1),
          S(-45, 25), S(9, -5),   S(1, 16),  S(-6, 12),   S(-30, 26),
          S(-10, 14), S(-1, 17),  S(-9, 24), S(-5, 16),   S(1, -1),
          S(-22, 26), S(-9, 13),  S(3, -7),  S(-10, 16),  S(-1, 15),
          S(-7, -9),  S(15, 9),   S(-1, 5),  S(-12, -12), S(-26, 12),
          S(-2, 7),   S(-10, 1),  S(10, 14), S(1, -5),    S(20, 15),
          S(-15, -7), S(-19, 0),  S(-5, -7), S(-3, -4),   S(-11, -12),
          S(2, 20),   S(-21, 10), S(29, -5), S(18, -4),   S(4, -7),
          S(-1, 3),   S(0, 0),    S(0, 0),   S(0, 0),     S(0, 0),
          S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(91, -50), S(68, 20),  S(38, 50),   S(70, 35),  S(28, 65), S(29, 49),
          S(13, 88),  S(1, 127),  S(28, 19),   S(57, 43),  S(76, 61), S(46, 48),
          S(37, 70),  S(60, 64),  S(53, 54),   S(50, 65),  S(34, 50), S(60, 78),
          S(62, 47),  S(93, 54),  S(70, 56),   S(56, 63),  S(83, 39), S(48, 73),
          S(48, 43),  S(43, 44),  S(66, 55),   S(65, 44),  S(65, 57), S(65, 49),
          S(56, 66),  S(82, 98),  S(55, 47),   S(45, 22),  S(59, 42), S(50, 63),
          S(81, 44),  S(36, 77),  S(84, 49),   S(78, 55),  S(49, 38), S(50, 37),
          S(47, 49),  S(24, 57),  S(66, 31),   S(48, 64),  S(66, 32), S(60, 21),
          S(88, -10), S(48, -24), S(13, 66),   S(33, 20),  S(59, 49), S(87, 20),
          S(37, 51),  S(27, -3),  S(-66, -90), S(24, 55),  S(49, 18), S(21, 4),
          S(76, 11),  S(25, -1),  S(26, -2),   S(-49, 83),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-15, -34), S(-13, 15),  S(-22, 42), S(-37, 26),  S(-41, 17),
          S(-36, -2),  S(-58, 25),  S(-31, 41), S(1, 41),    S(13, 27),
          S(-24, -5),  S(-32, 37),  S(-20, 1),  S(-20, 26),  S(-58, 35),
          S(-36, -16), S(-14, 19),  S(10, 15),  S(-27, 27),  S(-6, 33),
          S(-35, 12),  S(-27, 18),  S(-8, 21),  S(15, 23),   S(-33, -8),
          S(14, 17),   S(3, 16),    S(9, 43),   S(1, 2),     S(12, 30),
          S(-13, 19),  S(6, 5),     S(-42, 10), S(4, 30),    S(-7, 42),
          S(16, 42),   S(-14, 29),  S(6, 40),   S(4, 18),    S(-34, -23),
          S(-26, 33),  S(-34, 7),   S(19, 26),  S(1, 30),    S(21, 20),
          S(-33, 25),  S(-5, -13),  S(20, 2),   S(-4, 20),   S(24, 26),
          S(18, -5),   S(12, 15),   S(19, 24),  S(-21, 2),   S(32, 3),
          S(17, -7),   S(-12, -18), S(4, 24),   S(-2, 37),   S(-33, 24),
          S(-35, 19),  S(-1, 16),   S(24, -17), S(-28, -77),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(35, 80),  S(-29, 90), S(-21, 98), S(-6, 102), S(-70, 104),
          S(-54, 97), S(40, 66),  S(29, 92),  S(8, 97),   S(-13, 95),
          S(0, 82),   S(22, 106), S(3, 80),   S(26, 54),  S(21, 83),
          S(22, 83),  S(7, 90),   S(-4, 85),  S(8, 77),   S(42, 68),
          S(24, 71),  S(-2, 88),  S(37, 86),  S(6, 81),   S(11, 90),
          S(19, 71),  S(-3, 73),  S(17, 75),  S(28, 65),  S(-14, 82),
          S(44, 85),  S(31, 83),  S(-19, 71), S(1, 87),   S(-6, 62),
          S(6, 63),   S(13, 64),  S(23, 49),  S(15, 45),  S(-12, 81),
          S(-19, 79), S(7, 84),   S(-1, 59),  S(-3, 64),  S(11, 60),
          S(24, 61),  S(36, 60),  S(27, 80),  S(-18, 74), S(-21, 65),
          S(28, 76),  S(39, 67),  S(-28, 64), S(13, 51),  S(-8, 45),
          S(-7, -19), S(27, 55),  S(23, 47),  S(4, 74),   S(34, 56),
          S(38, 56),  S(30, 53),  S(44, 49),  S(48, 65),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-30, 125), S(-26, 82),  S(-39, 126), S(-101, 151), S(-60, 125),
          S(-42, 86),  S(2, 90),    S(-57, 144), S(-43, 97),   S(-21, 69),
          S(2, 102),   S(-33, 132), S(11, 31),   S(-20, 108),  S(-35, 84),
          S(5, 81),    S(-37, 75),  S(-26, 98),  S(-22, 130),  S(-30, 93),
          S(-23, 118), S(33, 75),   S(1, 85),    S(-5, 111),   S(-44, 103),
          S(-13, 95),  S(8, 96),    S(-9, 85),   S(-9, 102),   S(-7, 105),
          S(-5, 96),   S(-10, 106), S(-28, 117), S(-29, 41),   S(-31, 79),
          S(-30, 96),  S(-25, 99),  S(-38, 130), S(-22, 73),   S(-13, 105),
          S(-14, 94),  S(-2, 78),   S(9, 94),    S(-19, 78),   S(12, 99),
          S(17, 79),   S(-6, 95),   S(-35, 86),  S(-53, 71),   S(-20, 96),
          S(16, 62),   S(16, 84),   S(18, 73),   S(11, 89),    S(-3, 85),
          S(-3, 6),    S(21, 39),   S(-43, 31),  S(-6, 78),    S(15, 104),
          S(-40, 47),  S(-55, 38),  S(-31, -15), S(-98, 128),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(96, -43), S(134, -50),  S(117, -77), S(-88, -3),  S(110, -4),
          S(-18, 69), S(-219, 114), S(97, 41),   S(-118, 72), S(-125, 72),
          S(-9, 67),  S(-123, 82),  S(-11, 32),  S(-17, 79),  S(-83, 66),
          S(-63, 66), S(-74, 58),   S(-91, 71),  S(-161, 71), S(-105, 38),
          S(27, -8),  S(80, 20),    S(-38, 67),  S(-124, 54), S(-94, 60),
          S(-71, 50), S(-72, 66),   S(-101, 52), S(-132, 55), S(-57, 57),
          S(-86, 82), S(-48, 33),   S(-118, 57), S(-55, 55),  S(-46, 52),
          S(-41, 30), S(-57, 52),   S(-58, 52),  S(-47, 45),  S(-53, 17),
          S(2, -1),   S(-32, 38),   S(-48, 49),  S(-63, 45),  S(-13, 33),
          S(-11, 49), S(16, 40),    S(-35, 22),  S(-33, 66),  S(-5, 31),
          S(-18, 40), S(-14, 31),   S(-23, 30),  S(-14, 39),  S(40, 27),
          S(36, 3),   S(4, -60),    S(40, 10),   S(38, -16),  S(15, 1),
          S(17, -5),  S(19, 11),    S(41, 10),   S(-8, -19),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),    S(-4, 12), S(2, 17),  S(-8, 22),
          S(-14, 41), S(6, 49),  S(-3, 56), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(0, 0),   S(8, -12),    S(-4, -1), S(8, -20),
          S(3, -10), S(103, -107), S(0, 0),   S(0, 0),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(0, 0),   S(-13, -6), S(-25, -7), S(-7, -4),
          S(2, -20), S(5, 2),    S(35, -19), S(0, 0),
    };
    const Score backwardPawnRankBonus[8] = {
          S(0, 0),  S(2, 1), S(1, 10), S(5, 6),
          S(-4, 3), S(0, 0), S(0, 0),  S(0, 0),
    };
    const Score KnightMobilityScore[9] = {
          S(-62, -4), S(-59, 36), S(-64, 38), S(-58, 40), S(-43, 39),
          S(-42, 50), S(-41, 46), S(-24, 29), S(0, 0),
    };
    const Score BishopMobilityScore[14] = {
          S(-14, 30), S(-22, 76), S(6, 66),  S(7, 54),  S(4, 76),
          S(6, 69),   S(10, 73),  S(4, 79),  S(13, 68), S(11, 63),
          S(-9, 61),  S(-7, 62),  S(46, 35), S(0, 0),
    };
    const Score RookMobilityScore[15] = {
          S(-18, 52), S(2, 62),  S(-4, 40), S(6, 51),  S(5, 45),
          S(12, 47),  S(20, 52), S(19, 53), S(24, 53), S(15, 58),
          S(18, 63),  S(6, 69),  S(6, 69),  S(20, 62), S(0, 0),
    };
    const Score QueenMobilityScore[28] = {
          S(79, -188), S(45, 10),  S(45, 145),  S(77, 84),   S(81, 116),
          S(80, 135),  S(76, 143), S(71, 124),  S(84, 118),  S(87, 149),
          S(87, 138),  S(90, 159), S(83, 137),  S(91, 129),  S(92, 141),
          S(84, 152),  S(95, 134), S(91, 138),  S(106, 141), S(90, 145),
          S(126, 100), S(27, 164), S(110, 105), S(110, 108), S(139, 58),
          S(150, 117), S(95, 68),  S(0, 0),
    };
    const Score kingAttackersWeight[7] = {
          S(4, -7),   S(-15, 15), S(-5, 4), S(-8, -6),
          S(-13, -2), S(-8, -16), S(0, 0),
    };
    const Score trappedRookWeight = {
          S(11, 19),
    };
    const Score rookOnOpenFile[2] = {
          S(-27, 93),
          S(-9, -23),
    };
    const Score openFileNextToKing[3] = {
          S(35, -22),
          S(40, -28),
          S(48, -38),
    };
    const Score pawnShieldStrength[4] = {
          S(21, -27),
          S(32, -29),
          S(22, -30),
          S(25, -48),
    };
};
struct Trace {
    int pawnScore[NUM_COLOR] = {0};
    int knightScore[NUM_COLOR] = {0};
    int bishopScore[NUM_COLOR] = {0};
    int rookScore[NUM_COLOR] = {0};
    int queenScore[NUM_COLOR] = {0};
    int pawnPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int knightPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int bishopPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int rookPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int queenPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int kingPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int passedPawn[8][NUM_COLOR] = {{0}};
    int doubledPawns[8][NUM_COLOR] = {0};
    int isolatedPawns[8][NUM_COLOR] = {0};
    int backwardPawns[8][NUM_COLOR] = {0};
    int knightMobility[9][NUM_COLOR] = {{0}};
    int bishopMobility[14][NUM_COLOR] = {{0}};
    int rookMobility[15][NUM_COLOR] = {{0}};
    int queenMobility[28][NUM_COLOR] = {{0}};
    int kingAttackers[7][NUM_COLOR] = {{0}};
    int trappedRooks[NUM_COLOR] = {0};
    int openFileRooks[2][NUM_COLOR] = {{0}};
    int openKingFiles[3][NUM_COLOR] = {{0}};
    int pawnShieldStrength[4][NUM_COLOR] = {{0}};
    // int pushedPawnShieldStrength[4][NUM_COLOR] = {{0}};
    // int kingAttackersDistance[8][NUM_COLOR] = {{0}};
    // int xRayKingAttackersDistance[8][NUM_COLOR] = {{0}};
    // int xRayKingAttackPieceWeight[7][NUM_COLOR] = {{0}};
};

struct TracePeek {
    TracePeek(Trace &ts, EvalWeights &ws) : t(ts), w(ws){};

  public:
    void print();
    int calculate(std::tuple<int, int, int> phase);

  private:
    Trace &t;
    EvalWeights &w;
};
} // namespace Yayo

/*
**
constexpr Score pawnScore = S(0, 0);
constexpr Score knightScore = S(0, 0);
constexpr Score bishopScore = S(0, 0);
constexpr Score rookScore = S(0, 0);
constexpr Score queenScore = S(0, 0);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score KnightMobilityScore[9] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score BishopMobilityScore[14] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score RookMobilityScore[15] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score QueenMobilityScore[28] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score kingAttackersWeight[7] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0),
                                          S(0, 0), S(0, 0), S(0, 0)};

constexpr Score trappedRookWeight = {
      S(0, 0),
};
constexpr Score rookOnOpenFile[2] = {
      S(0, 0),
      S(0, 0),
};
constexpr Score openFileNextToKing[3] = {
      S(0, 0),
      S(0, 0),
      S(0, 0),
};
constexpr Score pawnShieldStrength[4] = {
      S(0, 0),
      S(0, 0),
      S(0, 0),
      S(0, 0),
};
constexpr Score pushedPawnShieldStrength[4] = {
      S(0, 0),
      S(0, 0),
      S(0, 0),
      S(0, 0),
};
constexpr Score kingAttackersDistance[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score xRayKingAttackersDistance[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score xRayKingAttackPieceWeight[7] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)};
**
*/

#endif // WEIGHTS_H_
