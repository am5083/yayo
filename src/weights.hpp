#ifndef WEIGHTS_H_
#define WEIGHTS_H_

#include "util.hpp"
namespace Yayo {

constexpr Score pawnScore = S(6, 48);
constexpr Score knightScore = S(42, 31);
constexpr Score bishopScore = S(60, 42);
constexpr Score rookScore = S(39, 84);
constexpr Score queenScore = S(21, 110);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),    S(0, 0),    S(18, 66),  S(-9, 75),  S(-5, 76),  S(72, 34),
      S(-32, 3),  S(21, 71),  S(-2, 57),  S(-23, 63), S(-24, 48), S(-38, 56),
      S(16, 34),  S(-12, 11), S(6, 6),    S(18, 43),  S(-11, 36), S(6, -9),
      S(3, 33),   S(3, 27),   S(7, -7),   S(3, -2),   S(9, 7),    S(5, 12),
      S(10, 16),  S(7, 13),   S(-8, 1),   S(-4, 4),   S(-4, -6),  S(4, 10),
      S(-7, -10), S(2, -7),   S(0, 8),    S(0, 2),    S(-7, 16),  S(-2, 6),
      S(-6, 3),   S(0, 10),   S(-5, 3),   S(0, 7),    S(10, 7),   S(5, 13),
      S(-6, 33),  S(-2, 28),  S(-14, 21), S(7, -3),   S(-16, -5), S(-3, 11),
      S(4, 13),   S(1, 9),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(98, -104), S(22, 14),  S(-5, 48),     S(73, 48),  S(-16, 73), S(52, 29),
      S(-32, 107), S(-44, 86), S(77, 10),     S(15, 50),  S(38, 83),  S(47, 33),
      S(36, 97),   S(45, 62),  S(19, 16),     S(4, 56),   S(-12, 53), S(25, 84),
      S(55, 43),   S(55, 60),  S(79, 30),     S(61, 85),  S(85, 42),  S(4, 39),
      S(24, 95),   S(53, 47),  S(67, 19),     S(66, 42),  S(63, 53),  S(72, 67),
      S(45, 68),   S(42, 89),  S(46, 47),     S(-1, 63),  S(44, 85),  S(50, 68),
      S(40, 54),   S(58, 61),  S(45, 29),     S(43, 50),  S(42, 24),  S(35, 24),
      S(46, 35),   S(68, 22),  S(45, 50),     S(47, 37),  S(46, 38),  S(48, 34),
      S(41, 37),   S(94, 18),  S(54, 49),     S(51, 58),  S(51, 2),   S(48, 20),
      S(52, 53),   S(72, -56), S(-119, -145), S(55, 25),  S(43, 5),   S(67, 47),
      S(30, -34),  S(69, 2),   S(53, 35),     S(-7, 134),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-7, -10),  S(-51, 11), S(-45, 46),  S(-58, 38),  S(-61, 62),
      S(-37, -48), S(-42, 74), S(-77, 18),  S(-40, 29),  S(-25, 1),
      S(23, 41),   S(-59, 89), S(-17, -22), S(-64, -17), S(-61, 85),
      S(-19, 31),  S(-3, -28), S(-28, 63),  S(-14, 30),  S(-3, 7),
      S(-2, 37),   S(-22, 24), S(-52, 21),  S(-12, -21), S(-9, 34),
      S(-19, 29),  S(-19, 42), S(-32, 28),  S(-2, 15),   S(-30, 16),
      S(-8, -26),  S(-33, 9),  S(-6, 55),   S(-36, 31),  S(-16, 32),
      S(-19, 38),  S(-4, 16),  S(-11, -3),  S(-19, 16),  S(9, -17),
      S(-3, -16),  S(0, 26),   S(-20, 34),  S(-10, 17),  S(-15, 10),
      S(0, 21),    S(0, 27),   S(-7, 12),   S(-15, 67),  S(-17, -2),
      S(-8, 21),   S(-18, 15), S(-15, 16),  S(5, -10),   S(-12, 21),
      S(-1, 16),   S(31, -45), S(-44, 44),  S(-13, -3),  S(-7, -6),
      S(-85, 13),  S(-15, 18), S(-24, -65), S(15, -42),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(-8, 60),  S(-45, 88),  S(-53, 103), S(-47, 96), S(-54, 92), S(-83, 83),
      S(61, 43),  S(63, 60),   S(45, 53),   S(8, 88),   S(44, 78),  S(16, 103),
      S(1, 98),   S(70, 53),   S(-4, 84),   S(9, 80),   S(-8, 103), S(34, 98),
      S(9, 93),   S(6, 66),    S(3, 78),    S(10, 93),  S(33, 79),  S(52, 78),
      S(-21, 89), S(-13, 100), S(38, 64),   S(-1, 68),  S(-13, 81), S(31, 57),
      S(-2, 63),  S(-5, 48),   S(21, 61),   S(-42, 93), S(37, 55),  S(-40, 95),
      S(-10, 68), S(-6, 69),   S(-32, 77),  S(-62, 71), S(1, 69),   S(-28, 85),
      S(-1, 60),  S(-3, 68),   S(0, 55),    S(-23, 78), S(-8, 54),  S(-21, 44),
      S(-7, 52),  S(15, 53),   S(-5, 34),   S(-8, 56),  S(-13, 95), S(4, 61),
      S(19, 43),  S(38, 19),   S(-3, 69),   S(-7, 78),  S(2, 69),   S(0, 66),
      S(9, 57),   S(8, 59),    S(2, 76),    S(0, 59),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-56, 115), S(14, 34),   S(-72, 115),  S(-115, 107), S(-53, 79),
      S(-52, 41),  S(-32, 56),  S(-104, 124), S(-3, 44),    S(-8, 20),
      S(-24, 64),  S(-57, 137), S(5, -16),    S(-19, 71),   S(-8, 65),
      S(-38, 60),  S(0, 67),    S(-52, 147),  S(-29, 118),  S(0, 44),
      S(-33, 108), S(-5, 70),   S(-42, 93),   S(-48, 118),  S(-24, 96),
      S(-21, 50),  S(-29, 53),  S(-16, 42),   S(-12, 56),   S(-20, 64),
      S(-46, 76),  S(-22, 67),  S(-26, 87),   S(10, -9),    S(-21, 32),
      S(-8, 48),   S(-30, 97),  S(-29, 88),   S(-11, 32),   S(-17, 54),
      S(-21, 45),  S(-20, 39),  S(-32, 52),   S(-16, 30),   S(-31, 60),
      S(-22, 32),  S(-21, 77),  S(-9, 37),    S(-12, 113),  S(-21, 64),
      S(-25, 64),  S(-20, 40),  S(-18, 30),   S(-31, 63),   S(-51, 36),
      S(-9, 21),   S(-26, -7),  S(-3, 17),    S(-16, 29),   S(-19, 61),
      S(-4, 10),   S(-16, 50),  S(7, -30),    S(-88, 167),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(149, -33), S(183, -57), S(168, -60),  S(-137, -55), S(164, -60),
      S(23, 56),   S(-164, 60), S(117, -22),  S(-84, 38),   S(-149, 114),
      S(-42, 47),  S(-173, 68), S(35, 48),    S(17, 78),    S(-65, 116),
      S(-55, 19),  S(-132, 59), S(-143, 103), S(-153, 71),  S(-72, 30),
      S(84, 38),   S(132, 53),  S(-88, 93),   S(-175, 11),  S(-151, 38),
      S(-32, 60),  S(-116, 63), S(-144, 43),  S(-177, 58),  S(-30, 69),
      S(-64, 87),  S(-72, 47),  S(-169, 41),  S(-3, 72),    S(4, 76),
      S(-79, 40),  S(-81, 53),  S(-99, 66),   S(-88, 67),   S(-79, 49),
      S(0, -16),   S(-27, 47),  S(-11, 38),   S(-27, 51),   S(-21, 34),
      S(-57, 58),  S(-14, 42),  S(-72, 43),   S(-81, 29),   S(34, 15),
      S(24, 51),   S(21, 26),   S(14, 29),    S(11, 47),    S(3, 46),
      S(0, 11),    S(49, -18),  S(16, -36),   S(1, 1),      S(-31, -9),
      S(16, -25),  S(-32, 9),   S(6, -2),     S(-5, -8),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),  S(0, -6),  S(8, -14), S(3, 13),
      S(9, 11), S(13, 41), S(1, 61),  S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(0, 0),    S(2, -12),   S(1, -15), S(-4, -12),
      S(-16, 42), S(151, -95), S(0, 0),   S(0, 0),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(0, 0), S(-1, 0),   S(1, 5),    S(-5, 5),
      S(0, 3), S(12, -15), S(23, -42), S(0, 0),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(0, 0),   S(-8, -4), S(0, -19), S(-5, -7),
      S(-6, -8), S(0, 0),   S(0, 0),   S(0, 0),
};
constexpr Score KnightMobilityScore[9] = {
      S(-76, 32), S(-67, 30), S(-61, 29), S(-55, 19), S(-57, 35),
      S(-54, 25), S(-51, 35), S(-61, 39), S(0, 0),
};
constexpr Score BishopMobilityScore[14] = {
      S(-15, 50), S(-5, 43),   S(-11, 57), S(-7, 74), S(-5, 61),
      S(-5, 78),  S(-8, 79),   S(-5, 75),  S(-6, 76), S(-3, 92),
      S(35, 64),  S(-50, 111), S(99, 42),  S(0, 0),
};
constexpr Score RookMobilityScore[15] = {
      S(5, 0),   S(4, 33),  S(6, 57),  S(3, 66),  S(4, 71),
      S(8, 68),  S(5, 71),  S(9, 75),  S(19, 79), S(14, 81),
      S(17, 76), S(23, 81), S(36, 67), S(30, 69), S(0, 0),
};
constexpr Score QueenMobilityScore[28] = {
      S(125, -146), S(90, 53),   S(56, 189), S(54, 70),  S(56, 72),
      S(58, 76),    S(61, 85),   S(63, 71),  S(65, 69),  S(61, 101),
      S(64, 91),    S(58, 117),  S(72, 90),  S(71, 79),  S(67, 96),
      S(65, 109),   S(77, 90),   S(73, 95),  S(81, 102), S(51, 107),
      S(86, 109),   S(-10, 158), S(62, 131), S(63, 133), S(141, 116),
      S(143, 129),  S(138, 126), S(0, 0),
};
constexpr Score kingAttackersWeight[7] = {
      S(-7, -8), S(-3, 1), S(5, -3), S(-12, 0), S(-8, -3), S(-5, -18), S(0, 0),
};
constexpr Score trappedRookWeight = {
      S(-6, 17),
};
constexpr Score rookOnOpenFile[2] = {
      S(-32, 54),
      S(21, -34),
};
constexpr Score openFileNextToKing[3] = {
      S(31, -22),
      S(26, -21),
      S(5, -26),
};
constexpr Score pawnShieldStrength[4] = {
      S(3, -21),
      S(12, -33),
      S(25, -33),
      S(28, -35),
};
// const Score pushedPawnShieldStrength[4] = {
//       S(0, 0),
//       S(0, 0),
//       S(0, 0),
//       S(0, 0),
// };
// const Score kingAttackersDistance[8] = {
//       S(0, 0), S(0, 0), S(0, 0),  S(0, 0),
//       S(0, 0), S(0, 0), S(0, 0), S(0, 0),
// };
// const Score xRayKingAttackersDistance[8] = {
//       S(0, 0), S(0, 0), S(0, 0), S(0, 0),
//       S(0, 0), S(0, 0), S(0, 0), S(0, 0),
// };
// const Score xRayKingAttackPieceWeight[7] = {
//       S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
// };

struct EvalWeights {
    const Score pawnScore = S(6, 48);
    const Score knightScore = S(42, 31);
    const Score bishopScore = S(60, 42);
    const Score rookScore = S(39, 84);
    const Score queenScore = S(21, 110);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),
          S(0, 0),    S(0, 0),    S(0, 0),    S(18, 66), S(-9, 75),
          S(-5, 76),  S(72, 34),  S(-32, 3),  S(21, 71), S(-2, 57),
          S(-23, 63), S(-24, 48), S(-38, 56), S(16, 34), S(-12, 11),
          S(6, 6),    S(18, 43),  S(-11, 36), S(6, -9),  S(3, 33),
          S(3, 27),   S(7, -7),   S(3, -2),   S(9, 7),   S(5, 12),
          S(10, 16),  S(7, 13),   S(-8, 1),   S(-4, 4),  S(-4, -6),
          S(4, 10),   S(-7, -10), S(2, -7),   S(0, 8),   S(0, 2),
          S(-7, 16),  S(-2, 6),   S(-6, 3),   S(0, 10),  S(-5, 3),
          S(0, 7),    S(10, 7),   S(5, 13),   S(-6, 33), S(-2, 28),
          S(-14, 21), S(7, -3),   S(-16, -5), S(-3, 11), S(4, 13),
          S(1, 9),    S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),
          S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(98, -104), S(22, 14),     S(-5, 48),  S(73, 48),  S(-16, 73),
          S(52, 29),   S(-32, 107),   S(-44, 86), S(77, 10),  S(15, 50),
          S(38, 83),   S(47, 33),     S(36, 97),  S(45, 62),  S(19, 16),
          S(4, 56),    S(-12, 53),    S(25, 84),  S(55, 43),  S(55, 60),
          S(79, 30),   S(61, 85),     S(85, 42),  S(4, 39),   S(24, 95),
          S(53, 47),   S(67, 19),     S(66, 42),  S(63, 53),  S(72, 67),
          S(45, 68),   S(42, 89),     S(46, 47),  S(-1, 63),  S(44, 85),
          S(50, 68),   S(40, 54),     S(58, 61),  S(45, 29),  S(43, 50),
          S(42, 24),   S(35, 24),     S(46, 35),  S(68, 22),  S(45, 50),
          S(47, 37),   S(46, 38),     S(48, 34),  S(41, 37),  S(94, 18),
          S(54, 49),   S(51, 58),     S(51, 2),   S(48, 20),  S(52, 53),
          S(72, -56),  S(-119, -145), S(55, 25),  S(43, 5),   S(67, 47),
          S(30, -34),  S(69, 2),      S(53, 35),  S(-7, 134),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-7, -10),  S(-51, 11), S(-45, 46),  S(-58, 38),  S(-61, 62),
          S(-37, -48), S(-42, 74), S(-77, 18),  S(-40, 29),  S(-25, 1),
          S(23, 41),   S(-59, 89), S(-17, -22), S(-64, -17), S(-61, 85),
          S(-19, 31),  S(-3, -28), S(-28, 63),  S(-14, 30),  S(-3, 7),
          S(-2, 37),   S(-22, 24), S(-52, 21),  S(-12, -21), S(-9, 34),
          S(-19, 29),  S(-19, 42), S(-32, 28),  S(-2, 15),   S(-30, 16),
          S(-8, -26),  S(-33, 9),  S(-6, 55),   S(-36, 31),  S(-16, 32),
          S(-19, 38),  S(-4, 16),  S(-11, -3),  S(-19, 16),  S(9, -17),
          S(-3, -16),  S(0, 26),   S(-20, 34),  S(-10, 17),  S(-15, 10),
          S(0, 21),    S(0, 27),   S(-7, 12),   S(-15, 67),  S(-17, -2),
          S(-8, 21),   S(-18, 15), S(-15, 16),  S(5, -10),   S(-12, 21),
          S(-1, 16),   S(31, -45), S(-44, 44),  S(-13, -3),  S(-7, -6),
          S(-85, 13),  S(-15, 18), S(-24, -65), S(15, -42),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(-8, 60),   S(-45, 88), S(-53, 103), S(-47, 96), S(-54, 92),
          S(-83, 83),  S(61, 43),  S(63, 60),   S(45, 53),  S(8, 88),
          S(44, 78),   S(16, 103), S(1, 98),    S(70, 53),  S(-4, 84),
          S(9, 80),    S(-8, 103), S(34, 98),   S(9, 93),   S(6, 66),
          S(3, 78),    S(10, 93),  S(33, 79),   S(52, 78),  S(-21, 89),
          S(-13, 100), S(38, 64),  S(-1, 68),   S(-13, 81), S(31, 57),
          S(-2, 63),   S(-5, 48),  S(21, 61),   S(-42, 93), S(37, 55),
          S(-40, 95),  S(-10, 68), S(-6, 69),   S(-32, 77), S(-62, 71),
          S(1, 69),    S(-28, 85), S(-1, 60),   S(-3, 68),  S(0, 55),
          S(-23, 78),  S(-8, 54),  S(-21, 44),  S(-7, 52),  S(15, 53),
          S(-5, 34),   S(-8, 56),  S(-13, 95),  S(4, 61),   S(19, 43),
          S(38, 19),   S(-3, 69),  S(-7, 78),   S(2, 69),   S(0, 66),
          S(9, 57),    S(8, 59),   S(2, 76),    S(0, 59),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-56, 115), S(14, 34),   S(-72, 115),  S(-115, 107), S(-53, 79),
          S(-52, 41),  S(-32, 56),  S(-104, 124), S(-3, 44),    S(-8, 20),
          S(-24, 64),  S(-57, 137), S(5, -16),    S(-19, 71),   S(-8, 65),
          S(-38, 60),  S(0, 67),    S(-52, 147),  S(-29, 118),  S(0, 44),
          S(-33, 108), S(-5, 70),   S(-42, 93),   S(-48, 118),  S(-24, 96),
          S(-21, 50),  S(-29, 53),  S(-16, 42),   S(-12, 56),   S(-20, 64),
          S(-46, 76),  S(-22, 67),  S(-26, 87),   S(10, -9),    S(-21, 32),
          S(-8, 48),   S(-30, 97),  S(-29, 88),   S(-11, 32),   S(-17, 54),
          S(-21, 45),  S(-20, 39),  S(-32, 52),   S(-16, 30),   S(-31, 60),
          S(-22, 32),  S(-21, 77),  S(-9, 37),    S(-12, 113),  S(-21, 64),
          S(-25, 64),  S(-20, 40),  S(-18, 30),   S(-31, 63),   S(-51, 36),
          S(-9, 21),   S(-26, -7),  S(-3, 17),    S(-16, 29),   S(-19, 61),
          S(-4, 10),   S(-16, 50),  S(7, -30),    S(-88, 167),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(149, -33), S(183, -57), S(168, -60),  S(-137, -55), S(164, -60),
          S(23, 56),   S(-164, 60), S(117, -22),  S(-84, 38),   S(-149, 114),
          S(-42, 47),  S(-173, 68), S(35, 48),    S(17, 78),    S(-65, 116),
          S(-55, 19),  S(-132, 59), S(-143, 103), S(-153, 71),  S(-72, 30),
          S(84, 38),   S(132, 53),  S(-88, 93),   S(-175, 11),  S(-151, 38),
          S(-32, 60),  S(-116, 63), S(-144, 43),  S(-177, 58),  S(-30, 69),
          S(-64, 87),  S(-72, 47),  S(-169, 41),  S(-3, 72),    S(4, 76),
          S(-79, 40),  S(-81, 53),  S(-99, 66),   S(-88, 67),   S(-79, 49),
          S(0, -16),   S(-27, 47),  S(-11, 38),   S(-27, 51),   S(-21, 34),
          S(-57, 58),  S(-14, 42),  S(-72, 43),   S(-81, 29),   S(34, 15),
          S(24, 51),   S(21, 26),   S(14, 29),    S(11, 47),    S(3, 46),
          S(0, 11),    S(49, -18),  S(16, -36),   S(1, 1),      S(-31, -9),
          S(16, -25),  S(-32, 9),   S(6, -2),     S(-5, -8),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),  S(0, -6),  S(8, -14), S(3, 13),
          S(9, 11), S(13, 41), S(1, 61),  S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(0, 0),    S(2, -12),   S(1, -15), S(-4, -12),
          S(-16, 42), S(151, -95), S(0, 0),   S(0, 0),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(0, 0), S(-1, 0),   S(1, 5),    S(-5, 5),
          S(0, 3), S(12, -15), S(23, -42), S(0, 0),
    };
    const Score backwardPawnRankBonus[8] = {
          S(0, 0),   S(-8, -4), S(0, -19), S(-5, -7),
          S(-6, -8), S(0, 0),   S(0, 0),   S(0, 0),
    };
    const Score KnightMobilityScore[9] = {
          S(-76, 32), S(-67, 30), S(-61, 29), S(-55, 19), S(-57, 35),
          S(-54, 25), S(-51, 35), S(-61, 39), S(0, 0),
    };
    const Score BishopMobilityScore[14] = {
          S(-15, 50), S(-5, 43),   S(-11, 57), S(-7, 74), S(-5, 61),
          S(-5, 78),  S(-8, 79),   S(-5, 75),  S(-6, 76), S(-3, 92),
          S(35, 64),  S(-50, 111), S(99, 42),  S(0, 0),
    };
    const Score RookMobilityScore[15] = {
          S(5, 0),   S(4, 33),  S(6, 57),  S(3, 66),  S(4, 71),
          S(8, 68),  S(5, 71),  S(9, 75),  S(19, 79), S(14, 81),
          S(17, 76), S(23, 81), S(36, 67), S(30, 69), S(0, 0),
    };
    const Score QueenMobilityScore[28] = {
          S(125, -146), S(90, 53),   S(56, 189), S(54, 70),  S(56, 72),
          S(58, 76),    S(61, 85),   S(63, 71),  S(65, 69),  S(61, 101),
          S(64, 91),    S(58, 117),  S(72, 90),  S(71, 79),  S(67, 96),
          S(65, 109),   S(77, 90),   S(73, 95),  S(81, 102), S(51, 107),
          S(86, 109),   S(-10, 158), S(62, 131), S(63, 133), S(141, 116),
          S(143, 129),  S(138, 126), S(0, 0),
    };
    const Score kingAttackersWeight[7] = {
          S(-7, -8), S(-3, 1),   S(5, -3), S(-12, 0),
          S(-8, -3), S(-5, -18), S(0, 0),
    };
    const Score trappedRookWeight = {
          S(-6, 17),
    };
    const Score rookOnOpenFile[2] = {
          S(-32, 54),
          S(21, -34),
    };
    const Score openFileNextToKing[3] = {
          S(31, -22),
          S(26, -21),
          S(5, -26),
    };
    const Score pawnShieldStrength[4] = {
          S(3, -21),
          S(12, -33),
          S(25, -33),
          S(28, -35),
    };
};

struct Trace {
    int pawnScore[NUM_COLOR] = {0};
    int knightScore[NUM_COLOR] = {0};
    int bishopScore[NUM_COLOR] = {0};
    int rookScore[NUM_COLOR] = {0};
    int queenScore[NUM_COLOR] = {0};
    int pawnPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int knightPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int bishopPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int rookPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int queenPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int kingPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int passedPawn[8][NUM_COLOR] = {{0}};
    int doubledPawns[8][NUM_COLOR] = {0};
    int isolatedPawns[8][NUM_COLOR] = {0};
    int backwardPawns[8][NUM_COLOR] = {0};
    int knightMobility[9][NUM_COLOR] = {{0}};
    int bishopMobility[14][NUM_COLOR] = {{0}};
    int rookMobility[15][NUM_COLOR] = {{0}};
    int queenMobility[28][NUM_COLOR] = {{0}};
    int kingAttackers[7][NUM_COLOR] = {{0}};
    int trappedRooks[NUM_COLOR] = {0};
    int openFileRooks[2][NUM_COLOR] = {{0}};
    int openKingFiles[3][NUM_COLOR] = {{0}};
    int pawnShieldStrength[4][NUM_COLOR] = {{0}};
    // int pushedPawnShieldStrength[4][NUM_COLOR] = {{0}};
    // int kingAttackersDistance[8][NUM_COLOR] = {{0}};
    // int xRayKingAttackersDistance[8][NUM_COLOR] = {{0}};
    // int xRayKingAttackPieceWeight[7][NUM_COLOR] = {{0}};
};

struct TracePeek {
    TracePeek(Trace &ts, EvalWeights &ws) : t(ts), w(ws){};

  public:
    void print();
    int calculate(std::tuple<int, int, int> phase);

  private:
    Trace &t;
    EvalWeights &w;
};
} // namespace Yayo

/*
**
constexpr Score pawnScore = S(0, 0);
constexpr Score knightScore = S(0, 0);
constexpr Score bishopScore = S(0, 0);
constexpr Score rookScore = S(0, 0);
constexpr Score queenScore = S(0, 0);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score KnightMobilityScore[9] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score BishopMobilityScore[14] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score RookMobilityScore[15] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score QueenMobilityScore[28] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score kingAttackersWeight[7] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0),
                                          S(0, 0), S(0, 0), S(0, 0)};

constexpr Score trappedRookWeight = {
      S(0, 0),
};
constexpr Score rookOnOpenFile[2] = {
      S(0, 0),
      S(0, 0),
};
constexpr Score openFileNextToKing[3] = {
      S(0, 0),
      S(0, 0),
      S(0, 0),
};
constexpr Score pawnShieldStrength[4] = {
      S(0, 0),
      S(0, 0),
      S(0, 0),
      S(0, 0),
};
constexpr Score pushedPawnShieldStrength[4] = {
      S(0, 0),
      S(0, 0),
      S(0, 0),
      S(0, 0),
};
constexpr Score kingAttackersDistance[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score xRayKingAttackersDistance[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score xRayKingAttackPieceWeight[7] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)};
**
*/

#endif // WEIGHTS_H_
