#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"

constexpr Score pawnScore = S(98, 169);
constexpr Score knightScore = S(381, 419);
constexpr Score bishopScore = S(395, 461);
constexpr Score rookScore = S(520, 690);
constexpr Score queenScore = S(1140, 1398);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),      S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
      S(0, 0),      S(0, 0),     S(0, 0),     S(-41, 156), S(61, 118),
      S(-35, 151),  S(15, 41),   S(-49, 26),  S(-59, 12),  S(-116, 106),
      S(-187, 146), S(-45, 143), S(-18, 122), S(68, 28),   S(-4, 6),
      S(68, -5),    S(119, 52),  S(68, 76),   S(29, 65),   S(-31, 89),
      S(-39, 62),   S(-19, 50),  S(4, 14),    S(26, -40),  S(41, -11),
      S(-32, 29),   S(-43, 57),  S(-62, 69),  S(-45, 68),  S(-18, 15),
      S(4, -14),    S(-12, -10), S(-20, 9),   S(-1, 8),    S(-22, 37),
      S(-23, 50),   S(-21, 12),  S(-3, 8),    S(-5, 0),    S(7, 2),
      S(12, 3),     S(47, -1),   S(5, 15),    S(-33, 45),  S(-20, 42),
      S(-8, 5),     S(13, 29),   S(-2, -7),   S(47, -4),   S(54, -5),
      S(-12, 0),    S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
      S(0, 0),      S(0, 0),     S(0, 0),     S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-194, -114), S(-99, -38), S(-60, -8),  S(-43, -34), S(57, 3),
      S(-142, -2),   S(-90, -20), S(-62, -91), S(-16, 2),   S(23, 25),
      S(-28, 3),     S(17, 8),    S(55, -46),  S(136, -74), S(60, 40),
      S(79, -64),    S(5, -12),   S(53, -13),  S(49, 53),   S(67, 75),
      S(129, 8),     S(128, 28),  S(90, 21),   S(83, -36),  S(13, 71),
      S(11, -20),    S(47, 56),   S(68, 53),   S(36, 92),   S(112, 35),
      S(26, 1),      S(109, -14), S(8, 52),    S(5, 19),    S(21, 75),
      S(12, 65),     S(28, 41),   S(42, 13),   S(65, 52),   S(21, 59),
      S(-26, 29),    S(-35, -17), S(-13, 19),  S(-2, 13),   S(40, 16),
      S(20, 4),      S(11, 23),   S(23, -39),  S(-59, -31), S(-65, -50),
      S(-52, 1),     S(5, -10),   S(1, 0),     S(-9, 4),    S(8, -69),
      S(0, -44),     S(-71, 14),  S(-50, -39), S(-10, 15),  S(24, -27),
      S(20, -50),    S(35, -23),  S(-44, -32), S(-78, -65),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-77, 45),  S(-52, 1),   S(-36, 59),  S(-69, -8), S(-27, -22),
      S(-89, -7),  S(25, 25),   S(-82, -65), S(13, -4),  S(35, 2),
      S(-28, 38),  S(-28, -21), S(36, -31),  S(-27, 35), S(-12, -25),
      S(-45, -23), S(-32, 42),  S(46, 38),   S(28, 19),  S(16, 2),
      S(5, -33),   S(93, 18),   S(78, -42),  S(40, -4),  S(-38, -24),
      S(-20, 41),  S(8, -18),   S(81, 24),   S(59, -4),  S(5, 28),
      S(11, 12),   S(-12, -8),  S(16, 46),   S(-33, 7),  S(-22, 42),
      S(60, 20),   S(4, 27),    S(8, 20),    S(-24, 42), S(24, -38),
      S(-19, -5),  S(44, 31),   S(-2, 12),   S(-5, 8),   S(29, 45),
      S(-13, 52),  S(28, 36),   S(12, 14),   S(8, 9),    S(12, -15),
      S(27, -32),  S(-8, 18),   S(-22, 33),  S(53, -18), S(18, 2),
      S(34, -49),  S(36, -30),  S(25, -36),  S(-9, 30),  S(-4, 19),
      S(-7, 28),   S(-24, 8),   S(-31, -57), S(41, -58),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(14, 66),   S(54, 65),   S(15, 66),   S(50, 41),   S(124, -5),
      S(71, 40),   S(55, 44),   S(78, 41),   S(-34, 57),  S(-16, 43),
      S(32, 52),   S(29, 32),   S(74, -1),   S(65, 33),   S(6, -16),
      S(93, 22),   S(42, 2),    S(58, 28),   S(14, 56),   S(43, 1),
      S(114, -15), S(71, 19),   S(165, -32), S(86, -42),  S(-17, 33),
      S(12, -20),  S(22, 43),   S(28, 31),   S(-21, 4),   S(20, -3),
      S(89, -20),  S(24, -22),  S(-40, 25),  S(-39, 2),   S(15, -18),
      S(-78, 37),  S(-16, -17), S(-30, -21), S(-35, -15), S(-20, -21),
      S(-25, 38),  S(-32, 5),   S(-6, 34),   S(7, 15),    S(-42, -7),
      S(22, 12),   S(73, -19),  S(41, -17),  S(-52, 35),  S(-46, -36),
      S(9, -18),   S(-25, 9),   S(-19, 15),  S(1, 15),    S(40, -48),
      S(-69, -50), S(-35, 23),  S(-13, 27),  S(-7, 13),   S(11, 8),
      S(22, 1),    S(11, -5),   S(-24, -38), S(-58, 11),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-3, 8),    S(-70, -59), S(10, 23),   S(20, 79),   S(84, 48),
      S(55, 21),   S(82, -2),   S(61, 45),   S(-2, 5),    S(-117, 53),
      S(-24, 106), S(-34, 83),  S(-72, 115), S(21, 102),  S(-46, 31),
      S(70, -8),   S(-28, 55),  S(3, 72),    S(-23, 90),  S(11, 121),
      S(-10, 63),  S(53, 40),   S(64, -9),   S(46, 36),   S(-57, 4),
      S(-33, 32),  S(25, 21),   S(-30, 48),  S(-31, 112), S(33, 94),
      S(21, 83),   S(8, 43),    S(16, 5),    S(-52, 19),  S(-40, 35),
      S(5, 88),    S(-59, 66),  S(-9, 124),  S(27, 57),   S(27, 50),
      S(32, -16),  S(-26, 25),  S(-31, 78),  S(-9, 11),   S(-53, 98),
      S(24, 38),   S(48, 60),   S(-13, -50), S(46, -14),  S(-19, -22),
      S(11, 24),   S(7, -61),   S(13, -12),  S(67, -45),  S(26, -84),
      S(91, -70),  S(-49, -42), S(13, -36),  S(24, -68),  S(30, -65),
      S(15, -42),  S(-11, -64), S(11, 2),    S(14, 1),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-151, -190), S(-1, -75),  S(35, -44),  S(-3, 22),   S(-41, 9),
      S(-68, -27),   S(40, -1),   S(6, -124),  S(-96, -65), S(-19, -24),
      S(-25, 30),    S(14, -11),  S(26, 52),   S(-12, 54),  S(-10, 39),
      S(50, 12),     S(-122, -2), S(55, 16),   S(-41, 52),  S(-32, 49),
      S(-53, 25),    S(19, 32),   S(73, 48),   S(-67, 56),  S(-22, 23),
      S(-87, 48),    S(-121, 65), S(-210, 79), S(-130, 84), S(-122, 70),
      S(-127, 23),   S(-113, 39), S(-166, 14), S(-69, -2),  S(-166, 77),
      S(-128, 72),   S(-240, 81), S(-150, 47), S(-167, 30), S(-273, 19),
      S(-64, -25),   S(-85, 8),   S(-144, 73), S(-152, 43), S(-192, 36),
      S(-137, 63),   S(-95, 14),  S(-178, 7),  S(45, -66),  S(-68, -9),
      S(-69, 29),    S(-128, 45), S(-106, -6), S(-73, 36),  S(-9, -16),
      S(47, -76),    S(-7, -126), S(62, -80),  S(33, -27),  S(-103, -1),
      S(2, -54),     S(-28, -50), S(88, -91),  S(74, -137),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),     S(14, 21),   S(27, 9),   S(25, 46),
      S(-23, 105), S(-11, 187), S(24, 222), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(-10, -10),  S(5, -67),     S(17, -52),  S(-3, -32),
      S(-28, -134), S(-137, -135), S(-10, -10), S(-10, -10),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(-6, -6),  S(-21, 11), S(-31, -8), S(-28, 11),
      S(24, -26), S(10, -6),  S(33, -36), S(-6, -6),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(-15, -15), S(-24, 2),   S(-9, -5),   S(0, -25),
      S(-22, 25),  S(-15, -15), S(-15, -15), S(-15, -15),
};
constexpr Score KnightMobilityScore[9] = {
      S(-66, -78), S(-27, 32), S(-20, 28), S(26, 22), S(43, 25),
      S(33, 64),   S(36, 70),  S(61, 57),  S(89, 30),
};
constexpr Score BishopMobilityScore[14] = {
      S(-42, -53), S(23, -37), S(32, 47),   S(37, 44),  S(62, 68),
      S(65, 83),   S(79, 109), S(88, 97),   S(86, 109), S(82, 110),
      S(88, 99),   S(75, 82),  S(117, 114), S(139, 84),
};
constexpr Score RookMobilityScore[15] = {
      S(-44, 10), S(-22, 37), S(-9, 79),  S(-6, 134), S(-4, 125),
      S(6, 126),  S(16, 148), S(18, 152), S(44, 149), S(49, 152),
      S(75, 153), S(80, 163), S(71, 181), S(60, 173), S(95, 171),
};
constexpr Score QueenMobilityScore[28] = {
      S(-139, -153), S(-17, -43), S(10, -32),  S(-17, 38),  S(-24, 76),
      S(0, 55),      S(-10, 84),  S(11, 116),  S(18, 169),  S(41, 171),
      S(50, 187),    S(41, 208),  S(57, 171),  S(75, 157),  S(66, 167),
      S(78, 217),    S(81, 202),  S(33, 225),  S(44, 203),  S(96, 215),
      S(104, 208),   S(91, 143),  S(169, 209), S(141, 171), S(155, 151),
      S(182, 211),   S(154, 209), S(197, 246),
};

struct EvalWeights {
    const Score pawnScore = S(98, 169);
    const Score knightScore = S(381, 419);
    const Score bishopScore = S(395, 461);
    const Score rookScore = S(520, 690);
    const Score queenScore = S(1140, 1398);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),      S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
          S(0, 0),      S(0, 0),     S(0, 0),     S(-41, 156), S(61, 118),
          S(-35, 151),  S(15, 41),   S(-49, 26),  S(-59, 12),  S(-116, 106),
          S(-187, 146), S(-45, 143), S(-18, 122), S(68, 28),   S(-4, 6),
          S(68, -5),    S(119, 52),  S(68, 76),   S(29, 65),   S(-31, 89),
          S(-39, 62),   S(-19, 50),  S(4, 14),    S(26, -40),  S(41, -11),
          S(-32, 29),   S(-43, 57),  S(-62, 69),  S(-45, 68),  S(-18, 15),
          S(4, -14),    S(-12, -10), S(-20, 9),   S(-1, 8),    S(-22, 37),
          S(-23, 50),   S(-21, 12),  S(-3, 8),    S(-5, 0),    S(7, 2),
          S(12, 3),     S(47, -1),   S(5, 15),    S(-33, 45),  S(-20, 42),
          S(-8, 5),     S(13, 29),   S(-2, -7),   S(47, -4),   S(54, -5),
          S(-12, 0),    S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
          S(0, 0),      S(0, 0),     S(0, 0),     S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-194, -114), S(-99, -38), S(-60, -8),  S(-43, -34), S(57, 3),
          S(-142, -2),   S(-90, -20), S(-62, -91), S(-16, 2),   S(23, 25),
          S(-28, 3),     S(17, 8),    S(55, -46),  S(136, -74), S(60, 40),
          S(79, -64),    S(5, -12),   S(53, -13),  S(49, 53),   S(67, 75),
          S(129, 8),     S(128, 28),  S(90, 21),   S(83, -36),  S(13, 71),
          S(11, -20),    S(47, 56),   S(68, 53),   S(36, 92),   S(112, 35),
          S(26, 1),      S(109, -14), S(8, 52),    S(5, 19),    S(21, 75),
          S(12, 65),     S(28, 41),   S(42, 13),   S(65, 52),   S(21, 59),
          S(-26, 29),    S(-35, -17), S(-13, 19),  S(-2, 13),   S(40, 16),
          S(20, 4),      S(11, 23),   S(23, -39),  S(-59, -31), S(-65, -50),
          S(-52, 1),     S(5, -10),   S(1, 0),     S(-9, 4),    S(8, -69),
          S(0, -44),     S(-71, 14),  S(-50, -39), S(-10, 15),  S(24, -27),
          S(20, -50),    S(35, -23),  S(-44, -32), S(-78, -65),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-77, 45),  S(-52, 1),   S(-36, 59),  S(-69, -8), S(-27, -22),
          S(-89, -7),  S(25, 25),   S(-82, -65), S(13, -4),  S(35, 2),
          S(-28, 38),  S(-28, -21), S(36, -31),  S(-27, 35), S(-12, -25),
          S(-45, -23), S(-32, 42),  S(46, 38),   S(28, 19),  S(16, 2),
          S(5, -33),   S(93, 18),   S(78, -42),  S(40, -4),  S(-38, -24),
          S(-20, 41),  S(8, -18),   S(81, 24),   S(59, -4),  S(5, 28),
          S(11, 12),   S(-12, -8),  S(16, 46),   S(-33, 7),  S(-22, 42),
          S(60, 20),   S(4, 27),    S(8, 20),    S(-24, 42), S(24, -38),
          S(-19, -5),  S(44, 31),   S(-2, 12),   S(-5, 8),   S(29, 45),
          S(-13, 52),  S(28, 36),   S(12, 14),   S(8, 9),    S(12, -15),
          S(27, -32),  S(-8, 18),   S(-22, 33),  S(53, -18), S(18, 2),
          S(34, -49),  S(36, -30),  S(25, -36),  S(-9, 30),  S(-4, 19),
          S(-7, 28),   S(-24, 8),   S(-31, -57), S(41, -58),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(14, 66),   S(54, 65),   S(15, 66),   S(50, 41),   S(124, -5),
          S(71, 40),   S(55, 44),   S(78, 41),   S(-34, 57),  S(-16, 43),
          S(32, 52),   S(29, 32),   S(74, -1),   S(65, 33),   S(6, -16),
          S(93, 22),   S(42, 2),    S(58, 28),   S(14, 56),   S(43, 1),
          S(114, -15), S(71, 19),   S(165, -32), S(86, -42),  S(-17, 33),
          S(12, -20),  S(22, 43),   S(28, 31),   S(-21, 4),   S(20, -3),
          S(89, -20),  S(24, -22),  S(-40, 25),  S(-39, 2),   S(15, -18),
          S(-78, 37),  S(-16, -17), S(-30, -21), S(-35, -15), S(-20, -21),
          S(-25, 38),  S(-32, 5),   S(-6, 34),   S(7, 15),    S(-42, -7),
          S(22, 12),   S(73, -19),  S(41, -17),  S(-52, 35),  S(-46, -36),
          S(9, -18),   S(-25, 9),   S(-19, 15),  S(1, 15),    S(40, -48),
          S(-69, -50), S(-35, 23),  S(-13, 27),  S(-7, 13),   S(11, 8),
          S(22, 1),    S(11, -5),   S(-24, -38), S(-58, 11),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-3, 8),    S(-70, -59), S(10, 23),   S(20, 79),   S(84, 48),
          S(55, 21),   S(82, -2),   S(61, 45),   S(-2, 5),    S(-117, 53),
          S(-24, 106), S(-34, 83),  S(-72, 115), S(21, 102),  S(-46, 31),
          S(70, -8),   S(-28, 55),  S(3, 72),    S(-23, 90),  S(11, 121),
          S(-10, 63),  S(53, 40),   S(64, -9),   S(46, 36),   S(-57, 4),
          S(-33, 32),  S(25, 21),   S(-30, 48),  S(-31, 112), S(33, 94),
          S(21, 83),   S(8, 43),    S(16, 5),    S(-52, 19),  S(-40, 35),
          S(5, 88),    S(-59, 66),  S(-9, 124),  S(27, 57),   S(27, 50),
          S(32, -16),  S(-26, 25),  S(-31, 78),  S(-9, 11),   S(-53, 98),
          S(24, 38),   S(48, 60),   S(-13, -50), S(46, -14),  S(-19, -22),
          S(11, 24),   S(7, -61),   S(13, -12),  S(67, -45),  S(26, -84),
          S(91, -70),  S(-49, -42), S(13, -36),  S(24, -68),  S(30, -65),
          S(15, -42),  S(-11, -64), S(11, 2),    S(14, 1),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-151, -190), S(-1, -75),  S(35, -44),  S(-3, 22),   S(-41, 9),
          S(-68, -27),   S(40, -1),   S(6, -124),  S(-96, -65), S(-19, -24),
          S(-25, 30),    S(14, -11),  S(26, 52),   S(-12, 54),  S(-10, 39),
          S(50, 12),     S(-122, -2), S(55, 16),   S(-41, 52),  S(-32, 49),
          S(-53, 25),    S(19, 32),   S(73, 48),   S(-67, 56),  S(-22, 23),
          S(-87, 48),    S(-121, 65), S(-210, 79), S(-130, 84), S(-122, 70),
          S(-127, 23),   S(-113, 39), S(-166, 14), S(-69, -2),  S(-166, 77),
          S(-128, 72),   S(-240, 81), S(-150, 47), S(-167, 30), S(-273, 19),
          S(-64, -25),   S(-85, 8),   S(-144, 73), S(-152, 43), S(-192, 36),
          S(-137, 63),   S(-95, 14),  S(-178, 7),  S(45, -66),  S(-68, -9),
          S(-69, 29),    S(-128, 45), S(-106, -6), S(-73, 36),  S(-9, -16),
          S(47, -76),    S(-7, -126), S(62, -80),  S(33, -27),  S(-103, -1),
          S(2, -54),     S(-28, -50), S(88, -91),  S(74, -137),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),     S(14, 21),   S(27, 9),   S(25, 46),
          S(-23, 105), S(-11, 187), S(24, 222), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(-10, -10),  S(5, -67),     S(17, -52),  S(-3, -32),
          S(-28, -134), S(-137, -135), S(-10, -10), S(-10, -10),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(-6, -6),  S(-21, 11), S(-31, -8), S(-28, 11),
          S(24, -26), S(10, -6),  S(33, -36), S(-6, -6),
    };
    const Score backwardPawnRankBonus[8] = {
          S(-15, -15), S(-24, 2),   S(-9, -5),   S(0, -25),
          S(-22, 25),  S(-15, -15), S(-15, -15), S(-15, -15),
    };
    const Score KnightMobilityScore[9] = {
          S(-66, -78), S(-27, 32), S(-20, 28), S(26, 22), S(43, 25),
          S(33, 64),   S(36, 70),  S(61, 57),  S(89, 30),
    };
    const Score BishopMobilityScore[14] = {
          S(-42, -53), S(23, -37), S(32, 47),   S(37, 44),  S(62, 68),
          S(65, 83),   S(79, 109), S(88, 97),   S(86, 109), S(82, 110),
          S(88, 99),   S(75, 82),  S(117, 114), S(139, 84),
    };
    const Score RookMobilityScore[15] = {
          S(-44, 10), S(-22, 37), S(-9, 79),  S(-6, 134), S(-4, 125),
          S(6, 126),  S(16, 148), S(18, 152), S(44, 149), S(49, 152),
          S(75, 153), S(80, 163), S(71, 181), S(60, 173), S(95, 171),
    };
    const Score QueenMobilityScore[28] = {
          S(-139, -153), S(-17, -43), S(10, -32),  S(-17, 38),  S(-24, 76),
          S(0, 55),      S(-10, 84),  S(11, 116),  S(18, 169),  S(41, 171),
          S(50, 187),    S(41, 208),  S(57, 171),  S(75, 157),  S(66, 167),
          S(78, 217),    S(81, 202),  S(33, 225),  S(44, 203),  S(96, 215),
          S(104, 208),   S(91, 143),  S(169, 209), S(141, 171), S(155, 151),
          S(182, 211),   S(154, 209), S(197, 246),
    };
};

#endif // WEIGHTS_H_
