#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"
constexpr Score pawnScore = S(82, 128);
constexpr Score knightScore = S(368, 428);
constexpr Score bishopScore = S(388, 422);
constexpr Score rookScore = S(521, 685);
constexpr Score queenScore = S(1133, 1346);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),      S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),   S(0, 0),    S(27, 123), S(-10, 105),
      S(-36, 120),  S(22, 51), S(-14, 42), S(-19, 40), S(-133, 120),
      S(-105, 121), S(6, 114), S(-9, 121), S(25, 66),  S(20, 3),
      S(49, -1),    S(98, 35), S(74, 65),  S(14, 91),  S(-15, 49),
      S(-13, 34),   S(3, 22),  S(6, -7),   S(37, 5),   S(34, 0),
      S(23, 23),    S(13, 25), S(-20, 25), S(-16, 25), S(2, 10),
      S(14, -6),    S(13, 1),  S(17, 4),   S(0, 12),   S(-4, 5),
      S(-12, 20),   S(-7, 19), S(6, 12),   S(11, 1),   S(30, 10),
      S(25, 9),     S(33, 5),  S(15, 1),   S(-6, 24),  S(-7, 24),
      S(7, 12),     S(0, 26),  S(13, 31),  S(48, 12),  S(40, 3),
      S(10, 4),     S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),   S(0, 0),    S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-154, -33), S(-125, -42), S(-48, -13),   S(-3, 2),    S(63, -27),
      S(-91, -29),  S(-24, -22),  S(-106, -110), S(-41, 9),   S(12, -14),
      S(33, -18),   S(62, -21),   S(72, -16),    S(110, -34), S(34, -4),
      S(63, -21),   S(-21, -2),   S(54, -25),    S(48, 26),   S(90, 24),
      S(104, 16),   S(134, 4),    S(88, -34),    S(34, -40),  S(0, 19),
      S(14, 27),    S(34, 49),    S(73, 43),     S(55, 41),   S(75, 41),
      S(42, 24),    S(77, -5),    S(-5, 9),      S(-1, 21),   S(22, 42),
      S(39, 37),    S(43, 45),    S(45, 33),     S(64, 7),    S(13, 16),
      S(-14, -19),  S(-6, 2),     S(11, 17),     S(9, 32),    S(40, 22),
      S(25, 0),     S(27, -4),    S(15, -17),    S(-51, 11),  S(-36, 21),
      S(-8, -17),   S(12, 5),     S(19, 8),      S(22, -2),   S(0, -35),
      S(2, -21),    S(-88, -33),  S(-18, -17),   S(-47, 8),   S(3, 2),
      S(10, 4),     S(2, -10),    S(4, -18),     S(-44, 5),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(2, -1),    S(-58, 0),   S(-80, -3),  S(-55, -4), S(-36, 9),
      S(-39, -14), S(-30, -10), S(-40, -29), S(-17, -2), S(8, -26),
      S(-15, 7),   S(-31, 18),  S(-4, 2),    S(32, -8),  S(27, -19),
      S(-14, -13), S(-6, 28),   S(14, -2),   S(12, 8),   S(27, 10),
      S(47, -7),   S(74, 1),    S(55, -9),   S(43, 8),   S(-23, 8),
      S(15, 11),   S(28, 0),    S(59, 3),    S(43, 9),   S(29, 7),
      S(9, 4),     S(-18, 17),  S(-12, 6),   S(-8, 25),  S(10, 16),
      S(33, 16),   S(22, 13),   S(0, 22),    S(-9, 24),  S(15, -2),
      S(-2, 4),    S(21, 16),   S(14, 5),    S(17, 9),   S(22, 18),
      S(26, 1),    S(24, -8),   S(12, -14),  S(14, 0),   S(12, -5),
      S(27, -13),  S(-7, 6),    S(8, 6),     S(40, -10), S(29, -3),
      S(29, 4),    S(-15, -16), S(46, 2),    S(8, 21),   S(11, 15),
      S(-12, -8),  S(1, 14),    S(31, -11),  S(-1, -17),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(41, 11),  S(30, 23),  S(26, 39),  S(32, 39),  S(71, 31),  S(50, 20),
      S(58, 17),  S(86, 13),  S(2, 22),   S(-9, 39),  S(24, 50),  S(62, 30),
      S(39, 16),  S(87, 12),  S(58, -4),  S(83, 3),   S(9, 10),   S(31, 33),
      S(32, 24),  S(51, 16),  S(51, 20),  S(92, -8),  S(124, 6),  S(84, -11),
      S(-31, 25), S(12, 12),  S(0, 31),   S(3, 30),   S(17, 0),   S(27, 1),
      S(53, -7),  S(42, -13), S(-29, 6),  S(-42, 20), S(-37, 38), S(-32, 15),
      S(-14, 14), S(-29, 17), S(14, -8),  S(5, -4),   S(-48, 5),  S(-43, 20),
      S(-27, 2),  S(-32, 7),  S(-22, 13), S(-18, 3),  S(41, -27), S(9, -4),
      S(-34, -2), S(-39, -6), S(-10, 14), S(-5, -5),  S(0, -15),  S(18, -20),
      S(34, -33), S(-47, 10), S(-22, 0),  S(-16, 6),  S(-3, 3),   S(8, -6),
      S(9, -17),  S(1, -12),  S(0, 1),    S(-29, -7),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-34, 20), S(-21, 2),   S(12, 52),  S(13, 76),  S(22, 63),   S(33, 52),
      S(89, 18),  S(63, 13),   S(-1, 6),   S(-45, 23), S(-8, 79),   S(-23, 72),
      S(-8, 113), S(23, 55),   S(34, 52),  S(90, 19),  S(3, 26),    S(-42, 46),
      S(-9, 38),  S(-6, 71),   S(36, 79),  S(84, 69),  S(67, 32),   S(62, 51),
      S(-29, 29), S(-32, 51),  S(-21, 30), S(-18, 61), S(-11, 94),  S(8, 81),
      S(26, 85),  S(13, 61),   S(-12, 9),  S(-39, 55), S(-41, 52),  S(-17, 59),
      S(-17, 65), S(-26, 77),  S(2, 36),   S(8, 53),   S(-13, -13), S(-12, 32),
      S(-16, 33), S(-21, 30),  S(-17, 59), S(5, 16),   S(8, 34),    S(20, 45),
      S(-1, -11), S(-20, -21), S(3, -25),  S(8, -13),  S(3, -5),    S(19, -34),
      S(20, -37), S(42, -57),  S(-1, -28), S(-13, -3), S(24, -50),  S(23, -28),
      S(10, -2),  S(-5, -20),  S(13, -38), S(-24, 9),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-87, -122), S(-9, -50),  S(23, -19),   S(-43, -26), S(-80, -38),
      S(-27, 16),   S(2, -8),    S(-11, -103), S(-36, -20), S(3, 25),
      S(-50, 4),    S(11, 37),   S(15, 42),    S(16, 33),   S(10, 22),
      S(25, 1),     S(-87, -14), S(22, 21),    S(-27, 54),  S(-8, 64),
      S(-10, 52),   S(24, 60),   S(64, 37),    S(-22, -2),  S(-24, -20),
      S(-48, 14),   S(-79, 52),  S(-137, 75),  S(-113, 77), S(-65, 68),
      S(-64, 46),   S(-94, 21),  S(-104, -38), S(-62, 3),   S(-132, 54),
      S(-120, 66),  S(-177, 79), S(-127, 54),  S(-109, 27), S(-149, 5),
      S(-60, -26),  S(-26, -1),  S(-107, 30),  S(-152, 50), S(-142, 50),
      S(-137, 34),  S(-71, 14),  S(-78, -13),  S(52, -42),  S(-8, -18),
      S(-44, -2),   S(-86, 15),  S(-70, 13),   S(-52, 12),  S(11, -15),
      S(26, -39),   S(52, -108), S(79, -86),   S(60, -62),  S(-75, -28),
      S(8, -50),    S(-42, -35), S(60, -74),   S(53, -118),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),   S(-8, 10),  S(-1, 14),   S(-4, 40),
      S(10, 81), S(27, 137), S(101, 199), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(-10, -10), S(-7, -28),  S(-16, -19), S(-10, -33),
      S(18, -65),  S(-44, -67), S(-10, -10), S(-10, -10),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(-6, -6),  S(-24, -7), S(-26, -14), S(-16, -7),
      S(-1, -26), S(20, -43), S(-22, -9),  S(-6, -6),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(-15, -15), S(-21, -6),  S(-4, -6),   S(-6, -5),
      S(-17, -5),  S(-15, -15), S(-15, -15), S(-15, -15),
};
constexpr Score KnightMobilityScore[9] = {
      S(-51, -37), S(-31, 3), S(-14, 15), S(-6, 36), S(4, 46),
      S(14, 47),   S(29, 48), S(39, 42),  S(41, 26),
};
constexpr Score BishopMobilityScore[14] = {
      S(-22, -29), S(6, -3),  S(13, 21), S(28, 52),  S(38, 66),
      S(47, 74),   S(56, 80), S(63, 87), S(66, 86),  S(71, 87),
      S(90, 84),   S(71, 97), S(98, 73), S(115, 88),
};
constexpr Score RookMobilityScore[15] = {
      S(-17, 42), S(-9, 63),  S(-1, 81),  S(7, 97),   S(5, 115),
      S(13, 123), S(22, 128), S(33, 132), S(40, 140), S(49, 154),
      S(64, 149), S(65, 162), S(71, 159), S(61, 165), S(82, 170),
};
constexpr Score QueenMobilityScore[28] = {
      S(-71, -91), S(-36, -50), S(5, -23),   S(-3, 24),   S(17, 87),
      S(37, 54),   S(32, 124),  S(46, 113),  S(49, 120),  S(57, 151),
      S(67, 137),  S(67, 161),  S(71, 170),  S(65, 176),  S(74, 183),
      S(66, 202),  S(61, 213),  S(63, 213),  S(83, 200),  S(90, 199),
      S(107, 197), S(150, 186), S(134, 180), S(165, 192), S(117, 175),
      S(103, 178), S(138, 218), S(102, 204),
};

struct EvalWeights {
    const Score pawnScore = S(94, 125);
    const Score knightScore = S(381, 418);
    const Score bishopScore = S(396, 414);
    const Score rookScore = S(532, 695);
    const Score queenScore = S(1132, 1341);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),      S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),    S(0, 0),    S(18, 118), S(9, 95),
          S(-21, 106),  S(7, 46),   S(-29, 47), S(-1, 37),  S(-115, 106),
          S(-119, 138), S(-9, 101), S(-9, 104), S(17, 51),  S(18, 1),
          S(35, -5),    S(86, 21),  S(58, 71),  S(21, 78),  S(-20, 60),
          S(-16, 42),   S(-1, 19),  S(6, -10),  S(29, -6),  S(28, 4),
          S(14, 23),    S(9, 25),   S(-36, 33), S(-28, 25), S(-12, 7),
          S(2, -7),     S(1, -4),   S(5, 4),    S(-3, 7),   S(-10, 6),
          S(-26, 24),   S(-19, 19), S(-7, 10),  S(-3, 9),   S(17, 10),
          S(10, 11),    S(27, 6),   S(2, 1),    S(-22, 26), S(-17, 25),
          S(-4, 12),    S(-2, 15),  S(9, 17),   S(36, 10),  S(43, 2),
          S(-1, 2),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),    S(0, 0),    S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-159, -49), S(-111, -36), S(-40, -13), S(-20, -12), S(45, -11),
          S(-75, -18),  S(-41, -38),  S(-91, -99), S(-26, -8),  S(1, 0),
          S(47, -19),   S(54, -5),    S(57, -15),  S(93, -18),  S(17, -17),
          S(48, -32),   S(-18, 11),   S(37, -11),  S(58, 13),   S(79, 12),
          S(101, 7),    S(121, -11),  S(72, -22),  S(47, -30),  S(2, 6),
          S(9, 17),     S(33, 39),    S(68, 35),   S(45, 34),   S(69, 29),
          S(28, 10),    S(61, -2),    S(-7, 17),   S(5, 10),    S(16, 38),
          S(29, 29),    S(36, 40),    S(34, 23),   S(53, 4),    S(22, 8),
          S(-23, -16),  S(-19, -1),   S(1, 4),     S(9, 23),    S(28, 24),
          S(13, -3),    S(16, -13),   S(-1, -9),   S(-41, -6),  S(-23, 3),
          S(-14, -5),   S(2, -2),     S(9, -2),    S(8, -5),    S(1, -21),
          S(-6, -10),   S(-86, -20),  S(-18, -22), S(-36, -7),  S(-8, 1),
          S(-4, -10),   S(-4, -10),   S(-14, -6),  S(-33, -15),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-11, 4),  S(-41, 3),  S(-64, 9),   S(-72, 5),  S(-44, -5),
          S(-56, 2),  S(-14, 1),  S(-24, -13), S(-8, -11), S(8, -10),
          S(-14, -4), S(-14, 2),  S(13, -12),  S(19, -12), S(36, -4),
          S(-7, -12), S(-10, 14), S(22, 2),    S(28, 4),   S(38, -1),
          S(35, -1),  S(59, 6),   S(55, -2),   S(34, 2),   S(-17, -2),
          S(7, 7),    S(13, 16),  S(50, 20),   S(34, 21),  S(38, 11),
          S(9, 14),   S(-3, 2),   S(-9, -3),   S(-7, 16),  S(6, 20),
          S(35, 15),  S(31, 21),  S(5, 18),    S(-2, 12),  S(28, -18),
          S(1, 11),   S(21, 6),   S(14, 17),   S(15, 16),  S(24, 21),
          S(18, 14),  S(19, 1),   S(25, -7),   S(15, 3),   S(13, -3),
          S(27, -7),  S(0, 10),   S(11, 6),    S(29, 0),   S(35, -1),
          S(20, 0),   S(-4, -2),  S(32, 15),   S(11, 11),  S(-4, 6),
          S(0, 5),    S(3, 14),   S(16, -3),   S(12, -7),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(24, 20),  S(47, 16),  S(10, 40),  S(20, 28),  S(56, 17),
          S(33, 26),  S(45, 21),  S(69, 13),  S(5, 22),   S(5, 32),
          S(26, 37),  S(62, 15),  S(39, 17),  S(73, 9),   S(42, 9),
          S(67, 6),   S(-1, 22),  S(23, 26),  S(21, 20),  S(37, 19),
          S(54, 9),   S(76, -6),  S(110, -3), S(67, 2),   S(-18, 25),
          S(9, 18),   S(2, 34),   S(13, 19),  S(20, 3),   S(27, 1),
          S(37, 7),   S(28, -2),  S(-36, 16), S(-30, 20), S(-20, 25),
          S(-17, 20), S(-11, 15), S(-26, 16), S(12, 6),   S(-8, 10),
          S(-37, 13), S(-28, 16), S(-20, 8),  S(-18, 12), S(-11, 10),
          S(-3, -4),  S(34, -21), S(-6, -14), S(-48, 6),  S(-28, 4),
          S(-10, 9),  S(-7, 6),   S(0, -6),   S(5, -10),  S(30, -18),
          S(-33, -1), S(-21, 6),  S(-17, 7),  S(-3, 7),   S(7, 5),
          S(12, -5),  S(1, -3),   S(7, -6),   S(-19, -8),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-41, 36), S(-20, 18), S(4, 50),    S(17, 60),  S(34, 48),
          S(41, 38),  S(74, 10),  S(46, 31),   S(-16, 24), S(-49, 40),
          S(-21, 65), S(-26, 85), S(-16, 105), S(33, 39),  S(18, 36),
          S(76, 36),  S(-12, 26), S(-26, 32),  S(-9, 54),  S(-12, 85),
          S(21, 79),  S(72, 54),  S(83, 16),   S(71, 55),  S(-25, 32),
          S(-24, 35), S(-21, 46), S(-21, 69),  S(-4, 80),  S(11, 79),
          S(19, 77),  S(23, 46),  S(-15, 8),   S(-27, 42), S(-28, 47),
          S(-21, 73), S(-17, 73), S(-13, 73),  S(-2, 53),  S(15, 61),
          S(-13, 3),  S(-8, 17),  S(-13, 29),  S(-15, 39), S(-12, 59),
          S(7, 29),   S(16, 19),  S(11, 32),   S(-12, 7),  S(-14, -10),
          S(3, -9),   S(15, -9),  S(8, 5),     S(19, -21), S(17, -19),
          S(30, -39), S(-7, -11), S(-1, -20),  S(10, -29), S(19, -11),
          S(9, -14),  S(-5, -6),  S(-1, -20),  S(-7, -4),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-71, -105), S(8, -65),   S(12, -35),  S(-26, -10), S(-63, -21),
          S(-26, -1),   S(18, 9),    S(6, -87),   S(-19, -34), S(-14, 10),
          S(-70, 19),   S(-4, 21),   S(0, 26),    S(-1, 41),   S(26, 37),
          S(9, 3),      S(-70, -7),  S(6, 11),    S(-30, 40),  S(-23, 53),
          S(-23, 65),   S(30, 67),   S(48, 49),   S(-6, 9),    S(-39, -18),
          S(-33, 25),   S(-62, 44),  S(-118, 60), S(-103, 63), S(-79, 62),
          S(-70, 47),   S(-77, 5),   S(-87, -23), S(-47, 4),   S(-114, 42),
          S(-134, 62),  S(-158, 66), S(-109, 48), S(-110, 28), S(-133, 6),
          S(-50, -33),  S(-42, -5),  S(-91, 19),  S(-136, 42), S(-129, 43),
          S(-122, 34),  S(-68, 7),   S(-95, -8),  S(39, -48),  S(-12, -17),
          S(-30, -3),   S(-70, 8),   S(-76, 15),  S(-54, 6),   S(9, -14),
          S(22, -40),   S(37, -93),  S(72, -71),  S(44, -50),  S(-65, -28),
          S(6, -43),    S(-37, -32), S(51, -63),  S(45, -103),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),  S(-5, 3),   S(-5, 14),  S(-4, 45),
          S(5, 82), S(20, 145), S(91, 188), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(-10, -10), S(-5, -28),  S(-8, -19),  S(0, -33),
          S(4, -49),   S(-60, -50), S(-10, -10), S(-10, -10),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(-6, -6),  S(-16, -6), S(-22, -15), S(-16, -13),
          S(-5, -26), S(6, -29),  S(-37, -23), S(-6, -6),
    };
    const Score backwardPawnRankBonus[8] = {
          S(-15, -15), S(-17, -12), S(-5, -6),   S(-9, -3),
          S(-17, -7),  S(-15, -15), S(-15, -15), S(-15, -15),
    };
    const Score KnightMobilityScore[9] = {
          S(-35, -21), S(-17, 15), S(-5, 25), S(6, 34),  S(15, 49),
          S(25, 47),   S(36, 45),  S(45, 31), S(40, 30),
    };
    const Score BishopMobilityScore[14] = {
          S(-9, -17), S(15, 9),  S(23, 32), S(37, 46), S(45, 60),
          S(53, 67),  S(57, 71), S(61, 77), S(65, 73), S(70, 74),
          S(79, 69),  S(56, 82), S(82, 57), S(96, 98),
    };
    const Score RookMobilityScore[15] = {
          S(-25, 59), S(-15, 78), S(-7, 95),  S(-2, 107), S(0, 111),
          S(8, 126),  S(17, 127), S(25, 134), S(39, 139), S(44, 142),
          S(52, 150), S(56, 159), S(59, 157), S(45, 162), S(70, 175),
    };
    const Score QueenMobilityScore[28] = {
          S(-71, -93), S(-19, -33), S(4, -6),    S(11, 40),   S(20, 70),
          S(28, 68),   S(33, 107),  S(40, 115),  S(49, 114),  S(54, 139),
          S(61, 135),  S(65, 147),  S(67, 156),  S(65, 165),  S(74, 173),
          S(69, 190),  S(71, 197),  S(74, 201),  S(85, 208),  S(84, 214),
          S(120, 194), S(135, 202), S(118, 197), S(148, 203), S(126, 190),
          S(119, 182), S(122, 208), S(119, 221),
    };
};
#endif // WEIGHTS_H_
