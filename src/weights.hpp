#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"

constexpr Score pawnScore = S(100, 100);
constexpr Score knightScore = S(291, 280);
constexpr Score bishopScore = S(308, 350);
constexpr Score rookScore = S(423, 567);
constexpr Score queenScore = S(881, 965);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),     S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0),
      S(0, 0),     S(0, 0),    S(0, 0),     S(44, 103),  S(71, 81),
      S(15, 107),  S(51, 65),  S(-16, 76),  S(18, 54),   S(-78, 115),
      S(-71, 133), S(-28, 76), S(-36, 67),  S(-16, 32),  S(-4, -13),
      S(2, -14),   S(30, 5),   S(1, 49),    S(-9, 43),   S(-44, 35),
      S(-45, 17),  S(-33, 3),  S(-28, -19), S(-15, -17), S(-8, -11),
      S(-28, 3),   S(-17, 2),  S(-58, 15),  S(-57, 9),   S(-45, 0),
      S(-37, -11), S(-38, -9), S(-38, -3),  S(-42, -1),  S(-40, -2),
      S(-49, 9),   S(-51, 4),  S(-45, -1),  S(-37, 0),   S(-31, 0),
      S(-32, -1),  S(-20, -4), S(-31, -7),  S(-48, 11),  S(-58, 9),
      S(-43, 3),   S(-41, -5), S(-38, 6),   S(-15, -2),  S(-13, -6),
      S(-32, -8),  S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0),
      S(0, 0),     S(0, 0),    S(0, 0),     S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-141, -61), S(-81, -48), S(-43, -9),  S(-4, -22), S(17, 1),
      S(-55, -10),  S(-157, 6),  S(-94, -69), S(-11, 7),  S(7, 5),
      S(27, -8),    S(53, -18),  S(75, -17),  S(99, -25), S(-1, 0),
      S(57, -35),   S(-6, -3),   S(23, 5),    S(46, 29),  S(60, 27),
      S(88, 26),    S(110, 11),  S(42, -4),   S(59, -25), S(-13, 9),
      S(2, 24),     S(24, 43),   S(57, 39),   S(28, 42),  S(52, 34),
      S(16, 14),    S(45, -3),   S(-5, 9),    S(-9, 17),  S(5, 47),
      S(11, 40),    S(21, 45),   S(12, 34),   S(23, 9),   S(16, 7),
      S(-30, -4),   S(-21, 2),   S(-9, 16),   S(-9, 36),  S(7, 33),
      S(-3, 12),    S(5, -4),    S(3, -8),    S(-40, -7), S(-24, -10),
      S(-20, 2),    S(-12, 8),   S(-4, 7),    S(-5, -1),  S(-3, -5),
      S(0, -12),    S(-82, -19), S(-32, -28), S(-35, -3), S(-27, 6),
      S(-17, -8),   S(-4, -17),  S(-16, -15), S(-8, 0),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-18, 0),  S(-62, 12), S(-46, 11),  S(-112, 36), S(-32, 9),  S(-55, -5),
      S(31, -5),  S(-57, 5),  S(-11, -7),  S(13, -7),   S(7, 5),    S(10, 6),
      S(10, 7),   S(5, 3),    S(16, 7),    S(9, -13),   S(-13, 25), S(8, 10),
      S(19, 13),  S(26, 13),  S(33, 12),   S(67, 15),   S(39, 15),  S(21, 15),
      S(-16, 9),  S(-2, 11),  S(9, 19),    S(18, 39),   S(14, 39),  S(23, 25),
      S(-3, 22),  S(-5, 10),  S(-14, 12),  S(-17, 21),  S(-9, 28),  S(7, 34),
      S(-4, 33),  S(-14, 26), S(-15, 17),  S(5, -5),    S(-16, 9),  S(-1, 1),
      S(-12, 18), S(-4, 16),  S(0, 23),    S(-14, 19),  S(-5, 2),   S(3, -8),
      S(-4, 7),   S(-10, -5), S(6, -5),    S(-14, 12),  S(-10, 16), S(4, 2),
      S(3, -1),   S(-1, -22), S(-30, -21), S(10, 15),   S(-17, -2), S(-28, 8),
      S(-25, 7),  S(-14, 9),  S(16, -28),  S(-8, -27),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(25, 46),  S(13, 49),  S(4, 65),   S(44, 47),  S(80, 33),  S(80, 24),
      S(105, 24), S(78, 27),  S(-6, 40),  S(-6, 49),  S(17, 51),  S(46, 39),
      S(30, 37),  S(72, 30),  S(49, 24),  S(80, 14),  S(4, 24),   S(34, 30),
      S(38, 32),  S(38, 31),  S(93, 19),  S(81, 12),  S(116, 15), S(91, 0),
      S(-12, 38), S(8, 32),   S(-4, 49),  S(1, 49),   S(19, 31),  S(7, 18),
      S(39, 22),  S(30, 9),   S(-49, 37), S(-34, 37), S(-24, 37), S(-20, 37),
      S(-23, 39), S(-39, 36), S(6, 19),   S(-26, 28), S(-40, 26), S(-42, 35),
      S(-23, 12), S(-32, 34), S(-28, 36), S(-27, 25), S(17, 0),   S(-15, 7),
      S(-51, 22), S(-35, 23), S(-23, 25), S(-23, 25), S(-21, 16), S(-7, 10),
      S(11, -5),  S(-44, 7),  S(-40, 20), S(-35, 26), S(-30, 28), S(-25, 24),
      S(-20, 16), S(-25, 18), S(-22, 19), S(-49, 12),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-41, 35), S(-33, 36),  S(17, 56),   S(71, 35),   S(20, 67),
      S(56, 42),  S(129, -15), S(66, 13),   S(-20, 29),  S(-41, 48),
      S(-14, 72), S(-29, 102), S(-14, 104), S(32, 77),   S(33, 60),
      S(83, 25),  S(5, 12),    S(-20, 52),  S(-18, 73),  S(0, 64),
      S(17, 87),  S(75, 62),   S(60, 44),   S(61, 29),   S(-22, 28),
      S(-31, 53), S(-16, 57),  S(-27, 95),  S(-13, 106), S(6, 80),
      S(13, 73),  S(5, 54),    S(-14, -13), S(-32, 50),  S(-36, 73),
      S(-26, 79), S(-27, 80),  S(-32, 78),  S(-12, 53),  S(-5, 50),
      S(-32, 1),  S(-19, 29),  S(-29, 51),  S(-30, 51),  S(-28, 60),
      S(-12, 36), S(-3, 38),   S(-8, 6),    S(-21, 18),  S(-25, -1),
      S(-6, 3),   S(-3, 11),   S(-7, 20),   S(7, -35),   S(-7, -4),
      S(25, -89), S(-22, 4),   S(-11, -22), S(-11, -25), S(-6, -7),
      S(-6, -29), S(-23, 1),   S(-1, -36),  S(-44, -16),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-147, -102), S(-102, -36), S(-29, -53),  S(-33, -17), S(-71, -19),
      S(7, -33),     S(41, -34),   S(76, -135),  S(-84, 6),   S(-24, 14),
      S(-79, 10),    S(48, 5),     S(-18, 25),   S(-23, 22),  S(64, 19),
      S(11, 13),     S(-62, -14),  S(-50, 19),   S(-109, 44), S(-64, 43),
      S(-68, 54),    S(30, 41),    S(55, 30),    S(76, -13),  S(-63, -1),
      S(-74, 19),    S(-63, 34),   S(-171, 61),  S(-107, 58), S(-61, 48),
      S(-182, 53),   S(-160, 22),  S(-100, -25), S(-100, 8),  S(-166, 45),
      S(-152, 53),   S(-170, 60),  S(-122, 47),  S(-123, 27), S(-147, 15),
      S(-61, -26),   S(-24, -6),   S(-94, 22),   S(-110, 38), S(-108, 37),
      S(-118, 28),   S(-67, 7),    S(-86, -8),   S(47, -46),  S(-5, -13),
      S(-28, 0),     S(-66, 12),   S(-53, 12),   S(-45, 5),   S(10, -16),
      S(22, -34),    S(50, -101),  S(71, -69),   S(40, -47),  S(-76, -24),
      S(3, -48),     S(-45, -24),  S(46, -60),   S(48, -94),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),  S(2, 5),    S(-3, 11), S(-4, 31),
      S(5, 62), S(14, 115), S(0, 96),  S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(0, 0),    S(0, -19),   S(-4, -13), S(5, -23),
      S(16, -55), S(11, -108), S(0, 0),    S(0, 0),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(0, 0),    S(-11, -6), S(-17, -11), S(-14, -8),
      S(-4, -20), S(6, -37),  S(-17, 26),  S(0, 0),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(0, 0),   S(-14, -3), S(1, -5), S(-3, -3),
      S(-14, 3), S(0, 0),    S(0, 0),  S(0, 0),
};
constexpr Score KnightMobilityScore[9] = {
      S(-50, -32), S(-33, 9), S(-18, 35), S(-10, 45), S(-1, 46),
      S(6, 57),    S(16, 49), S(26, 43),  S(34, 25),
};
constexpr Score BishopMobilityScore[14] = {
      S(-38, -85), S(-16, -79), S(-8, -35), S(2, -36),  S(10, -22),
      S(15, -11),  S(21, -6),   S(28, -2),  S(32, -2),  S(36, -2),
      S(45, -5),   S(53, -13),  S(70, -18), S(94, -38),
};
constexpr Score RookMobilityScore[15] = {
      S(-97, -117), S(-67, -61), S(-52, -54), S(-87, 42), S(-76, -44),
      S(-27, -29),  S(-41, 8),   S(-25, -10), S(-28, 10), S(-25, 20),
      S(-20, 22),   S(-12, 23),  S(-2, 25),   S(9, 27),   S(14, 30),
};
constexpr Score QueenMobilityScore[28] = {
      S(-150, -200), S(-112, -111), S(-47, -95), S(-93, -105), S(-35, -87),
      S(-61, 65),    S(-52, 22),    S(-92, -6),  S(-72, 61),   S(-12, 16),
      S(-47, 97),    S(-31, 86),    S(-31, 119), S(-27, 125),  S(-20, 122),
      S(-16, 123),   S(-11, 126),   S(-7, 130),  S(-1, 128),   S(-2, 132),
      S(5, 125),     S(12, 119),    S(14, 127),  S(21, 112),   S(33, 110),
      S(48, 91),     S(51, 100),    S(91, 84),
};

struct EvalWeights {
    const Score pawnScore = S(100, 100);
    const Score knightScore = S(291, 280);
    const Score bishopScore = S(308, 350);
    const Score rookScore = S(423, 567);
    const Score queenScore = S(881, 965);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),     S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0),
          S(0, 0),     S(0, 0),    S(0, 0),     S(44, 103),  S(71, 81),
          S(15, 107),  S(51, 65),  S(-16, 76),  S(18, 54),   S(-78, 115),
          S(-71, 133), S(-28, 76), S(-36, 67),  S(-16, 32),  S(-4, -13),
          S(2, -14),   S(30, 5),   S(1, 49),    S(-9, 43),   S(-44, 35),
          S(-45, 17),  S(-33, 3),  S(-28, -19), S(-15, -17), S(-8, -11),
          S(-28, 3),   S(-17, 2),  S(-58, 15),  S(-57, 9),   S(-45, 0),
          S(-37, -11), S(-38, -9), S(-38, -3),  S(-42, -1),  S(-40, -2),
          S(-49, 9),   S(-51, 4),  S(-45, -1),  S(-37, 0),   S(-31, 0),
          S(-32, -1),  S(-20, -4), S(-31, -7),  S(-48, 11),  S(-58, 9),
          S(-43, 3),   S(-41, -5), S(-38, 6),   S(-15, -2),  S(-13, -6),
          S(-32, -8),  S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0),
          S(0, 0),     S(0, 0),    S(0, 0),     S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-141, -61), S(-81, -48), S(-43, -9),  S(-4, -22), S(17, 1),
          S(-55, -10),  S(-157, 6),  S(-94, -69), S(-11, 7),  S(7, 5),
          S(27, -8),    S(53, -18),  S(75, -17),  S(99, -25), S(-1, 0),
          S(57, -35),   S(-6, -3),   S(23, 5),    S(46, 29),  S(60, 27),
          S(88, 26),    S(110, 11),  S(42, -4),   S(59, -25), S(-13, 9),
          S(2, 24),     S(24, 43),   S(57, 39),   S(28, 42),  S(52, 34),
          S(16, 14),    S(45, -3),   S(-5, 9),    S(-9, 17),  S(5, 47),
          S(11, 40),    S(21, 45),   S(12, 34),   S(23, 9),   S(16, 7),
          S(-30, -4),   S(-21, 2),   S(-9, 16),   S(-9, 36),  S(7, 33),
          S(-3, 12),    S(5, -4),    S(3, -8),    S(-40, -7), S(-24, -10),
          S(-20, 2),    S(-12, 8),   S(-4, 7),    S(-5, -1),  S(-3, -5),
          S(0, -12),    S(-82, -19), S(-32, -28), S(-35, -3), S(-27, 6),
          S(-17, -8),   S(-4, -17),  S(-16, -15), S(-8, 0),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-18, 0),  S(-62, 12),  S(-46, 11), S(-112, 36), S(-32, 9),
          S(-55, -5), S(31, -5),   S(-57, 5),  S(-11, -7),  S(13, -7),
          S(7, 5),    S(10, 6),    S(10, 7),   S(5, 3),     S(16, 7),
          S(9, -13),  S(-13, 25),  S(8, 10),   S(19, 13),   S(26, 13),
          S(33, 12),  S(67, 15),   S(39, 15),  S(21, 15),   S(-16, 9),
          S(-2, 11),  S(9, 19),    S(18, 39),  S(14, 39),   S(23, 25),
          S(-3, 22),  S(-5, 10),   S(-14, 12), S(-17, 21),  S(-9, 28),
          S(7, 34),   S(-4, 33),   S(-14, 26), S(-15, 17),  S(5, -5),
          S(-16, 9),  S(-1, 1),    S(-12, 18), S(-4, 16),   S(0, 23),
          S(-14, 19), S(-5, 2),    S(3, -8),   S(-4, 7),    S(-10, -5),
          S(6, -5),   S(-14, 12),  S(-10, 16), S(4, 2),     S(3, -1),
          S(-1, -22), S(-30, -21), S(10, 15),  S(-17, -2),  S(-28, 8),
          S(-25, 7),  S(-14, 9),   S(16, -28), S(-8, -27),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(25, 46),  S(13, 49),  S(4, 65),   S(44, 47),  S(80, 33),
          S(80, 24),  S(105, 24), S(78, 27),  S(-6, 40),  S(-6, 49),
          S(17, 51),  S(46, 39),  S(30, 37),  S(72, 30),  S(49, 24),
          S(80, 14),  S(4, 24),   S(34, 30),  S(38, 32),  S(38, 31),
          S(93, 19),  S(81, 12),  S(116, 15), S(91, 0),   S(-12, 38),
          S(8, 32),   S(-4, 49),  S(1, 49),   S(19, 31),  S(7, 18),
          S(39, 22),  S(30, 9),   S(-49, 37), S(-34, 37), S(-24, 37),
          S(-20, 37), S(-23, 39), S(-39, 36), S(6, 19),   S(-26, 28),
          S(-40, 26), S(-42, 35), S(-23, 12), S(-32, 34), S(-28, 36),
          S(-27, 25), S(17, 0),   S(-15, 7),  S(-51, 22), S(-35, 23),
          S(-23, 25), S(-23, 25), S(-21, 16), S(-7, 10),  S(11, -5),
          S(-44, 7),  S(-40, 20), S(-35, 26), S(-30, 28), S(-25, 24),
          S(-20, 16), S(-25, 18), S(-22, 19), S(-49, 12),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-41, 35), S(-33, 36),  S(17, 56),   S(71, 35),   S(20, 67),
          S(56, 42),  S(129, -15), S(66, 13),   S(-20, 29),  S(-41, 48),
          S(-14, 72), S(-29, 102), S(-14, 104), S(32, 77),   S(33, 60),
          S(83, 25),  S(5, 12),    S(-20, 52),  S(-18, 73),  S(0, 64),
          S(17, 87),  S(75, 62),   S(60, 44),   S(61, 29),   S(-22, 28),
          S(-31, 53), S(-16, 57),  S(-27, 95),  S(-13, 106), S(6, 80),
          S(13, 73),  S(5, 54),    S(-14, -13), S(-32, 50),  S(-36, 73),
          S(-26, 79), S(-27, 80),  S(-32, 78),  S(-12, 53),  S(-5, 50),
          S(-32, 1),  S(-19, 29),  S(-29, 51),  S(-30, 51),  S(-28, 60),
          S(-12, 36), S(-3, 38),   S(-8, 6),    S(-21, 18),  S(-25, -1),
          S(-6, 3),   S(-3, 11),   S(-7, 20),   S(7, -35),   S(-7, -4),
          S(25, -89), S(-22, 4),   S(-11, -22), S(-11, -25), S(-6, -7),
          S(-6, -29), S(-23, 1),   S(-1, -36),  S(-44, -16),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-147, -102), S(-102, -36), S(-29, -53),  S(-33, -17), S(-71, -19),
          S(7, -33),     S(41, -34),   S(76, -135),  S(-84, 6),   S(-24, 14),
          S(-79, 10),    S(48, 5),     S(-18, 25),   S(-23, 22),  S(64, 19),
          S(11, 13),     S(-62, -14),  S(-50, 19),   S(-109, 44), S(-64, 43),
          S(-68, 54),    S(30, 41),    S(55, 30),    S(76, -13),  S(-63, -1),
          S(-74, 19),    S(-63, 34),   S(-171, 61),  S(-107, 58), S(-61, 48),
          S(-182, 53),   S(-160, 22),  S(-100, -25), S(-100, 8),  S(-166, 45),
          S(-152, 53),   S(-170, 60),  S(-122, 47),  S(-123, 27), S(-147, 15),
          S(-61, -26),   S(-24, -6),   S(-94, 22),   S(-110, 38), S(-108, 37),
          S(-118, 28),   S(-67, 7),    S(-86, -8),   S(47, -46),  S(-5, -13),
          S(-28, 0),     S(-66, 12),   S(-53, 12),   S(-45, 5),   S(10, -16),
          S(22, -34),    S(50, -101),  S(71, -69),   S(40, -47),  S(-76, -24),
          S(3, -48),     S(-45, -24),  S(46, -60),   S(48, -94),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),  S(2, 5),    S(-3, 11), S(-4, 31),
          S(5, 62), S(14, 115), S(0, 96),  S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(0, 0),    S(0, -19),   S(-4, -13), S(5, -23),
          S(16, -55), S(11, -108), S(0, 0),    S(0, 0),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(0, 0),    S(-11, -6), S(-17, -11), S(-14, -8),
          S(-4, -20), S(6, -37),  S(-17, 26),  S(0, 0),
    };
    const Score backwardPawnRankBonus[8] = {
          S(0, 0),   S(-14, -3), S(1, -5), S(-3, -3),
          S(-14, 3), S(0, 0),    S(0, 0),  S(0, 0),
    };
    const Score KnightMobilityScore[9] = {
          S(-50, -32), S(-33, 9), S(-18, 35), S(-10, 45), S(-1, 46),
          S(6, 57),    S(16, 49), S(26, 43),  S(34, 25),
    };
    const Score BishopMobilityScore[14] = {
          S(-38, -85), S(-16, -79), S(-8, -35), S(2, -36),  S(10, -22),
          S(15, -11),  S(21, -6),   S(28, -2),  S(32, -2),  S(36, -2),
          S(45, -5),   S(53, -13),  S(70, -18), S(94, -38),
    };
    const Score RookMobilityScore[15] = {
          S(-97, -117), S(-67, -61), S(-52, -54), S(-87, 42), S(-76, -44),
          S(-27, -29),  S(-41, 8),   S(-25, -10), S(-28, 10), S(-25, 20),
          S(-20, 22),   S(-12, 23),  S(-2, 25),   S(9, 27),   S(14, 30),
    };
    const Score QueenMobilityScore[28] = {
          S(-150, -200), S(-112, -111), S(-47, -95), S(-93, -105), S(-35, -87),
          S(-61, 65),    S(-52, 22),    S(-92, -6),  S(-72, 61),   S(-12, 16),
          S(-47, 97),    S(-31, 86),    S(-31, 119), S(-27, 125),  S(-20, 122),
          S(-16, 123),   S(-11, 126),   S(-7, 130),  S(-1, 128),   S(-2, 132),
          S(5, 125),     S(12, 119),    S(14, 127),  S(21, 112),   S(33, 110),
          S(48, 91),     S(51, 100),    S(91, 84),
    };
};
#endif // WEIGHTS_H_
