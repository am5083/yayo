#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"
constexpr Score pawnScore = S(97, 120);
constexpr Score knightScore = S(375, 428);
constexpr Score bishopScore = S(387, 423);
constexpr Score rookScore = S(536, 686);
constexpr Score queenScore = S(1114, 1349);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),      S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),    S(0, 0),     S(-7, 130), S(6, 115),
      S(-2, 122),   S(19, 61),  S(-12, 62),  S(18, 55),  S(-120, 126),
      S(-113, 154), S(-20, 87), S(-22, 118), S(22, 37),  S(20, -21),
      S(23, -12),   S(97, 25),  S(37, 65),   S(5, 78),   S(-19, 59),
      S(-17, 43),   S(0, 24),   S(-4, 1),    S(25, 4),   S(22, 10),
      S(0, 34),     S(11, 36),  S(-39, 37),  S(-40, 32), S(-16, 17),
      S(-8, 9),     S(-8, 6),   S(0, 14),    S(-11, 17), S(-10, 15),
      S(-26, 31),   S(-30, 28), S(-13, 24),  S(-8, 16),  S(10, 23),
      S(10, 16),    S(17, 9),   S(8, 12),    S(-22, 31), S(-23, 29),
      S(-8, 20),    S(-6, -2),  S(4, 28),    S(30, 17),  S(31, 7),
      S(3, 10),     S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),
      S(0, 0),      S(0, 0),    S(0, 0),     S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-169, -69), S(-135, -57), S(-64, 7),     S(-24, 10),  S(67, 10),
      S(-53, -41),  S(-65, -15),  S(-114, -120), S(-23, -28), S(-10, -9),
      S(24, -23),   S(65, -28),   S(74, -39),    S(72, -38),  S(33, -21),
      S(41, -43),   S(-4, -8),    S(13, 6),      S(38, 31),   S(62, 22),
      S(91, -7),    S(141, 7),    S(90, -41),    S(24, -45),  S(-21, -4),
      S(-7, 12),    S(20, 53),    S(51, 38),     S(34, 39),   S(56, 41),
      S(21, 3),     S(58, -3),    S(-24, 1),     S(-1, -11),  S(1, 41),
      S(11, 44),    S(29, 40),    S(25, 25),     S(32, 13),   S(7, 6),
      S(-40, -19),  S(-35, -5),   S(-18, 12),    S(-13, 39),  S(13, 19),
      S(-3, 6),     S(5, -29),    S(-4, -30),    S(-58, -22), S(-27, -18),
      S(-35, -14),  S(-6, -11),   S(-6, 4),      S(-14, -17), S(-21, -32),
      S(-23, -9),   S(-72, -44),  S(-30, -42),   S(-58, 11),  S(-22, -15),
      S(-14, -29),  S(-4, -20),   S(-19, -26),   S(-57, 8),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-31, -9), S(-64, 25), S(-40, -7), S(-96, 17), S(-23, 11), S(-75, 25),
      S(-38, 21), S(0, -33),  S(0, -19),  S(-9, 9),   S(-21, 0),  S(-8, 15),
      S(4, 9),    S(40, -3),  S(14, 17),  S(12, -26), S(8, 9),    S(24, 18),
      S(18, 12),  S(25, 5),   S(15, 17),  S(81, 16),  S(44, 14),  S(37, 18),
      S(-18, 17), S(17, 8),   S(21, 22),  S(53, 17),  S(21, 25),  S(19, 24),
      S(12, 12),  S(-5, 7),   S(-13, 5),  S(9, 1),    S(11, 27),  S(41, 10),
      S(45, 21),  S(6, 6),    S(4, 5),    S(32, -33), S(2, -6),   S(20, 17),
      S(24, 7),   S(17, 9),   S(24, 11),  S(24, 6),   S(30, -15), S(37, -21),
      S(3, -1),   S(12, 5),   S(28, -24), S(2, 8),    S(9, 14),   S(23, -18),
      S(31, 9),   S(33, -9),  S(-18, 18), S(35, 5),   S(18, 26),  S(17, 1),
      S(20, -12), S(12, 16),  S(16, -9),  S(35, -26),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(24, 26),  S(26, 16),  S(28, 45),  S(41, 22),   S(70, 19),  S(50, 23),
      S(66, 40),  S(70, 24),  S(-19, 34), S(-13, 32),  S(22, 34),  S(77, 3),
      S(51, 17),  S(51, 27),  S(20, 7),   S(71, -7),   S(-20, 12), S(23, 26),
      S(4, 21),   S(35, 30),  S(38, 8),   S(55, 1),    S(131, 8),  S(88, -16),
      S(-1, 10),  S(-7, 18),  S(-19, 44), S(-11, 34),  S(22, 7),   S(15, -15),
      S(41, -6),  S(49, -19), S(-55, 22), S(-21, 21),  S(-25, 26), S(-34, 24),
      S(-26, 33), S(-14, -1), S(-7, 2),   S(-5, -1),   S(-40, -2), S(-43, 6),
      S(-40, -2), S(-27, 15), S(-33, 16), S(-19, -17), S(41, -29), S(10, -36),
      S(-47, 6),  S(-24, -1), S(-5, -7),  S(-24, 3),   S(-9, -6),  S(-2, -17),
      S(21, -28), S(-49, 2),  S(-34, 11), S(-19, -1),  S(-11, 7),  S(-1, 1),
      S(4, -13),  S(-5, -11), S(13, -14), S(-33, -10),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-17, 12), S(4, -6),    S(28, 30),  S(39, 46),  S(56, 66),  S(60, 60),
      S(91, -14), S(24, 42),   S(-26, 35), S(-69, 63), S(-41, 89), S(-46, 85),
      S(3, 86),   S(17, 63),   S(33, 54),  S(86, 48),  S(-14, 44), S(-42, 56),
      S(-13, 52), S(-23, 94),  S(14, 92),  S(90, 74),  S(63, 41),  S(69, 53),
      S(-36, 56), S(-36, 58),  S(-13, 59), S(-40, 94), S(1, 88),   S(7, 95),
      S(16, 95),  S(16, 70),   S(-3, 3),   S(-30, 47), S(-39, 71), S(-18, 82),
      S(-26, 94), S(-15, 88),  S(0, 60),   S(18, 42),  S(2, -20),  S(5, 26),
      S(-19, 50), S(-15, 45),  S(-24, 83), S(12, 20),  S(31, 22),  S(2, 16),
      S(3, 12),   S(-21, -24), S(5, -2),   S(21, -22), S(12, -13), S(24, -40),
      S(12, -40), S(49, -63),  S(12, 4),   S(16, -33), S(31, -52), S(31, -11),
      S(14, -18), S(-13, -24), S(-21, 5),  S(8, -27),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-83, -129), S(-15, -66), S(35, -11),  S(-1, -28),  S(-87, -37),
      S(-49, -24),  S(36, 28),   S(-18, -66), S(-12, -44), S(-5, 30),
      S(-93, 22),   S(18, 40),   S(20, 47),   S(24, 19),   S(55, 16),
      S(38, -20),   S(-95, 15),  S(-16, 10),  S(-21, 28),  S(-48, 67),
      S(-2, 72),    S(53, 77),   S(24, 49),   S(-29, -8),  S(-14, -33),
      S(-10, 21),   S(-87, 57),  S(-133, 74), S(-93, 78),  S(-59, 64),
      S(-82, 47),   S(-98, 17),  S(-66, -27), S(-70, 15),  S(-116, 49),
      S(-159, 73),  S(-174, 63), S(-123, 57), S(-132, 21), S(-157, 12),
      S(-73, -30),  S(-23, -4),  S(-116, 37), S(-160, 54), S(-150, 44),
      S(-145, 36),  S(-56, 7),   S(-98, -17), S(25, -58),  S(2, -18),
      S(-43, -2),   S(-87, 17),  S(-72, 23),  S(-54, 7),   S(20, -23),
      S(25, -43),   S(25, -102), S(84, -79),  S(62, -50),  S(-82, -34),
      S(13, -52),   S(-51, -38), S(63, -76),  S(56, -117),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),   S(-3, 8),   S(-7, 16),  S(0, 43),
      S(12, 75), S(36, 157), S(81, 204), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(-10, -10), S(-5, -22),  S(-12, -13), S(-7, -23),
      S(26, -73),  S(-85, -77), S(-10, -10), S(-10, -10),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(-6, -6),  S(-22, -10), S(-23, -18), S(-17, -13),
      S(-7, -21), S(0, -26),   S(-18, -10), S(-6, -6),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(-15, -15), S(-14, -9),  S(-5, -8),   S(-9, -4),
      S(-21, -7),  S(-15, -15), S(-15, -15), S(-15, -15),
};
constexpr Score KnightMobilityScore[9] = {
      S(-48, -43), S(-9, -2), S(10, 26), S(22, 35), S(32, 45),
      S(43, 48),   S(55, 46), S(63, 36), S(61, 23),
};
constexpr Score BishopMobilityScore[14] = {
      S(-20, -37), S(1, -5),  S(23, 19), S(36, 36), S(50, 51),
      S(60, 63),   S(68, 75), S(69, 84), S(77, 74), S(74, 81),
      S(97, 78),   S(77, 81), S(76, 38), S(95, 91),
};
constexpr Score RookMobilityScore[15] = {
      S(-45, 36), S(-21, 64), S(-14, 84), S(-5, 98),  S(-3, 97),
      S(6, 121),  S(7, 131),  S(21, 134), S(29, 143), S(44, 142),
      S(52, 150), S(63, 160), S(69, 162), S(58, 166), S(61, 172),
};
constexpr Score QueenMobilityScore[28] = {
      S(-71, -93), S(-42, -55), S(-15, -30), S(-2, 28),   S(28, 50),
      S(32, 51),   S(32, 118),  S(40, 139),  S(50, 137),  S(59, 160),
      S(69, 143),  S(68, 167),  S(67, 177),  S(78, 155),  S(80, 183),
      S(84, 188),  S(86, 201),  S(78, 212),  S(86, 224),  S(107, 201),
      S(129, 188), S(135, 200), S(139, 195), S(178, 180), S(107, 172),
      S(142, 202), S(147, 183), S(134, 233),
};

struct EvalWeights {
    const Score pawnScore = S(94, 125);
    const Score knightScore = S(381, 418);
    const Score bishopScore = S(396, 414);
    const Score rookScore = S(532, 695);
    const Score queenScore = S(1132, 1341);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),      S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),    S(0, 0),    S(18, 118), S(9, 95),
          S(-21, 106),  S(7, 46),   S(-29, 47), S(-1, 37),  S(-115, 106),
          S(-119, 138), S(-9, 101), S(-9, 104), S(17, 51),  S(18, 1),
          S(35, -5),    S(86, 21),  S(58, 71),  S(21, 78),  S(-20, 60),
          S(-16, 42),   S(-1, 19),  S(6, -10),  S(29, -6),  S(28, 4),
          S(14, 23),    S(9, 25),   S(-36, 33), S(-28, 25), S(-12, 7),
          S(2, -7),     S(1, -4),   S(5, 4),    S(-3, 7),   S(-10, 6),
          S(-26, 24),   S(-19, 19), S(-7, 10),  S(-3, 9),   S(17, 10),
          S(10, 11),    S(27, 6),   S(2, 1),    S(-22, 26), S(-17, 25),
          S(-4, 12),    S(-2, 15),  S(9, 17),   S(36, 10),  S(43, 2),
          S(-1, 2),     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),    S(0, 0),    S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-159, -49), S(-111, -36), S(-40, -13), S(-20, -12), S(45, -11),
          S(-75, -18),  S(-41, -38),  S(-91, -99), S(-26, -8),  S(1, 0),
          S(47, -19),   S(54, -5),    S(57, -15),  S(93, -18),  S(17, -17),
          S(48, -32),   S(-18, 11),   S(37, -11),  S(58, 13),   S(79, 12),
          S(101, 7),    S(121, -11),  S(72, -22),  S(47, -30),  S(2, 6),
          S(9, 17),     S(33, 39),    S(68, 35),   S(45, 34),   S(69, 29),
          S(28, 10),    S(61, -2),    S(-7, 17),   S(5, 10),    S(16, 38),
          S(29, 29),    S(36, 40),    S(34, 23),   S(53, 4),    S(22, 8),
          S(-23, -16),  S(-19, -1),   S(1, 4),     S(9, 23),    S(28, 24),
          S(13, -3),    S(16, -13),   S(-1, -9),   S(-41, -6),  S(-23, 3),
          S(-14, -5),   S(2, -2),     S(9, -2),    S(8, -5),    S(1, -21),
          S(-6, -10),   S(-86, -20),  S(-18, -22), S(-36, -7),  S(-8, 1),
          S(-4, -10),   S(-4, -10),   S(-14, -6),  S(-33, -15),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-11, 4),  S(-41, 3),  S(-64, 9),   S(-72, 5),  S(-44, -5),
          S(-56, 2),  S(-14, 1),  S(-24, -13), S(-8, -11), S(8, -10),
          S(-14, -4), S(-14, 2),  S(13, -12),  S(19, -12), S(36, -4),
          S(-7, -12), S(-10, 14), S(22, 2),    S(28, 4),   S(38, -1),
          S(35, -1),  S(59, 6),   S(55, -2),   S(34, 2),   S(-17, -2),
          S(7, 7),    S(13, 16),  S(50, 20),   S(34, 21),  S(38, 11),
          S(9, 14),   S(-3, 2),   S(-9, -3),   S(-7, 16),  S(6, 20),
          S(35, 15),  S(31, 21),  S(5, 18),    S(-2, 12),  S(28, -18),
          S(1, 11),   S(21, 6),   S(14, 17),   S(15, 16),  S(24, 21),
          S(18, 14),  S(19, 1),   S(25, -7),   S(15, 3),   S(13, -3),
          S(27, -7),  S(0, 10),   S(11, 6),    S(29, 0),   S(35, -1),
          S(20, 0),   S(-4, -2),  S(32, 15),   S(11, 11),  S(-4, 6),
          S(0, 5),    S(3, 14),   S(16, -3),   S(12, -7),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(24, 20),  S(47, 16),  S(10, 40),  S(20, 28),  S(56, 17),
          S(33, 26),  S(45, 21),  S(69, 13),  S(5, 22),   S(5, 32),
          S(26, 37),  S(62, 15),  S(39, 17),  S(73, 9),   S(42, 9),
          S(67, 6),   S(-1, 22),  S(23, 26),  S(21, 20),  S(37, 19),
          S(54, 9),   S(76, -6),  S(110, -3), S(67, 2),   S(-18, 25),
          S(9, 18),   S(2, 34),   S(13, 19),  S(20, 3),   S(27, 1),
          S(37, 7),   S(28, -2),  S(-36, 16), S(-30, 20), S(-20, 25),
          S(-17, 20), S(-11, 15), S(-26, 16), S(12, 6),   S(-8, 10),
          S(-37, 13), S(-28, 16), S(-20, 8),  S(-18, 12), S(-11, 10),
          S(-3, -4),  S(34, -21), S(-6, -14), S(-48, 6),  S(-28, 4),
          S(-10, 9),  S(-7, 6),   S(0, -6),   S(5, -10),  S(30, -18),
          S(-33, -1), S(-21, 6),  S(-17, 7),  S(-3, 7),   S(7, 5),
          S(12, -5),  S(1, -3),   S(7, -6),   S(-19, -8),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-41, 36), S(-20, 18), S(4, 50),    S(17, 60),  S(34, 48),
          S(41, 38),  S(74, 10),  S(46, 31),   S(-16, 24), S(-49, 40),
          S(-21, 65), S(-26, 85), S(-16, 105), S(33, 39),  S(18, 36),
          S(76, 36),  S(-12, 26), S(-26, 32),  S(-9, 54),  S(-12, 85),
          S(21, 79),  S(72, 54),  S(83, 16),   S(71, 55),  S(-25, 32),
          S(-24, 35), S(-21, 46), S(-21, 69),  S(-4, 80),  S(11, 79),
          S(19, 77),  S(23, 46),  S(-15, 8),   S(-27, 42), S(-28, 47),
          S(-21, 73), S(-17, 73), S(-13, 73),  S(-2, 53),  S(15, 61),
          S(-13, 3),  S(-8, 17),  S(-13, 29),  S(-15, 39), S(-12, 59),
          S(7, 29),   S(16, 19),  S(11, 32),   S(-12, 7),  S(-14, -10),
          S(3, -9),   S(15, -9),  S(8, 5),     S(19, -21), S(17, -19),
          S(30, -39), S(-7, -11), S(-1, -20),  S(10, -29), S(19, -11),
          S(9, -14),  S(-5, -6),  S(-1, -20),  S(-7, -4),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-71, -105), S(8, -65),   S(12, -35),  S(-26, -10), S(-63, -21),
          S(-26, -1),   S(18, 9),    S(6, -87),   S(-19, -34), S(-14, 10),
          S(-70, 19),   S(-4, 21),   S(0, 26),    S(-1, 41),   S(26, 37),
          S(9, 3),      S(-70, -7),  S(6, 11),    S(-30, 40),  S(-23, 53),
          S(-23, 65),   S(30, 67),   S(48, 49),   S(-6, 9),    S(-39, -18),
          S(-33, 25),   S(-62, 44),  S(-118, 60), S(-103, 63), S(-79, 62),
          S(-70, 47),   S(-77, 5),   S(-87, -23), S(-47, 4),   S(-114, 42),
          S(-134, 62),  S(-158, 66), S(-109, 48), S(-110, 28), S(-133, 6),
          S(-50, -33),  S(-42, -5),  S(-91, 19),  S(-136, 42), S(-129, 43),
          S(-122, 34),  S(-68, 7),   S(-95, -8),  S(39, -48),  S(-12, -17),
          S(-30, -3),   S(-70, 8),   S(-76, 15),  S(-54, 6),   S(9, -14),
          S(22, -40),   S(37, -93),  S(72, -71),  S(44, -50),  S(-65, -28),
          S(6, -43),    S(-37, -32), S(51, -63),  S(45, -103),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),  S(-5, 3),   S(-5, 14),  S(-4, 45),
          S(5, 82), S(20, 145), S(91, 188), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(-10, -10), S(-5, -28),  S(-8, -19),  S(0, -33),
          S(4, -49),   S(-60, -50), S(-10, -10), S(-10, -10),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(-6, -6),  S(-16, -6), S(-22, -15), S(-16, -13),
          S(-5, -26), S(6, -29),  S(-37, -23), S(-6, -6),
    };
    const Score backwardPawnRankBonus[8] = {
          S(-15, -15), S(-17, -12), S(-5, -6),   S(-9, -3),
          S(-17, -7),  S(-15, -15), S(-15, -15), S(-15, -15),
    };
    const Score KnightMobilityScore[9] = {
          S(-35, -21), S(-17, 15), S(-5, 25), S(6, 34),  S(15, 49),
          S(25, 47),   S(36, 45),  S(45, 31), S(40, 30),
    };
    const Score BishopMobilityScore[14] = {
          S(-9, -17), S(15, 9),  S(23, 32), S(37, 46), S(45, 60),
          S(53, 67),  S(57, 71), S(61, 77), S(65, 73), S(70, 74),
          S(79, 69),  S(56, 82), S(82, 57), S(96, 98),
    };
    const Score RookMobilityScore[15] = {
          S(-25, 59), S(-15, 78), S(-7, 95),  S(-2, 107), S(0, 111),
          S(8, 126),  S(17, 127), S(25, 134), S(39, 139), S(44, 142),
          S(52, 150), S(56, 159), S(59, 157), S(45, 162), S(70, 175),
    };
    const Score QueenMobilityScore[28] = {
          S(-71, -93), S(-19, -33), S(4, -6),    S(11, 40),   S(20, 70),
          S(28, 68),   S(33, 107),  S(40, 115),  S(49, 114),  S(54, 139),
          S(61, 135),  S(65, 147),  S(67, 156),  S(65, 165),  S(74, 173),
          S(69, 190),  S(71, 197),  S(74, 201),  S(85, 208),  S(84, 214),
          S(120, 194), S(135, 202), S(118, 197), S(148, 203), S(126, 190),
          S(119, 182), S(122, 208), S(119, 221),
    };
};
#endif // WEIGHTS_H_
