#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"
constexpr Score pawnScore = S(97, 143);
constexpr Score knightScore = S(289, 338);
constexpr Score bishopScore = S(390, 322);
constexpr Score rookScore = S(450, 537);
constexpr Score queenScore = S(980, 983);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),    S(0, 0),    S(55, 72),  S(67, 64),  S(58, 68),  S(56, 33),
      S(75, 26),  S(69, 24),  S(-27, 69), S(-28, 72), S(16, 49),  S(10, 52),
      S(40, 15),  S(28, -17), S(48, -18), S(72, -14), S(40, 41),  S(4, 37),
      S(10, 6),   S(18, -6),  S(33, -26), S(35, -46), S(56, -46), S(52, -39),
      S(30, -16), S(32, -15), S(3, -22),  S(5, -22),  S(16, -36), S(30, -46),
      S(29, -46), S(27, -38), S(13, -29), S(11, -34), S(7, -25),  S(9, -25),
      S(19, -29), S(24, -34), S(35, -29), S(28, -32), S(36, -32), S(22, -35),
      S(12, -24), S(8, -20),  S(20, -30), S(36, -43), S(30, -22), S(49, -33),
      S(53, -35), S(21, -37), S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
      S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-82, -46), S(-85, 5),   S(-67, 63), S(-19, 20), S(-62, 39), S(14, 11),
      S(-41, -27), S(-54, -49), S(9, 1),    S(12, 47),  S(60, 11),  S(61, 22),
      S(61, 18),   S(82, -1),   S(30, 18),  S(29, -2),  S(54, 14),  S(44, 16),
      S(32, 46),   S(58, 45),   S(78, 35),  S(79, 27),  S(80, 3),   S(54, 11),
      S(16, 18),   S(22, 39),   S(46, 56),  S(63, 56),  S(53, 58),  S(71, 45),
      S(34, 40),   S(60, 21),   S(8, 40),   S(23, 33),  S(25, 54),  S(37, 57),
      S(41, 59),   S(41, 50),   S(45, 46),  S(34, 24),  S(-19, 13), S(4, 27),
      S(15, 34),   S(14, 45),   S(25, 55),  S(25, 27),  S(29, 18),  S(16, 27),
      S(-15, 2),   S(-26, 18),  S(-1, 28),  S(22, 22),  S(27, 27),  S(9, 27),
      S(25, 10),   S(8, 31),    S(-15, 10), S(-3, 6),   S(-22, 22), S(7, 37),
      S(12, 27),   S(8, 10),    S(5, 6),    S(-8, 3),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-55, 5),  S(-85, 25), S(-84, 29), S(-83, 19), S(-85, 22), S(-86, 16),
      S(-75, 13), S(-82, 29), S(-52, 12), S(-31, 7),  S(-52, 38), S(-66, 28),
      S(-38, 4),  S(-44, 17), S(-43, 8),  S(-31, 32), S(-46, 34), S(-30, 27),
      S(-25, 18), S(2, 6),    S(-9, 15),  S(1, 26),   S(-6, 17),  S(-6, 11),
      S(-56, 18), S(-32, 25), S(-23, 18), S(-1, 29),  S(-9, 32),  S(-27, 29),
      S(-39, 30), S(-53, 18), S(-39, 26), S(-47, 24), S(-37, 36), S(-13, 31),
      S(-10, 28), S(-40, 36), S(-51, 28), S(-27, 11), S(-45, 23), S(-20, 29),
      S(-35, 35), S(-26, 30), S(-25, 37), S(-21, 26), S(-15, 12), S(-30, 28),
      S(-39, 40), S(-36, 24), S(-10, 1),  S(-35, 23), S(-27, 19), S(-20, 10),
      S(-5, 16),  S(-25, 13), S(-53, 14), S(-10, 26), S(-28, 18), S(-53, 17),
      S(-25, 10), S(-40, 33), S(-30, 19), S(-21, 0),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(6, 43),   S(-6, 51),  S(-16, 64), S(-30, 56), S(-2, 59),  S(5, 47),
      S(-23, 58), S(34, 38),  S(-25, 47), S(-45, 65), S(-13, 63), S(6, 62),
      S(-12, 61), S(14, 45),  S(1, 49),   S(44, 18),  S(-38, 48), S(-2, 46),
      S(-25, 52), S(-20, 49), S(40, 28),  S(11, 43),  S(56, 25),  S(45, 22),
      S(-49, 54), S(-25, 47), S(-18, 47), S(-17, 37), S(-13, 41), S(-10, 35),
      S(-15, 35), S(11, 23),  S(-54, 51), S(-73, 52), S(-50, 53), S(-44, 47),
      S(-47, 42), S(-53, 41), S(6, 14),   S(-34, 44), S(-70, 45), S(-55, 40),
      S(-63, 56), S(-56, 46), S(-40, 35), S(-39, 30), S(0, 15),   S(-31, 18),
      S(-68, 32), S(-57, 29), S(-25, 39), S(-41, 36), S(-37, 31), S(-31, 29),
      S(-14, 1),  S(-40, 23), S(-49, 36), S(-43, 29), S(-32, 37), S(-27, 36),
      S(-22, 27), S(-30, 30), S(-20, 23), S(-47, 31),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-3, 61),  S(3, 50),   S(-1, 83),  S(41, 69),  S(60, 73),  S(78, 26),
      S(69, 25),  S(20, 53),  S(-11, 46), S(-31, 83), S(-12, 87), S(-12, 86),
      S(5, 82),   S(40, 77),  S(-2, 79),  S(66, 74),  S(12, 51),  S(4, 69),
      S(-8, 79),  S(22, 76),  S(34, 76),  S(64, 78),  S(62, 52),  S(77, 78),
      S(-5, 48),  S(-7, 58),  S(3, 54),   S(15, 75),  S(15, 71),  S(28, 68),
      S(26, 78),  S(31, 80),  S(6, 47),   S(-24, 64), S(1, 56),   S(5, 76),
      S(6, 69),   S(9, 68),   S(11, 72),  S(26, 71),  S(8, -7),   S(3, 42),
      S(4, 54),   S(-1, 52),  S(13, 43),  S(18, 40),  S(29, 26),  S(17, 42),
      S(27, 5),   S(8, 18),   S(19, 8),   S(28, 8),   S(25, 15),  S(34, -10),
      S(39, -14), S(54, -22), S(27, 7),   S(37, -18), S(36, -15), S(45, -5),
      S(41, -17), S(29, -13), S(56, -63), S(47, -16),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-51, -79), S(39, -72),  S(-80, -27), S(-88, 8),  S(-6, 1),
      S(88, -26),  S(-31, -16), S(91, -77),  S(91, -60), S(-4, 17),
      S(-56, 41),  S(-52, 28),  S(-31, 63),  S(82, 16),  S(78, 34),
      S(80, 1),    S(-88, 8),   S(68, 27),   S(-50, 54), S(-98, 64),
      S(-7, 53),   S(74, 53),   S(28, 45),   S(-57, 20), S(-75, -4),
      S(-88, 34),  S(-64, 51),  S(-101, 57), S(-99, 65), S(-55, 60),
      S(-99, 51),  S(-88, 20),  S(-81, -9),  S(-75, 17), S(-94, 51),
      S(-100, 58), S(-100, 56), S(-89, 45),  S(-87, 26), S(-86, -4),
      S(-67, -14), S(-40, 0),   S(-82, 24),  S(-82, 38), S(-87, 43),
      S(-80, 29),  S(-60, 18),  S(-58, 2),   S(39, -35), S(4, -13),
      S(1, -3),    S(-51, 9),   S(-58, 19),  S(-39, 13), S(20, -10),
      S(26, -30),  S(35, -71),  S(72, -58),  S(48, -35), S(-52, -11),
      S(9, -34),   S(-31, -14), S(51, -47),  S(42, -72),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),  S(-7, -5), S(-4, 7),  S(-4, 32),
      S(7, 57), S(33, 71), S(30, 67), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(0, 0),   S(-2, -27),  S(-9, -21), S(3, -29),
      S(3, -77), S(-89, -80), S(0, 0),    S(0, 0),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(0, 0),    S(-18, 1), S(-23, -10), S(-15, -8),
      S(-5, -20), S(9, -14), S(16, 24),   S(0, 0),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(0, 0),    S(-14, -11), S(-2, -6), S(-7, -2),
      S(-17, -8), S(0, 0),     S(0, 0),   S(0, 0),
};
constexpr Score KnightMobilityScore[9] = {
      S(-52, -71), S(-19, -59), S(-3, -35), S(7, -29),  S(16, -28),
      S(22, -13),  S(32, -15),  S(42, -15), S(45, -22),
};
constexpr Score BishopMobilityScore[14] = {
      S(-59, -57), S(-34, -33), S(-14, -15), S(-2, 1),  S(7, 8),
      S(14, 22),   S(21, 27),   S(24, 28),   S(26, 36), S(28, 33),
      S(54, 25),   S(30, 30),   S(59, 27),   S(26, 24),
};
constexpr Score RookMobilityScore[15] = {
      S(3, -64), S(12, 0),  S(21, 17), S(28, 25), S(31, 27),
      S(32, 33), S(37, 43), S(46, 42), S(53, 48), S(61, 53),
      S(67, 55), S(72, 58), S(73, 65), S(77, 64), S(72, 64),
};
constexpr Score QueenMobilityScore[28] = {
      S(0, 0),     S(0, 0),     S(0, 0),     S(23, 5),    S(-82, -85),
      S(-43, -57), S(-34, -55), S(-38, -26), S(-34, -17), S(-31, -6),
      S(30, -9),   S(29, 1),    S(28, 18),   S(27, 26),   S(28, 35),
      S(30, 49),   S(28, 60),   S(27, 77),   S(32, 75),   S(24, 83),
      S(31, 77),   S(31, 80),   S(31, 82),   S(18, 78),   S(16, 64),
      S(56, 82),   S(56, 90),   S(70, 85),
};

struct EvalWeights {
    const Score pawnScore = S(97, 143);
    const Score knightScore = S(289, 338);
    const Score bishopScore = S(390, 322);
    const Score rookScore = S(450, 537);
    const Score queenScore = S(980, 983);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),    S(0, 0),    S(0, 0),    S(55, 72),  S(67, 64),
          S(58, 68),  S(56, 33),  S(75, 26),  S(69, 24),  S(-27, 69),
          S(-28, 72), S(16, 49),  S(10, 52),  S(40, 15),  S(28, -17),
          S(48, -18), S(72, -14), S(40, 41),  S(4, 37),   S(10, 6),
          S(18, -6),  S(33, -26), S(35, -46), S(56, -46), S(52, -39),
          S(30, -16), S(32, -15), S(3, -22),  S(5, -22),  S(16, -36),
          S(30, -46), S(29, -46), S(27, -38), S(13, -29), S(11, -34),
          S(7, -25),  S(9, -25),  S(19, -29), S(24, -34), S(35, -29),
          S(28, -32), S(36, -32), S(22, -35), S(12, -24), S(8, -20),
          S(20, -30), S(36, -43), S(30, -22), S(49, -33), S(53, -35),
          S(21, -37), S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
          S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-82, -46), S(-85, 5),   S(-67, 63),  S(-19, 20), S(-62, 39),
          S(14, 11),   S(-41, -27), S(-54, -49), S(9, 1),    S(12, 47),
          S(60, 11),   S(61, 22),   S(61, 18),   S(82, -1),  S(30, 18),
          S(29, -2),   S(54, 14),   S(44, 16),   S(32, 46),  S(58, 45),
          S(78, 35),   S(79, 27),   S(80, 3),    S(54, 11),  S(16, 18),
          S(22, 39),   S(46, 56),   S(63, 56),   S(53, 58),  S(71, 45),
          S(34, 40),   S(60, 21),   S(8, 40),    S(23, 33),  S(25, 54),
          S(37, 57),   S(41, 59),   S(41, 50),   S(45, 46),  S(34, 24),
          S(-19, 13),  S(4, 27),    S(15, 34),   S(14, 45),  S(25, 55),
          S(25, 27),   S(29, 18),   S(16, 27),   S(-15, 2),  S(-26, 18),
          S(-1, 28),   S(22, 22),   S(27, 27),   S(9, 27),   S(25, 10),
          S(8, 31),    S(-15, 10),  S(-3, 6),    S(-22, 22), S(7, 37),
          S(12, 27),   S(8, 10),    S(5, 6),     S(-8, 3),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-55, 5),  S(-85, 25), S(-84, 29), S(-83, 19), S(-85, 22),
          S(-86, 16), S(-75, 13), S(-82, 29), S(-52, 12), S(-31, 7),
          S(-52, 38), S(-66, 28), S(-38, 4),  S(-44, 17), S(-43, 8),
          S(-31, 32), S(-46, 34), S(-30, 27), S(-25, 18), S(2, 6),
          S(-9, 15),  S(1, 26),   S(-6, 17),  S(-6, 11),  S(-56, 18),
          S(-32, 25), S(-23, 18), S(-1, 29),  S(-9, 32),  S(-27, 29),
          S(-39, 30), S(-53, 18), S(-39, 26), S(-47, 24), S(-37, 36),
          S(-13, 31), S(-10, 28), S(-40, 36), S(-51, 28), S(-27, 11),
          S(-45, 23), S(-20, 29), S(-35, 35), S(-26, 30), S(-25, 37),
          S(-21, 26), S(-15, 12), S(-30, 28), S(-39, 40), S(-36, 24),
          S(-10, 1),  S(-35, 23), S(-27, 19), S(-20, 10), S(-5, 16),
          S(-25, 13), S(-53, 14), S(-10, 26), S(-28, 18), S(-53, 17),
          S(-25, 10), S(-40, 33), S(-30, 19), S(-21, 0),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(6, 43),   S(-6, 51),  S(-16, 64), S(-30, 56), S(-2, 59),
          S(5, 47),   S(-23, 58), S(34, 38),  S(-25, 47), S(-45, 65),
          S(-13, 63), S(6, 62),   S(-12, 61), S(14, 45),  S(1, 49),
          S(44, 18),  S(-38, 48), S(-2, 46),  S(-25, 52), S(-20, 49),
          S(40, 28),  S(11, 43),  S(56, 25),  S(45, 22),  S(-49, 54),
          S(-25, 47), S(-18, 47), S(-17, 37), S(-13, 41), S(-10, 35),
          S(-15, 35), S(11, 23),  S(-54, 51), S(-73, 52), S(-50, 53),
          S(-44, 47), S(-47, 42), S(-53, 41), S(6, 14),   S(-34, 44),
          S(-70, 45), S(-55, 40), S(-63, 56), S(-56, 46), S(-40, 35),
          S(-39, 30), S(0, 15),   S(-31, 18), S(-68, 32), S(-57, 29),
          S(-25, 39), S(-41, 36), S(-37, 31), S(-31, 29), S(-14, 1),
          S(-40, 23), S(-49, 36), S(-43, 29), S(-32, 37), S(-27, 36),
          S(-22, 27), S(-30, 30), S(-20, 23), S(-47, 31),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-3, 61),  S(3, 50),   S(-1, 83),  S(41, 69),  S(60, 73),
          S(78, 26),  S(69, 25),  S(20, 53),  S(-11, 46), S(-31, 83),
          S(-12, 87), S(-12, 86), S(5, 82),   S(40, 77),  S(-2, 79),
          S(66, 74),  S(12, 51),  S(4, 69),   S(-8, 79),  S(22, 76),
          S(34, 76),  S(64, 78),  S(62, 52),  S(77, 78),  S(-5, 48),
          S(-7, 58),  S(3, 54),   S(15, 75),  S(15, 71),  S(28, 68),
          S(26, 78),  S(31, 80),  S(6, 47),   S(-24, 64), S(1, 56),
          S(5, 76),   S(6, 69),   S(9, 68),   S(11, 72),  S(26, 71),
          S(8, -7),   S(3, 42),   S(4, 54),   S(-1, 52),  S(13, 43),
          S(18, 40),  S(29, 26),  S(17, 42),  S(27, 5),   S(8, 18),
          S(19, 8),   S(28, 8),   S(25, 15),  S(34, -10), S(39, -14),
          S(54, -22), S(27, 7),   S(37, -18), S(36, -15), S(45, -5),
          S(41, -17), S(29, -13), S(56, -63), S(47, -16),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-51, -79), S(39, -72),  S(-80, -27), S(-88, 8),  S(-6, 1),
          S(88, -26),  S(-31, -16), S(91, -77),  S(91, -60), S(-4, 17),
          S(-56, 41),  S(-52, 28),  S(-31, 63),  S(82, 16),  S(78, 34),
          S(80, 1),    S(-88, 8),   S(68, 27),   S(-50, 54), S(-98, 64),
          S(-7, 53),   S(74, 53),   S(28, 45),   S(-57, 20), S(-75, -4),
          S(-88, 34),  S(-64, 51),  S(-101, 57), S(-99, 65), S(-55, 60),
          S(-99, 51),  S(-88, 20),  S(-81, -9),  S(-75, 17), S(-94, 51),
          S(-100, 58), S(-100, 56), S(-89, 45),  S(-87, 26), S(-86, -4),
          S(-67, -14), S(-40, 0),   S(-82, 24),  S(-82, 38), S(-87, 43),
          S(-80, 29),  S(-60, 18),  S(-58, 2),   S(39, -35), S(4, -13),
          S(1, -3),    S(-51, 9),   S(-58, 19),  S(-39, 13), S(20, -10),
          S(26, -30),  S(35, -71),  S(72, -58),  S(48, -35), S(-52, -11),
          S(9, -34),   S(-31, -14), S(51, -47),  S(42, -72),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),  S(-7, -5), S(-4, 7),  S(-4, 32),
          S(7, 57), S(33, 71), S(30, 67), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(0, 0),   S(-2, -27),  S(-9, -21), S(3, -29),
          S(3, -77), S(-89, -80), S(0, 0),    S(0, 0),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(0, 0),    S(-18, 1), S(-23, -10), S(-15, -8),
          S(-5, -20), S(9, -14), S(16, 24),   S(0, 0),
    };
    const Score backwardPawnRankBonus[8] = {
          S(0, 0),    S(-14, -11), S(-2, -6), S(-7, -2),
          S(-17, -8), S(0, 0),     S(0, 0),   S(0, 0),
    };
    const Score KnightMobilityScore[9] = {
          S(-52, -71), S(-19, -59), S(-3, -35), S(7, -29),  S(16, -28),
          S(22, -13),  S(32, -15),  S(42, -15), S(45, -22),
    };
    const Score BishopMobilityScore[14] = {
          S(-59, -57), S(-34, -33), S(-14, -15), S(-2, 1),  S(7, 8),
          S(14, 22),   S(21, 27),   S(24, 28),   S(26, 36), S(28, 33),
          S(54, 25),   S(30, 30),   S(59, 27),   S(26, 24),
    };
    const Score RookMobilityScore[15] = {
          S(3, -64), S(12, 0),  S(21, 17), S(28, 25), S(31, 27),
          S(32, 33), S(37, 43), S(46, 42), S(53, 48), S(61, 53),
          S(67, 55), S(72, 58), S(73, 65), S(77, 64), S(72, 64),
    };
    const Score QueenMobilityScore[28] = {
          S(0, 0),     S(0, 0),     S(0, 0),     S(23, 5),    S(-82, -85),
          S(-43, -57), S(-34, -55), S(-38, -26), S(-34, -17), S(-31, -6),
          S(30, -9),   S(29, 1),    S(28, 18),   S(27, 26),   S(28, 35),
          S(30, 49),   S(28, 60),   S(27, 77),   S(32, 75),   S(24, 83),
          S(31, 77),   S(31, 80),   S(31, 82),   S(18, 78),   S(16, 64),
          S(56, 82),   S(56, 90),   S(70, 85),
    };
};
#endif // WEIGHTS_H_
