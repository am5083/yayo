#ifndef WEIGHTS_H_
#define WEIGHTS_H_

#include "util.hpp"
namespace Yayo {
constexpr Score pawnScore = S(35, 42);
constexpr Score knightScore = S(73, 68);
constexpr Score bishopScore = S(71, 48);
constexpr Score rookScore = S(76, 72);
constexpr Score queenScore = S(86, 87);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),
      S(0, 0),   S(0, 0),    S(28, 64),  S(56, 58),  S(42, 62), S(47, 43),
      S(44, 48), S(8, 39),   S(-22, 68), S(-66, 76), S(20, 68), S(26, 70),
      S(40, 48), S(39, 23),  S(33, 29),  S(62, 38),  S(46, 61), S(10, 61),
      S(4, 59),  S(6, 51),   S(16, 34),  S(20, 18),  S(32, 21), S(35, 30),
      S(10, 46), S(8, 45),   S(-10, 42), S(-1, 39),  S(4, 26),  S(14, 18),
      S(12, 21), S(6, 25),   S(3, 30),   S(-3, 24),  S(-4, 35), S(-3, 34),
      S(4, 27),  S(5, 25),   S(11, 28),  S(2, 28),   S(17, 27), S(9, 19),
      S(-3, 42), S(1, 42),   S(1, 30),   S(9, 25),   S(13, 32), S(5, 37),
      S(11, 33), S(-12, 36), S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),
      S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(34, 24),  S(-2, 47),  S(58, 55),  S(66, 42), S(58, 58), S(51, 48),
      S(-21, 61), S(50, -12), S(48, 55),  S(67, 51), S(67, 54), S(69, 57),
      S(72, 47),  S(72, 53),  S(62, 40),  S(53, 30), S(39, 60), S(64, 58),
      S(77, 66),  S(71, 60),  S(68, 56),  S(75, 60), S(53, 47), S(56, 25),
      S(44, 45),  S(50, 64),  S(67, 73),  S(82, 72), S(56, 74), S(72, 70),
      S(26, 64),  S(64, 45),  S(43, 71),  S(49, 70), S(64, 75), S(67, 69),
      S(74, 69),  S(63, 61),  S(69, 57),  S(61, 48), S(23, 55), S(33, 54),
      S(50, 58),  S(53, 71),  S(60, 70),  S(56, 50), S(51, 46), S(46, 47),
      S(3, 73),   S(29, 68),  S(27, 49),  S(47, 50), S(51, 50), S(42, 58),
      S(34, 39),  S(46, 46),  S(-25, 44), S(30, 39), S(8, 53),  S(28, 54),
      S(32, 39),  S(42, 33),  S(38, 45),  S(14, 66),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(70, 52), S(41, 47), S(44, 45), S(51, 40), S(28, 42), S(53, 39),
      S(38, 49), S(53, 45), S(52, 37), S(64, 35), S(66, 37), S(61, 48),
      S(57, 44), S(53, 35), S(67, 44), S(45, 32), S(45, 50), S(60, 51),
      S(69, 42), S(69, 43), S(53, 44), S(69, 48), S(54, 49), S(40, 49),
      S(46, 40), S(56, 42), S(56, 54), S(64, 54), S(72, 48), S(68, 42),
      S(50, 45), S(34, 45), S(34, 48), S(47, 52), S(59, 51), S(71, 48),
      S(63, 51), S(57, 45), S(57, 40), S(66, 33), S(53, 39), S(75, 42),
      S(65, 47), S(59, 48), S(66, 51), S(57, 43), S(68, 42), S(66, 46),
      S(70, 51), S(64, 38), S(66, 38), S(54, 37), S(59, 45), S(66, 40),
      S(84, 57), S(64, 45), S(47, 39), S(69, 50), S(58, 37), S(26, 43),
      S(43, 35), S(49, 52), S(78, 34), S(46, 35),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(69, 76), S(74, 73), S(63, 78), S(65, 74), S(64, 73), S(56, 73),
      S(58, 77), S(66, 75), S(73, 73), S(72, 73), S(78, 77), S(80, 73),
      S(69, 69), S(81, 68), S(68, 68), S(83, 67), S(72, 74), S(77, 77),
      S(77, 74), S(76, 71), S(82, 70), S(81, 63), S(86, 68), S(80, 70),
      S(71, 74), S(75, 72), S(71, 76), S(69, 72), S(77, 64), S(70, 64),
      S(75, 67), S(78, 66), S(46, 76), S(50, 75), S(55, 79), S(58, 76),
      S(62, 72), S(42, 68), S(61, 62), S(56, 66), S(48, 78), S(73, 75),
      S(56, 73), S(57, 72), S(50, 71), S(47, 59), S(85, 49), S(66, 58),
      S(61, 80), S(55, 75), S(65, 70), S(57, 69), S(60, 59), S(70, 49),
      S(95, 53), S(48, 69), S(63, 75), S(55, 78), S(67, 74), S(69, 71),
      S(73, 66), S(64, 66), S(75, 73), S(64, 69),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(81, 82),  S(75, 77),  S(75, 80), S(70, 74), S(59, 77),  S(64, 74),
      S(78, 77),  S(77, 79),  S(78, 90), S(72, 87), S(78, 84),  S(75, 83),
      S(70, 80),  S(73, 73),  S(78, 80), S(86, 83), S(78, 92),  S(78, 90),
      S(82, 87),  S(79, 82),  S(77, 78), S(78, 77), S(65, 75),  S(71, 80),
      S(72, 94),  S(78, 92),  S(76, 90), S(77, 83), S(84, 83),  S(80, 81),
      S(84, 84),  S(77, 81),  S(70, 94), S(74, 90), S(90, 91),  S(79, 88),
      S(82, 88),  S(76, 85),  S(89, 86), S(85, 86), S(72, 91),  S(107, 93),
      S(84, 90),  S(70, 91),  S(81, 92), S(80, 89), S(104, 88), S(85, 92),
      S(101, 92), S(79, 92),  S(81, 90), S(82, 93), S(86, 93),  S(85, 89),
      S(104, 91), S(100, 86), S(64, 95), S(57, 99), S(68, 97),  S(80, 92),
      S(79, 94),  S(36, 106), S(78, 99), S(69, 95),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-105, -36), S(-59, -5),  S(-67, 9),  S(-91, 8),   S(-100, 4),
      S(-22, 17),   S(-26, 35),  S(22, -61), S(-92, 16),  S(4, 7),
      S(-91, 36),   S(13, -1),   S(31, 2),   S(-46, 31),  S(93, 13),
      S(19, 16),    S(-111, 28), S(72, 0),   S(-24, 33),  S(-21, 26),
      S(-65, 40),   S(30, 41),   S(40, 25),  S(19, 17),   S(-57, 18),
      S(26, 10),    S(13, 22),   S(-90, 27), S(-71, 29),  S(1, 30),
      S(-52, 29),   S(-91, 32),  S(-65, 5),  S(-5, 3),    S(-45, 28),
      S(-59, 19),   S(-40, 19),  S(-11, 23), S(-43, 13),  S(-76, 24),
      S(-42, 0),    S(-7, 0),    S(-14, 11), S(-9, 6),    S(12, -1),
      S(-38, 16),   S(31, -9),   S(-37, 9),  S(31, -14),  S(20, -9),
      S(6, 2),      S(-4, -12),  S(11, -11), S(-8, 9),    S(24, -5),
      S(20, -12),   S(-17, -23), S(32, -17), S(3, 3),     S(-45, -12),
      S(27, -26),   S(-49, 11),  S(28, -10), S(-10, -28),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),   S(-5, 10), S(-7, 14), S(-1, 31),
      S(10, 46), S(23, 60), S(41, 62), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(0, 0),   S(2, -16),   S(3, -10), S(21, -18),
      S(5, -32), S(-10, -60), S(0, 0),   S(0, 0),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(0, 0),   S(-10, -2), S(-10, -7), S(-8, -7),
      S(0, -17), S(-10, 8),  S(-3, 42),  S(0, 0),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(0, 0),    S(-13, -4), S(-2, -2), S(-6, -2),
      S(-11, -2), S(0, 0),    S(0, 0),   S(0, 0),
};
constexpr Score KnightMobilityScore[9] = {
      S(31, 41), S(44, 54), S(52, 61), S(59, 64), S(64, 69),
      S(69, 67), S(74, 66), S(76, 59), S(0, 0),
};
constexpr Score BishopMobilityScore[14] = {
      S(37, -5), S(52, 8),  S(58, 18), S(65, 29), S(67, 39),
      S(68, 43), S(68, 45), S(69, 48), S(68, 49), S(64, 51),
      S(66, 50), S(34, 65), S(52, 46), S(0, 0),
};
constexpr Score RookMobilityScore[15] = {
      S(47, 53), S(54, 54), S(54, 59), S(56, 66), S(56, 64),
      S(62, 69), S(67, 69), S(71, 71), S(74, 72), S(76, 72),
      S(78, 73), S(75, 75), S(77, 73), S(60, 75), S(0, 0),
};
constexpr Score QueenMobilityScore[28] = {
      S(-55, 124), S(25, 78), S(48, 95), S(51, 95), S(56, 97), S(63, 93),
      S(69, 94),   S(75, 93), S(79, 90), S(81, 91), S(83, 90), S(83, 90),
      S(85, 89),   S(85, 88), S(86, 88), S(84, 87), S(86, 86), S(86, 85),
      S(87, 85),   S(86, 84), S(87, 83), S(88, 83), S(86, 84), S(90, 80),
      S(87, 80),   S(92, 77), S(80, 72), S(0, 0),
};
constexpr Score kingAttackersWeight[7] = {
      S(-3, 6),  S(-7, 36),  S(-23, 26), S(-15, 26),
      S(-9, 16), S(10, -59), S(0, 0),
};
constexpr Score trappedRookWeight = {
      S(-5, 2),
};
constexpr Score rookOnOpenFile[2] = {
      S(14, -13),
      S(24, -23),
};
constexpr Score openFileNextToKing[3] = {
      S(7, -12),
      S(-4, -7),
      S(-1, -23),
};
constexpr Score pawnShieldStrength[4] = {
      S(-22, 4),
      S(6, -8),
      S(29, -25),
      S(47, -46),
};
constexpr Score pushedPawnShieldStrength[4] = {
      S(23, -18),
      S(0, 0),
      S(0, 0),
      S(0, 0),
};
constexpr Score kingAttackersDistance[8] = {
      S(-9, -16), S(-10, -24), S(0, -22),  S(24, -44),
      S(12, -40), S(-10, -17), S(-21, -2), S(0, 0),
};
constexpr Score xRayKingAttackersDistance[8] = {
      S(-24, -67), S(-51, -68), S(-51, -69), S(-45, -70),
      S(-24, -65), S(-24, -66), S(-30, -58), S(0, 0),
};
constexpr Score xRayKingAttackPieceWeight[7] = {
      S(0, 0), S(0, 0), S(0, 0), S(6, -11), S(0, -62), S(-58, -85), S(0, 0),
};

struct EvalWeights {
    const Score pawnScore = S(35, 42);
    const Score knightScore = S(73, 68);
    const Score bishopScore = S(71, 48);
    const Score rookScore = S(76, 72);
    const Score queenScore = S(86, 87);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),
          S(0, 0),   S(0, 0),    S(28, 64),  S(56, 58),  S(42, 62), S(47, 43),
          S(44, 48), S(8, 39),   S(-22, 68), S(-66, 76), S(20, 68), S(26, 70),
          S(40, 48), S(39, 23),  S(33, 29),  S(62, 38),  S(46, 61), S(10, 61),
          S(4, 59),  S(6, 51),   S(16, 34),  S(20, 18),  S(32, 21), S(35, 30),
          S(10, 46), S(8, 45),   S(-10, 42), S(-1, 39),  S(4, 26),  S(14, 18),
          S(12, 21), S(6, 25),   S(3, 30),   S(-3, 24),  S(-4, 35), S(-3, 34),
          S(4, 27),  S(5, 25),   S(11, 28),  S(2, 28),   S(17, 27), S(9, 19),
          S(-3, 42), S(1, 42),   S(1, 30),   S(9, 25),   S(13, 32), S(5, 37),
          S(11, 33), S(-12, 36), S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),
          S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(34, 24),  S(-2, 47),  S(58, 55),  S(66, 42), S(58, 58), S(51, 48),
          S(-21, 61), S(50, -12), S(48, 55),  S(67, 51), S(67, 54), S(69, 57),
          S(72, 47),  S(72, 53),  S(62, 40),  S(53, 30), S(39, 60), S(64, 58),
          S(77, 66),  S(71, 60),  S(68, 56),  S(75, 60), S(53, 47), S(56, 25),
          S(44, 45),  S(50, 64),  S(67, 73),  S(82, 72), S(56, 74), S(72, 70),
          S(26, 64),  S(64, 45),  S(43, 71),  S(49, 70), S(64, 75), S(67, 69),
          S(74, 69),  S(63, 61),  S(69, 57),  S(61, 48), S(23, 55), S(33, 54),
          S(50, 58),  S(53, 71),  S(60, 70),  S(56, 50), S(51, 46), S(46, 47),
          S(3, 73),   S(29, 68),  S(27, 49),  S(47, 50), S(51, 50), S(42, 58),
          S(34, 39),  S(46, 46),  S(-25, 44), S(30, 39), S(8, 53),  S(28, 54),
          S(32, 39),  S(42, 33),  S(38, 45),  S(14, 66),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(70, 52), S(41, 47), S(44, 45), S(51, 40), S(28, 42), S(53, 39),
          S(38, 49), S(53, 45), S(52, 37), S(64, 35), S(66, 37), S(61, 48),
          S(57, 44), S(53, 35), S(67, 44), S(45, 32), S(45, 50), S(60, 51),
          S(69, 42), S(69, 43), S(53, 44), S(69, 48), S(54, 49), S(40, 49),
          S(46, 40), S(56, 42), S(56, 54), S(64, 54), S(72, 48), S(68, 42),
          S(50, 45), S(34, 45), S(34, 48), S(47, 52), S(59, 51), S(71, 48),
          S(63, 51), S(57, 45), S(57, 40), S(66, 33), S(53, 39), S(75, 42),
          S(65, 47), S(59, 48), S(66, 51), S(57, 43), S(68, 42), S(66, 46),
          S(70, 51), S(64, 38), S(66, 38), S(54, 37), S(59, 45), S(66, 40),
          S(84, 57), S(64, 45), S(47, 39), S(69, 50), S(58, 37), S(26, 43),
          S(43, 35), S(49, 52), S(78, 34), S(46, 35),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(69, 76), S(74, 73), S(63, 78), S(65, 74), S(64, 73), S(56, 73),
          S(58, 77), S(66, 75), S(73, 73), S(72, 73), S(78, 77), S(80, 73),
          S(69, 69), S(81, 68), S(68, 68), S(83, 67), S(72, 74), S(77, 77),
          S(77, 74), S(76, 71), S(82, 70), S(81, 63), S(86, 68), S(80, 70),
          S(71, 74), S(75, 72), S(71, 76), S(69, 72), S(77, 64), S(70, 64),
          S(75, 67), S(78, 66), S(46, 76), S(50, 75), S(55, 79), S(58, 76),
          S(62, 72), S(42, 68), S(61, 62), S(56, 66), S(48, 78), S(73, 75),
          S(56, 73), S(57, 72), S(50, 71), S(47, 59), S(85, 49), S(66, 58),
          S(61, 80), S(55, 75), S(65, 70), S(57, 69), S(60, 59), S(70, 49),
          S(95, 53), S(48, 69), S(63, 75), S(55, 78), S(67, 74), S(69, 71),
          S(73, 66), S(64, 66), S(75, 73), S(64, 69),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(81, 82),  S(75, 77),  S(75, 80), S(70, 74), S(59, 77),  S(64, 74),
          S(78, 77),  S(77, 79),  S(78, 90), S(72, 87), S(78, 84),  S(75, 83),
          S(70, 80),  S(73, 73),  S(78, 80), S(86, 83), S(78, 92),  S(78, 90),
          S(82, 87),  S(79, 82),  S(77, 78), S(78, 77), S(65, 75),  S(71, 80),
          S(72, 94),  S(78, 92),  S(76, 90), S(77, 83), S(84, 83),  S(80, 81),
          S(84, 84),  S(77, 81),  S(70, 94), S(74, 90), S(90, 91),  S(79, 88),
          S(82, 88),  S(76, 85),  S(89, 86), S(85, 86), S(72, 91),  S(107, 93),
          S(84, 90),  S(70, 91),  S(81, 92), S(80, 89), S(104, 88), S(85, 92),
          S(101, 92), S(79, 92),  S(81, 90), S(82, 93), S(86, 93),  S(85, 89),
          S(104, 91), S(100, 86), S(64, 95), S(57, 99), S(68, 97),  S(80, 92),
          S(79, 94),  S(36, 106), S(78, 99), S(69, 95),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-105, -36), S(-59, -5),  S(-67, 9),  S(-91, 8),   S(-100, 4),
          S(-22, 17),   S(-26, 35),  S(22, -61), S(-92, 16),  S(4, 7),
          S(-91, 36),   S(13, -1),   S(31, 2),   S(-46, 31),  S(93, 13),
          S(19, 16),    S(-111, 28), S(72, 0),   S(-24, 33),  S(-21, 26),
          S(-65, 40),   S(30, 41),   S(40, 25),  S(19, 17),   S(-57, 18),
          S(26, 10),    S(13, 22),   S(-90, 27), S(-71, 29),  S(1, 30),
          S(-52, 29),   S(-91, 32),  S(-65, 5),  S(-5, 3),    S(-45, 28),
          S(-59, 19),   S(-40, 19),  S(-11, 23), S(-43, 13),  S(-76, 24),
          S(-42, 0),    S(-7, 0),    S(-14, 11), S(-9, 6),    S(12, -1),
          S(-38, 16),   S(31, -9),   S(-37, 9),  S(31, -14),  S(20, -9),
          S(6, 2),      S(-4, -12),  S(11, -11), S(-8, 9),    S(24, -5),
          S(20, -12),   S(-17, -23), S(32, -17), S(3, 3),     S(-45, -12),
          S(27, -26),   S(-49, 11),  S(28, -10), S(-10, -28),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),   S(-5, 10), S(-7, 14), S(-1, 31),
          S(10, 46), S(23, 60), S(41, 62), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(0, 0),   S(2, -16),   S(3, -10), S(21, -18),
          S(5, -32), S(-10, -60), S(0, 0),   S(0, 0),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(0, 0),   S(-10, -2), S(-10, -7), S(-8, -7),
          S(0, -17), S(-10, 8),  S(-3, 42),  S(0, 0),
    };
    const Score backwardPawnRankBonus[8] = {
          S(0, 0),    S(-13, -4), S(-2, -2), S(-6, -2),
          S(-11, -2), S(0, 0),    S(0, 0),   S(0, 0),
    };
    const Score KnightMobilityScore[9] = {
          S(31, 41), S(44, 54), S(52, 61), S(59, 64), S(64, 69),
          S(69, 67), S(74, 66), S(76, 59), S(0, 0),
    };
    const Score BishopMobilityScore[14] = {
          S(37, -5), S(52, 8),  S(58, 18), S(65, 29), S(67, 39),
          S(68, 43), S(68, 45), S(69, 48), S(68, 49), S(64, 51),
          S(66, 50), S(34, 65), S(52, 46), S(0, 0),
    };
    const Score RookMobilityScore[15] = {
          S(47, 53), S(54, 54), S(54, 59), S(56, 66), S(56, 64),
          S(62, 69), S(67, 69), S(71, 71), S(74, 72), S(76, 72),
          S(78, 73), S(75, 75), S(77, 73), S(60, 75), S(0, 0),
    };
    const Score QueenMobilityScore[28] = {
          S(-55, 124), S(25, 78), S(48, 95), S(51, 95), S(56, 97), S(63, 93),
          S(69, 94),   S(75, 93), S(79, 90), S(81, 91), S(83, 90), S(83, 90),
          S(85, 89),   S(85, 88), S(86, 88), S(84, 87), S(86, 86), S(86, 85),
          S(87, 85),   S(86, 84), S(87, 83), S(88, 83), S(86, 84), S(90, 80),
          S(87, 80),   S(92, 77), S(80, 72), S(0, 0),
    };
    const Score kingAttackersWeight[7] = {
          S(-3, 6),  S(-7, 36),  S(-23, 26), S(-15, 26),
          S(-9, 16), S(10, -59), S(0, 0),
    };
    const Score trappedRookWeight = {
          S(-5, 2),
    };
    const Score rookOnOpenFile[2] = {
          S(14, -13),
          S(24, -23),
    };
    const Score openFileNextToKing[3] = {
          S(7, -12),
          S(-4, -7),
          S(-1, -23),
    };
    const Score pawnShieldStrength[4] = {
          S(-22, 4),
          S(6, -8),
          S(29, -25),
          S(47, -46),
    };
    const Score pushedPawnShieldStrength[4] = {
          S(23, -18),
          S(0, 0),
          S(0, 0),
          S(0, 0),
    };
    const Score kingAttackersDistance[8] = {
          S(-9, -16), S(-10, -24), S(0, -22),  S(24, -44),
          S(12, -40), S(-10, -17), S(-21, -2), S(0, 0),
    };
    const Score xRayKingAttackersDistance[8] = {
          S(-24, -67), S(-51, -68), S(-51, -69), S(-45, -70),
          S(-24, -65), S(-24, -66), S(-30, -58), S(0, 0),
    };
    const Score xRayKingAttackPieceWeight[7] = {
          S(0, 0), S(0, 0), S(0, 0), S(6, -11), S(0, -62), S(-58, -85), S(0, 0),
    };
};

struct Trace {
    int pawnScore[NUM_COLOR] = {0};
    int knightScore[NUM_COLOR] = {0};
    int bishopScore[NUM_COLOR] = {0};
    int rookScore[NUM_COLOR] = {0};
    int queenScore[NUM_COLOR] = {0};
    int pawnPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int knightPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int bishopPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int rookPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int queenPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int kingPcSq[SQUARE_CT][NUM_COLOR] = {{0}};
    int passedPawn[8][NUM_COLOR] = {{0}};
    int doubledPawns[8][NUM_COLOR] = {0};
    int isolatedPawns[8][NUM_COLOR] = {0};
    int backwardPawns[8][NUM_COLOR] = {0};
    int knightMobility[9][NUM_COLOR] = {{0}};
    int bishopMobility[14][NUM_COLOR] = {{0}};
    int rookMobility[15][NUM_COLOR] = {{0}};
    int queenMobility[28][NUM_COLOR] = {{0}};
    int kingAttackers[7][NUM_COLOR] = {{0}};
    int trappedRooks[NUM_COLOR] = {0};
    int openFileRooks[2][NUM_COLOR] = {{0}};
    int openKingFiles[3][NUM_COLOR] = {{0}};
    int pawnShieldStrength[4][NUM_COLOR] = {{0}};
    int pushedPawnShieldStrength[4][NUM_COLOR] = {{0}};
    int kingAttackersDistance[8][NUM_COLOR] = {{0}};
    int xRayKingAttackersDistance[8][NUM_COLOR] = {{0}};
    int xRayKingAttackPieceWeight[7][NUM_COLOR] = {{0}};
};

struct TracePeek {
    TracePeek(Trace &ts, EvalWeights &ws) : t(ts), w(ws){};

  public:
    void print();
    int calculate(std::tuple<int, int, int> phase);

  private:
    Trace &t;
    EvalWeights &w;
};
} // namespace Yayo

/*
**
constexpr Score pawnScore = S(0, 0);
constexpr Score knightScore = S(0, 0);
constexpr Score bishopScore = S(0, 0);
constexpr Score rookScore = S(0, 0);
constexpr Score queenScore = S(0, 0);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score KnightMobilityScore[9] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score BishopMobilityScore[14] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score RookMobilityScore[15] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score QueenMobilityScore[28] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score kingAttackersWeight[7] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0),
                                          S(0, 0), S(0, 0), S(0, 0)};

constexpr Score trappedRookWeight = {
      S(0, 0),
};
constexpr Score rookOnOpenFile[2] = {
      S(0, 0),
      S(0, 0),
};
constexpr Score openFileNextToKing[3] = {
      S(0, 0),
      S(0, 0),
      S(0, 0),
};
constexpr Score pawnShieldStrength[4] = {
      S(0, 0),
      S(0, 0),
      S(0, 0),
      S(0, 0),
};
constexpr Score pushedPawnShieldStrength[4] = {
      S(0, 0),
      S(0, 0),
      S(0, 0),
      S(0, 0),
};
constexpr Score kingAttackersDistance[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score xRayKingAttackersDistance[8] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
constexpr Score xRayKingAttackPieceWeight[7] = {
      S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)};
**
*/

#endif // WEIGHTS_H_
