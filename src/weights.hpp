#ifndef WEIGHTS_H_
#define WEIGHTS_H_
#include "util.hpp"
constexpr Score pawnScore = S(92, 117);
constexpr Score knightScore = S(328, 437);
constexpr Score bishopScore = S(396, 398);
constexpr Score rookScore = S(525, 684);
constexpr Score queenScore = S(1106, 1378);

constexpr Score taperedPawnPcSq[SQUARE_CT] = {
      S(0, 0),      S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0),
      S(0, 0),      S(0, 0),    S(0, 0),     S(-15, 145), S(7, 121),
      S(-27, 139),  S(19, 72),  S(-23, 63),  S(-7, 75),   S(-102, 155),
      S(-140, 163), S(2, 115),  S(-16, 112), S(32, 48),   S(22, -6),
      S(43, -16),   S(104, 27), S(66, 68),   S(14, 89),   S(-19, 71),
      S(-16, 49),   S(-4, 37),  S(1, 13),    S(26, 15),   S(26, 20),
      S(10, 35),    S(8, 37),   S(-29, 45),  S(-26, 41),  S(-8, 23),
      S(4, 12),     S(4, 12),   S(7, 18),    S(-3, 27),   S(-4, 18),
      S(-21, 40),   S(-18, 32), S(-5, 27),   S(0, 25),    S(19, 28),
      S(13, 25),    S(28, 18),  S(8, 17),    S(-14, 43),  S(-16, 37),
      S(-2, 30),    S(10, 19),  S(13, 36),   S(39, 26),   S(43, 15),
      S(6, 15),     S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0),
      S(0, 0),      S(0, 0),    S(0, 0),     S(0, 0),
};
constexpr Score taperedKnightPcSq[SQUARE_CT] = {
      S(-151, -83), S(-101, -59), S(-72, -33),   S(-28, -37), S(32, -68),
      S(-95, -48),  S(-63, -31),  S(-106, -153), S(4, -18),   S(4, -3),
      S(51, -22),   S(92, -27),   S(77, -26),    S(143, -50), S(30, -16),
      S(63, -62),   S(15, -20),   S(49, -14),    S(68, 22),   S(87, 29),
      S(143, 19),   S(181, -3),   S(87, -36),    S(60, -41),  S(10, 14),
      S(33, 15),    S(58, 40),    S(93, 24),     S(71, 35),   S(98, 27),
      S(61, 4),     S(85, -15),   S(21, 14),     S(29, 6),    S(38, 38),
      S(53, 29),    S(60, 33),    S(57, 25),     S(81, -13),  S(44, -2),
      S(-8, -21),   S(9, -8),     S(25, 4),      S(27, 24),   S(53, 22),
      S(39, -8),    S(41, -18),   S(36, -23),    S(-20, -9),  S(3, -4),
      S(2, -5),     S(29, 0),     S(44, -9),     S(25, -1),   S(26, -21),
      S(19, -5),    S(-58, -15),  S(9, -26),     S(-11, -16), S(31, -13),
      S(27, -9),    S(30, -33),   S(24, -31),    S(-23, 22),
};
constexpr Score taperedBishopPcSq[SQUARE_CT] = {
      S(-39, 2),  S(-60, 20), S(-105, 11), S(-96, 13), S(-73, 25), S(-37, 4),
      S(-36, -4), S(-83, 4),  S(-21, 10),  S(-14, 10), S(-22, 20), S(-22, 20),
      S(-29, 15), S(17, 11),  S(10, 20),   S(-10, 3),  S(0, 33),   S(-3, 14),
      S(21, 18),  S(30, 11),  S(40, 7),    S(107, 11), S(56, 8),   S(30, 26),
      S(-29, 28), S(0, 19),   S(18, 16),   S(48, 22),  S(35, 22),  S(23, 23),
      S(-7, 23),  S(-35, 31), S(-21, 16),  S(-16, 20), S(1, 20),   S(22, 27),
      S(23, 22),  S(-8, 21),  S(-19, 19),  S(-6, -4),  S(-13, 14), S(19, 15),
      S(0, 15),   S(12, 16),  S(16, 29),   S(11, 8),   S(19, 11),  S(13, 6),
      S(10, 25),  S(2, 1),    S(20, -8),   S(-10, 18), S(4, 18),   S(25, 0),
      S(26, 7),   S(9, 25),   S(-18, 14),  S(27, 31),  S(9, 21),   S(-6, 15),
      S(-6, 13),  S(5, 22),   S(17, 15),   S(11, 2),
};
constexpr Score taperedRookPcSq[SQUARE_CT] = {
      S(49, -4),  S(-3, 38),  S(11, 44),  S(28, 48),   S(91, 23),   S(82, 23),
      S(81, 27),  S(114, 11), S(-22, 24), S(-30, 39),  S(1, 48),    S(32, 34),
      S(16, 38),  S(72, 17),  S(47, 10),  S(110, -14), S(-26, 19),  S(11, 29),
      S(-4, 26),  S(22, 10),  S(69, 7),   S(121, -14), S(161, -16), S(122, -46),
      S(-37, 30), S(-18, 24), S(-26, 32), S(-10, 22),  S(3, -5),    S(-5, 0),
      S(43, -12), S(53, -19), S(-55, 23), S(-62, 23),  S(-54, 26),  S(-52, 20),
      S(-44, 21), S(-55, 15), S(-3, 3),   S(-22, -6),  S(-66, 15),  S(-61, 22),
      S(-41, -1), S(-57, 11), S(-31, -3), S(-26, -16), S(23, -36),  S(-4, -37),
      S(-67, 12), S(-56, -7), S(-25, 4),  S(-25, -9),  S(-21, -13), S(-11, -18),
      S(23, -51), S(-40, -8), S(-40, 2),  S(-35, 3),   S(-20, 1),   S(-12, -8),
      S(-7, -18), S(-14, -9), S(-5, -6),  S(-43, -11),
};
constexpr Score taperedQueenPcSq[SQUARE_CT] = {
      S(-10, -3),  S(-19, 18),  S(29, 60),   S(50, 75),   S(48, 73),
      S(79, 61),   S(134, -1),  S(101, 29),  S(-11, 29),  S(-68, 70),
      S(-25, 102), S(-31, 115), S(-21, 138), S(35, 96),   S(9, 102),
      S(110, 47),  S(10, 21),   S(-6, 44),   S(-8, 64),   S(1, 93),
      S(39, 112),  S(83, 100),  S(73, 85),   S(74, 79),   S(-11, 25),
      S(-7, 62),   S(-21, 74),  S(-28, 106), S(-22, 124), S(9, 91),
      S(33, 107),  S(27, 86),   S(4, -6),    S(-31, 61),  S(-22, 65),
      S(-5, 72),   S(-15, 77),  S(-8, 93),   S(3, 73),    S(21, 60),
      S(-2, -1),   S(8, 34),    S(-7, 47),   S(-1, 37),   S(-3, 49),
      S(18, 34),   S(31, 25),   S(26, 30),   S(6, 9),     S(9, -44),
      S(20, -5),   S(27, -6),   S(25, -3),   S(43, -48),  S(55, -65),
      S(75, -99),  S(18, -47),  S(22, -26),  S(42, -61),  S(45, -30),
      S(37, -31),  S(24, -53),  S(48, -42),  S(9, -34),
};
constexpr Score taperedKingPcSq[SQUARE_CT] = {
      S(-111, -170), S(9, -38),   S(19, -49),   S(-67, -23), S(-67, -15),
      S(-66, -16),   S(43, -25),  S(-34, -148), S(-84, -9),  S(-23, 17),
      S(-27, 17),    S(-28, 34),  S(57, 38),    S(-12, 44),  S(40, 35),
      S(-4, -3),     S(-136, 2),  S(50, 16),    S(-53, 49),  S(32, 58),
      S(15, 63),     S(64, 55),   S(26, 54),    S(-67, 11),  S(-69, -9),
      S(-86, 24),    S(-127, 63), S(-174, 86),  S(-156, 88), S(-90, 71),
      S(-108, 56),   S(-142, 10), S(-145, -35), S(-113, 15), S(-174, 57),
      S(-160, 74),   S(-181, 76), S(-169, 62),  S(-157, 42), S(-202, 6),
      S(-67, -31),   S(-9, -14),  S(-128, 32),  S(-149, 48), S(-146, 51),
      S(-169, 45),   S(-74, 7),   S(-120, -4),  S(77, -66),  S(-17, -19),
      S(-27, -1),    S(-82, 15),  S(-66, 14),   S(-57, 13),  S(23, -28),
      S(31, -51),    S(51, -131), S(99, -103),  S(77, -66),  S(-78, -36),
      S(14, -56),    S(-41, -35), S(71, -91),   S(63, -141),
};
constexpr Score passedPawnRankBonus[8] = {
      S(0, 0),   S(-2, 5),   S(-8, 12),  S(-9, 47),
      S(11, 74), S(17, 156), S(61, 236), S(0, 0),
};
constexpr Score doubledPawnRankBonus[8] = {
      S(-10, -10), S(-7, -31),   S(-17, -18), S(-16, -37),
      S(38, -78),  S(-83, -104), S(-10, -10), S(-10, -10),
};
constexpr Score isolatedPawnRankBonus[8] = {
      S(-6, -6),  S(-20, -7), S(-24, -14), S(-18, -8),
      S(-2, -23), S(23, -49), S(11, -1),   S(-6, -6),
};
constexpr Score backwardPawnRankBonus[8] = {
      S(-15, -15), S(-13, -14), S(-4, -7),   S(-9, -5),
      S(-15, -7),  S(-15, -15), S(-15, -15), S(-15, -15),
};
constexpr Score KnightMobilityScore[9] = {
      S(-45, -80), S(-9, -8), S(16, 21), S(29, 40), S(40, 46),
      S(47, 63),   S(62, 57), S(75, 52), S(84, 24),
};
constexpr Score BishopMobilityScore[14] = {
      S(-37, -15), S(8, -7),    S(29, 35),   S(38, 64),  S(53, 79),
      S(61, 96),   S(72, 105),  S(75, 107),  S(74, 116), S(84, 116),
      S(103, 108), S(110, 109), S(134, 101), S(163, 87),
};
constexpr Score RookMobilityScore[15] = {
      S(-13, -7), S(3, 64),   S(13, 90),   S(19, 122), S(21, 129),
      S(26, 136), S(34, 155), S(43, 151),  S(51, 156), S(72, 166),
      S(81, 164), S(93, 176), S(103, 181), S(96, 179), S(101, 179),
};
constexpr Score QueenMobilityScore[28] = {
      S(-117, -135), S(-80, -95), S(-26, -56), S(-27, -13), S(-2, 56),
      S(6, 81),      S(12, 115),  S(15, 150),  S(26, 161),  S(33, 169),
      S(43, 174),    S(49, 172),  S(50, 186),  S(51, 192),  S(54, 195),
      S(54, 204),    S(54, 214),  S(51, 218),  S(74, 203),  S(93, 181),
      S(86, 198),    S(149, 170), S(134, 169), S(214, 156), S(134, 161),
      S(150, 184),   S(180, 184), S(54, 186),
};
struct EvalWeights {
    const Score pawnScore = S(89, 115);
    const Score knightScore = S(334, 434);
    const Score bishopScore = S(388, 399);
    const Score rookScore = S(521, 678);
    const Score queenScore = S(1103, 1372);

    const Score taperedPawnPcSq[SQUARE_CT] = {
          S(0, 0),      S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),    S(0, 0),     S(-7, 139), S(9, 114),
          S(-35, 143),  S(13, 76),  S(-23, 69),  S(-13, 69), S(-110, 149),
          S(-132, 156), S(1, 121),  S(-11, 117), S(32, 46),  S(26, -10),
          S(36, -10),   S(109, 31), S(60, 73),   S(21, 85),  S(-19, 75),
          S(-13, 52),   S(-1, 37),  S(4, 15),    S(28, 19),  S(26, 20),
          S(9, 38),     S(10, 38),  S(-27, 48),  S(-24, 44), S(-3, 23),
          S(6, 13),     S(10, 15),  S(10, 18),   S(-1, 27),  S(0, 20),
          S(-17, 43),   S(-15, 36), S(-1, 30),   S(5, 27),   S(24, 30),
          S(16, 27),    S(29, 22),  S(13, 19),   S(-10, 45), S(-14, 40),
          S(3, 31),     S(13, 21),  S(20, 34),   S(41, 26),  S(43, 19),
          S(9, 16),     S(0, 0),    S(0, 0),     S(0, 0),    S(0, 0),
          S(0, 0),      S(0, 0),    S(0, 0),     S(0, 0),
    };
    const Score taperedKnightPcSq[SQUARE_CT] = {
          S(-158, -75), S(-109, -66), S(-64, -27),  S(-21, -30), S(40, -61),
          S(-90, -41),  S(-55, -24),  S(-99, -146), S(-3, -25),  S(-2, -6),
          S(50, -28),   S(84, -31),   S(70, -27),   S(136, -43), S(23, -23),
          S(64, -55),   S(7, -16),    S(56, -22),   S(64, 16),   S(85, 26),
          S(136, 12),   S(173, -1),   S(86, -30),   S(55, -40),  S(3, 9),
          S(29, 11),    S(53, 39),    S(90, 23),    S(67, 35),   S(92, 23),
          S(57, 1),     S(88, -21),   S(17, 13),    S(28, 3),    S(35, 33),
          S(51, 24),    S(55, 32),    S(53, 19),    S(74, -7),   S(40, -9),
          S(-9, -16),   S(6, -12),    S(22, -2),    S(26, 17),   S(46, 22),
          S(37, -12),   S(37, -21),   S(31, -31),   S(-24, -13), S(-5, 0),
          S(1, -3),     S(29, -7),    S(40, -11),   S(25, -8),   S(27, -29),
          S(18, -10),   S(-51, -23),  S(3, -32),    S(-16, -9),  S(28, -19),
          S(20, -15),   S(25, -33),   S(23, -38),   S(-18, 28),
    };
    const Score taperedBishopPcSq[SQUARE_CT] = {
          S(-32, 1),  S(-52, 15), S(-113, 10), S(-89, 17), S(-66, 32),
          S(-45, 2),  S(-43, -8), S(-75, -1),  S(-28, 10), S(-17, 9),
          S(-29, 18), S(-14, 14), S(-35, 20),  S(12, 11),  S(16, 15),
          S(-17, 10), S(2, 28),   S(-2, 19),   S(17, 21),  S(26, 10),
          S(43, 13),  S(104, 10), S(51, 15),   S(34, 26),  S(-27, 22),
          S(-3, 20),  S(21, 14),  S(47, 21),   S(40, 22),  S(17, 30),
          S(-2, 16),  S(-41, 31), S(-17, 16),  S(-13, 25), S(0, 26),
          S(26, 27),  S(27, 16),  S(-4, 21),   S(-19, 22), S(0, -6),
          S(-8, 13),  S(19, 12),  S(2, 18),    S(10, 19),  S(20, 27),
          S(11, 13),  S(22, 4),   S(12, 11),   S(6, 32),   S(3, 1),
          S(19, -12), S(-6, 16),  S(4, 19),    S(20, 7),   S(23, 12),
          S(7, 23),   S(-11, 8),  S(31, 25),   S(11, 21),  S(0, 18),
          S(-10, 13), S(3, 26),   S(11, 10),   S(7, 5),
    };
    const Score taperedRookPcSq[SQUARE_CT] = {
          S(45, 1),    S(5, 34),    S(11, 45),   S(22, 45),   S(96, 24),
          S(74, 25),   S(74, 30),   S(121, 11),  S(-14, 23),  S(-31, 36),
          S(6, 47),    S(38, 35),   S(12, 42),   S(77, 16),   S(47, 11),
          S(103, -7),  S(-25, 19),  S(18, 28),   S(3, 24),    S(27, 10),
          S(64, 14),   S(117, -18), S(156, -17), S(115, -39), S(-42, 28),
          S(-11, 20),  S(-19, 28),  S(-3, 23),   S(8, -1),    S(-4, 4),
          S(49, -11),  S(51, -13),  S(-47, 19),  S(-60, 25),  S(-48, 26),
          S(-49, 20),  S(-40, 25),  S(-48, 18),  S(-8, -3),   S(-16, -6),
          S(-60, 15),  S(-54, 21),  S(-44, -3),  S(-51, 9),   S(-27, 0),
          S(-22, -12), S(20, -28),  S(-4, -33),  S(-60, 12),  S(-52, -2),
          S(-24, 5),   S(-18, -11), S(-14, -16), S(-5, -23),  S(21, -52),
          S(-39, -5),  S(-37, 4),   S(-30, 3),   S(-16, 1),   S(-6, -8),
          S(-2, -17),  S(-9, -9),   S(-6, 0),    S(-39, -10),
    };
    const Score taperedQueenPcSq[SQUARE_CT] = {
          S(-5, -9),  S(-25, 12),  S(36, 54),   S(42, 77),   S(43, 68),
          S(72, 59),  S(128, 7),   S(98, 36),   S(-4, 21),   S(-61, 62),
          S(-30, 95), S(-25, 107), S(-16, 141), S(31, 90),   S(6, 95),
          S(105, 46), S(14, 14),   S(-13, 49),  S(-10, 57),  S(8, 85),
          S(41, 106), S(88, 93),   S(66, 78),   S(81, 74),   S(-11, 31),
          S(-12, 69), S(-21, 67),  S(-27, 99),  S(-25, 121), S(10, 88),
          S(40, 99),  S(30, 80),   S(6, -4),    S(-35, 68),  S(-17, 61),
          S(-5, 70),  S(-15, 82),  S(-5, 86),   S(8, 66),    S(25, 66),
          S(-1, 7),   S(8, 40),    S(-6, 47),   S(-1, 42),   S(-1, 48),
          S(24, 26),  S(32, 31),   S(24, 38),   S(8, 16),    S(9, -37),
          S(21, -4),  S(31, -9),   S(28, -5),   S(45, -53),  S(49, -66),
          S(75, -95), S(25, -55),  S(17, -31),  S(45, -55),  S(46, -24),
          S(37, -23), S(21, -45),  S(43, -36),  S(13, -27),
    };
    const Score taperedKingPcSq[SQUARE_CT] = {
          S(-121, -162), S(17, -46),  S(25, -49),   S(-75, -17), S(-59, -14),
          S(-61, -9),    S(36, -31),  S(-42, -140), S(-76, -2),  S(-15, 11),
          S(-32, 24),    S(-21, 34),  S(49, 34),    S(-21, 51),  S(32, 35),
          S(-11, -10),   S(-128, 1),  S(51, 9),     S(-53, 42),  S(25, 52),
          S(23, 61),     S(56, 53),   S(24, 58),    S(-59, 16),  S(-61, -12),
          S(-78, 17),    S(-119, 55), S(-166, 79),  S(-148, 82), S(-84, 66),
          S(-101, 51),   S(-135, 16), S(-137, -32), S(-105, 8),  S(-167, 55),
          S(-155, 68),   S(-174, 76), S(-162, 56),  S(-149, 37), S(-194, 1),
          S(-60, -32),   S(-3, -21),  S(-135, 30),  S(-143, 43), S(-144, 47),
          S(-162, 38),   S(-69, 3),   S(-113, -11), S(72, -64),  S(-12, -19),
          S(-21, -8),    S(-88, 14),  S(-72, 11),   S(-60, 8),   S(19, -30),
          S(27, -52),    S(52, -124), S(94, -107),  S(73, -70),  S(-73, -39),
          S(14, -58),    S(-42, -39), S(68, -93),   S(58, -143),
    };
    const Score passedPawnRankBonus[8] = {
          S(0, 0),   S(-2, 4),   S(-6, 9),   S(-8, 44),
          S(11, 74), S(22, 155), S(70, 231), S(0, 0),
    };
    const Score doubledPawnRankBonus[8] = {
          S(-10, -10), S(-5, -30),  S(-17, -18), S(-19, -31),
          S(31, -84),  S(-76, -96), S(-10, -10), S(-10, -10),
    };
    const Score isolatedPawnRankBonus[8] = {
          S(-6, -6),  S(-20, -6), S(-25, -14), S(-18, -8),
          S(-2, -23), S(17, -47), S(4, 0),     S(-6, -6),
    };
    const Score backwardPawnRankBonus[8] = {
          S(-15, -15), S(-13, -14), S(-5, -7),   S(-9, -4),
          S(-13, -7),  S(-15, -15), S(-15, -15), S(-15, -15),
    };
    const Score KnightMobilityScore[9] = {
          S(-42, -72), S(-16, -1), S(10, 24), S(23, 42), S(34, 48),
          S(41, 64),   S(56, 60),  S(68, 54), S(77, 26),
    };
    const Score BishopMobilityScore[14] = {
          S(-32, -15), S(12, -7),   S(34, 28),  S(43, 57),  S(58, 72),
          S(64, 89),   S(75, 99),   S(79, 103), S(77, 110), S(87, 109),
          S(104, 102), S(103, 107), S(139, 93), S(156, 80),
    };
    const Score RookMobilityScore[15] = {
          S(-9, 1),   S(-2, 70),  S(7, 92),   S(13, 120), S(16, 130),
          S(19, 139), S(27, 157), S(37, 153), S(46, 161), S(66, 169),
          S(75, 167), S(87, 177), S(95, 183), S(89, 179), S(93, 184),
    };
    const Score QueenMobilityScore[28] = {
          S(-109, -127), S(-72, -87), S(-34, -61), S(-27, -5),  S(-9, 62),
          S(3, 73),      S(7, 114),   S(15, 141),  S(22, 153),  S(29, 162),
          S(38, 168),    S(45, 165),  S(47, 179),  S(45, 190),  S(53, 187),
          S(52, 200),    S(50, 212),  S(45, 214),  S(74, 199),  S(96, 173),
          S(88, 194),    S(150, 164), S(129, 176), S(206, 157), S(126, 155),
          S(142, 184),   S(172, 188), S(62, 194),
    };
};

#endif // WEIGHTS_H_
